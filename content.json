{"pages":[{"title":"关于我","text":"一个个人博客，记载着我的生活以及折腾，始于2018年。 郑重声明 我的联系方式: sunct1990@163.com 除特别申明外，本站原创内容版权遵循 CC-BY-NC-SA 协议规定，可自由转载、引用，但需署名作者且注明文章出处。 欢迎交流，但不欢迎无信息的评论，也不欢迎为评论而评论；非特殊文章这里均以链接方式存在。 关于博客 整理、记录工作中的点点滴滴。 关于博主 暂无介绍。 公众号：sunsanmiao（孙三苗）或扫描下面的二维码","link":"/about/index.html"},{"title":"图书","text":"xxxxxxxxxxxxx xx HTML代码 xx xxxxxxxxxxxxx Some text","link":"/book/index.html"}],"posts":[{"title":"05月25日","text":"（一）好久不见 Hi~ ，好久没有这般问候，也好久没见。 如果我突然在对话框打入这一行字，估计换来的是你的一个表情包，或一个问号。 不知你是否还记得，今天是一个什么日子。 不记得也没事。不过在时间轮盘上一直印刻着，今天，属于我们两个的特殊日子。 今年依然如此，以此作为纪念。 （二）回首 如果再把我们以前的点点滴滴搬出来就太显矫情，也不能像你20日的留言那般，回忆太多也未必太过于煽情。 去年写的是什么，我已经忘记了里面的文字。 我知道，你不是喜欢这样的人，包括我。 如此，就从今天我能想到的说起。 自从复工以来也一直忙忙碌碌，也鲜有时间能平下心来写写文字。 今天北京的天气在乌云蔽日下，显得格外凉爽，早上出门时还偶遇些许零零星星的雨点。预计今天晚些还会有局部阵雨。中午出去买饭的时候外面急促的飘起了雨，没带伞就在楼下排队买了一份简单的午饭。不过，真希望这样的天气可以在这个夏天多持续一些时间。 今年可以说是很关键的一年。已持续4个多月的疫情还没有解除，给今年的经济带来前所未有的损失，并且因多变的国际形势，也使得无法预估未来的经济走势。也因此，在今年两会中抹去了对今年GDP的完成目标，有时候数字最有说服力，有时候单凭数字毫无用处。 四月，在一个充满生气的季节。对于你来说也是一个转折。经过一番周折，你依然辞职开启了新的人生轨迹。可喜亦可贺。也在此祝你的努力能取的满意的结果。走下去，并努力去做就是了。 在有限的时间里，系统的学习并取得好的成绩是一件大工程，也需要经历一些不为人知的辛劳。你看，枝头挂着的丰硕的果实也是要经历一年的蓄积，也要经历一番风吹日晒，还有为之辛勤劳作的人民的汗水。 你的时间是宝贵的。如此，我们之间的交流就不可避免的减少了。这都没有什么关系，如水般的淡交，也会细水长流的，那让这份美好像水般的一直保存着。 （三） 祝愿 虽不能拥有彼此，但彼此犹如花果般，这份情谊已到开花时节。 转眼，已走到四周年，其实想想也没那么久嘛。 都是当初一次不经意的邂逅，然后遇到了你。 不知未来能否还会如此，也只好写进祝愿。 首先祝愿你越来越可爱。 再次祝愿你未来可期。 最后祝愿我们。 “小编，我啥时候能上你的精选。”","link":"/posts/592ccd15.html"},{"title":"Apache Kafka","text":"1、请说明什么是Apache Kafka? Apache Kafka是由Apache开发的一种发布订阅消息系统，它是一个分布式的、分区的和重复的日志服务。 2、请说明什么是传统的消息传递方法? 传统的消息传递方法包括两种： ·排队：在队列中，一组用户可以从服务器中读取消息，每条消息都发送给其中一个人。 ·发布-订阅：在这个模型中，消息被广播给所有的用户。 3、请说明Kafka相对传统技术有什么优势? Apache Kafka与传统的消息传递技术相比优势之处在于： 快速:单一的Kafka代理可以处理成千上万的客户端，每秒处理数兆字节的读写操作。 可伸缩:在一组机器上对数据进行分区和简化，以支持更大的数据 持久:消息是持久性的，并在集群中进行复制，以防止数据丢失。 设计:它提供了容错保证和持久性 4、在Kafka中broker的意义是什么? 在Kafka集群中，broker术语用于引用服务器。 5、Kafka服务器能接收到的最大信息是多少? Kafka服务器可以接收到的消息的最大大小是1000000字节。 6、解释Kafka的Zookeeper是什么?我们可以在没有Zookeeper的情况下使用Kafka吗? Zookeeper是一个开放源码的、高性能的协调服务，它用于Kafka的分布式应用。 不，不可能越过Zookeeper，直接联系Kafka broker。一旦Zookeeper停止工作，它就不能服务客户端请求。 ·Zookeeper主要用于在集群中不同节点之间进行通信 ·在Kafka中，它被用于提交偏移量，因此如果节点在任何情况下都失败了，它都可以从之前提交的偏移量中获取 ·除此之外，它还执行其他活动，如: leader检测、分布式同步、配置管理、识别新节点何时离开或连接、集群、节点实时状态等等。 7、解释Kafka的用户如何消费信息? 在Kafka中传递消息是通过使用sendfile API完成的。它支持将字节从套接口转移到磁盘，通过内核空间保存副本，并在内核用户之间调用内核。 8、解释如何提高远程用户的吞吐量? 如果用户位于与broker不同的数据中心，则可能需要调优套接口缓冲区大小，以对长网络延迟进行摊销。 9、解释一下，在数据制作过程中，你如何能从Kafka得到准确的信息? 在数据中，为了精确地获得Kafka的消息，你必须遵循两件事: 在数据消耗期间避免重复，在数据生产过程中避免重复。 这里有两种方法，可以在数据生成时准确地获得一个语义: ·每个分区使用一个单独的写入器，每当你发现一个网络错误，检查该分区中的最后一条消息，以查看您的最后一次写入是否成功 ·在消息中包含一个主键(UUID或其他)，并在用户中进行反复制 10、解释如何减少ISR中的扰动?broker什么时候离开ISR? ISR是一组与leaders完全同步的消息副本，也就是说ISR中包含了所有提交的消息。ISR应该总是包含所有的副本，直到出现真正的故障。如果一个副本从leader中脱离出来，将会从ISR中删除。 11、Kafka为什么需要复制? Kafka的信息复制确保了任何已发布的消息不会丢失，并且可以在机器错误、程序错误或更常见些的软件升级中使用。 12、如果副本在ISR中停留了很长时间表明什么? 如果一个副本在ISR中保留了很长一段时间，那么它就表明，跟踪器无法像在leader收集数据那样快速地获取数据。 13、请说明如果首选的副本不在ISR中会发生什么? 如果首选的副本不在ISR中，控制器将无法将leadership转移到首选的副本。 14、有可能在生产后发生消息偏移吗? 在大多数队列系统中，作为生产者的类无法做到这一点，它的作用是触发并忘记消息。broker将完成剩下的工作，比如使用id进行适当的元数据处理、偏移量等。 作为消息的用户，你可以从Kafka broker中获得补偿。如果你注视SimpleConsumer类，你会注意到它会获取包括偏移量作为列表的MultiFetchResponse对象。此外，当你对Kafka消息进行迭代时，你会拥有包括偏移量和消息发送的MessageAndOffset对象。","link":"/posts/33560640.html"},{"title":"CGI, FastCGI,PHP-CGI,php-fpm的关系","text":"网上搜了一大堆，说的都是云里雾里。于是自己整理了一下。 一、什么是CGI CGI(Common Gateway Interface) 通用网关接口，CGI是外部应用程序（CGI程序）与WEB服务器之间的接口标准，是在CGI程序和Web服务器之间传递信息的过程。 Web服务器一般只处理静态文件请求（如 jpg、htm、html），如果碰到一个动态脚本请求（如php），服务器并不能直接运行php这样的文件，自己不能做，外包给别人吧，但是要与php做个约定，我给你什么，然后你给我什么。那这个约定就就是CGI协议。而实现这个协议的脚本叫做CGI程序。 web服务器主进程fork出一个新的进程来启动CGI程序，启动CGI程序需要一个过程，比如，读取配置文件，加载扩展等。CGI程序启动后，就会解析动态脚本，然后将结果返回给Web服务器，最后Web服务器再将结果返回给客户端，刚才fork的进程也会随之关闭。 这样，每次用户请求动态脚本，Web服务器都要重新fork一个新进程，去启动CGI程序，由CGI程序来处理动态脚本，处理完后进程随之关闭。 这种工作方式的效率是非常低下的。 二、什么是FastCGI 当请求量过大时CGI程序会严重浪费系统资源的。这样FastCGI就是为了解决这个问题。 FastCGI程序本身监听某个socket然后等待来自web服务器的连接，而不是像CGI程序是由web服务器 fork-exec，所以FastCGI本身是一个服务端程序，而web服务器对它来说则是客户端。 FastCGI被设计用来支持常驻（long-lived）应用进程，减少了fork-and-execute带来的开销 FastCGI进程通过监听的socket，收来自Web服务器的连接，这样FastCGI进程可以独立部署 服务器和FastCGI监听的socket之间按照消息的形式发送环境变量和其他数据 FastCGI程序和web服务器之间通过可靠的流式传输（Unix Domain Socket或TCP）来通信，相对于传统的CGI程序，有环境变量和标准输入输出，而FastCGI程序和web服务器之间则只有一条socket连接来传输数据，所以它把数据分成以下多种消息类型： FastCGI会提供这样的功能：首先会由某个程序读取相应的配置文件并初始化执行环境，当这一系列步骤完成之后，他会一下生成很多个cgi进程（也就是进程池），这样在以后处理php的请求时就不需要频繁的“读取配置、创建进程、销毁进程这样的步骤了”，所以FastCGI可以理解为就是为了实现这种效果而产生的一种处理办法。 三、什么是PHP-CGI PHP-CGI只是解释PHP脚本的程序。PHP-CGI只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理。所以就出现了一些能够调度PHP-CGI进程的程序。 四、什么是php-fpm 用来实现FastCGI的操作。“php-fpm是FastCGI进程的管理器，用来管理FastCGI进程的”，这句话可以理解成php-fpm就是能够实现FastCGI功能的程序，他目前由php官方集成到php内核中。所以就是如果要实现cgi的进程池功能就需要使用php-fpm 。php-fpm除了进程管理外，还实现FastCGI协议并且支持进程平滑重启。 五、FastCGI 与 PHP-CGI关系 FastCGI是协议，在php中由php-fpm实现，管理着解析php脚本的进程，PHP-CGI是一个程序，专门处理php脚本。 参考：http://yongxiong.leanote.com/post/%E4%BB%8ECGI%E5%88%B0FastCGI%E5%88%B0PHP-FPM","link":"/posts/cfdcbe73.html"},{"title":"安装go","text":"一、linux 环境下安装 安装包可从go官网 或者 go 中文网 ，找到安装包路径。如图所示，根据自己需求下载。 在操作环境下，执行下面的命令进行下载。（截止时间：2020年01月14日14:14:59） 1、下载安装包 1wget https://studygolang.com/dl/golang/go1.13.6.linux-amd64.tar.gz 根据你当前时间使用最新版本。 2、提取压缩包 提取压缩包到合适的目录（例如: /usr/local ，该目录一般是默认的目录），（注：根据自己的安装包修改命令中的版本号。） 1sudo tar -xzf go1.13.6.linux-amd64.tar.gz -C /usr/local 解压完，可删除压缩包： 1rm -rf go1.13.6.linux-amd64.tar.gz 3、查看安装版本 1go version 4、配置环境变量 1vim /etc/profile 进入编辑界面后 Shift+G 跳转至尾行，按 o 新插入一行，输入如下增加或修改： 123export GOROOT=/usr/local/goexport GOBIN=$GOROOT/binexport PATH=$PATH:$GOBIN 保存，并执行 1source /etc/profile 5、查看环境变量信息 1go env 信息如下： 123456789101112131415161718GO111MODULE=&quot;&quot;GOARCH=&quot;amd64&quot;GOBIN=&quot;/usr/local/go/bin&quot;GOCACHE=&quot;/root/.cache/go-build&quot;GOENV=&quot;/root/.config/go/env&quot;GOEXE=&quot;&quot;GOFLAGS=&quot;&quot;GOHOSTARCH=&quot;amd64&quot;GOHOSTOS=&quot;linux&quot;GONOPROXY=&quot;&quot;GONOSUMDB=&quot;&quot;GOOS=&quot;linux&quot;GOPATH=&quot;/root/go&quot;GOPRIVATE=&quot;&quot;GOPROXY=&quot;https://proxy.golang.org,direct&quot;GOROOT=&quot;/usr/local/go&quot;GOSUMDB=&quot;sum.golang.org&quot; 6、go版本升级 先删除旧版本，只需删除/usr/local/go 文件即可。运行命令： 1sudo rm -rf /usr/local/go 再根据此文进行 下载新版本包并安装即可。 二、mac 环境下安装 1、安装 使用 brew 运行命令： 1brew install go 2、查看安装版本 1go version 3、配置环境变量 编辑 1vim ~/.bash_profile 可参考我的配置： 123export GOROOT=&quot;/usr/local/Cellar/go/1.13.6/libexec&quot;export GOPATH=$HOME/code/goexport GOBIN=$GOPATH/bin 保存，并执行 1source ~/.bash_profile 4、升级版本 1brew upgrade go 5、切换版本 1brew switch go 1.13.6 6、卸载 1brew uninstall go","link":"/posts/d70c7b78.html"},{"title":"cross-request - chrome插件无效解决办法","text":"今天突然遇到chrome 插件 cross-request 不可用。重新加载以前下载的文件 cross-request .crx 无果，结果还是显示如下图的不可用情况。 只好自己又从网上重新下载了一下离线版的，亲测可用。 注：下载地址见文末。 把压缩包解压出来，其中里面的文件，如图： 使用 chrome 浏览器打开地址： chrome://extensions/ 通过 “加载已解压的扩展程序” 按钮 把刚才解压出的文件夹 3.0_0 选中即可。 插件使用正常界面： 最后把刚才显示无效的删除即可。 附：下载地址 链接: 下载地址 提取码: 5hyc","link":"/posts/1a33f37a.html"},{"title":"golang 语言学习文档","text":"golang学习资料： 下载地址： 链接: 下载地址：GO书籍 密码: ujj0 其他： 链接: 下载地址：GO语言编程（完整版） 密码: 750w 仅供学习使用，可使用浏览器在线预览，地址: Go语言编程_许式伟_完整版 仅供学习使用，可使用浏览器在线预览，地址: Go语言实战","link":"/posts/988c45bd.html"},{"title":"golang - 配置编辑工具","text":"go常用的编辑器包括但不限于：GoLand ,Visual Studio Code 目前我使用的是 GoLand 1、goland配置 打开goland设置 配置go modules 勾选 -[] Enable Go Modules (vgo) integration 选择并配置。 自动格式化代码 可以通过添加一个File Watcher来在文件发生变化的时候调用gofmt进行代码格式化，具体方法是，点击Preferences -&gt; Tools -&gt; File Watchers，点加号添加一个go fmt模版，Goland中预置的go fmt模版使用的是go fmt命令，将其替换为gofmt，然后在参数中增加-l -w -s参数，启用代码简化功能。添加配置后，保存源码时，goland就会执行代码格式化了。 如图所示：","link":"/posts/2ebe1bc0.html"},{"title":"Linux基本命令学习(一)-ifconfig、cd、ls、vi、pwd","text":"1、ifconfig IP查询 2、cd [目录名] 切换当前目录至dirName cd /home 进入 ‘/ home’ 目录’ cd … 返回上一级目录 cd …/… 返回上两级目录 cd 进入个人的主目录 cd ~user1 进入个人的主目录 cd - 返回上次所在的目录 3、ls [-option] 目录名称 显示制定目录下的内容 -a 显示所有文件和目录，包含隐藏文件和目录 -A 显示所有文件和目录，包含隐藏文件和目录，但是不包含“.”,“…” -t 根据时间排序 -l 显示文件和目录的完整属性 等同于命令 ll 完整属性信息包含七部分： 第一部分：由10列组成，第一列（“d”表示目录，“l”表示链接文件，“-”表示普通文件） 后九列，3个位一组，分为三组（“r”，read,可读；“w”,write,可写；“x”,execute,可执行） 第一组：文件拥有者所拥有的权限 第二组：文件拥有者所在群组成员所拥有的权限 第三组：其他人所拥有的权限 第二部分：节点，每增加一个硬链接，节点数加1 第三部分：拥有着 第四部分：群组（文件或者目录所在的群组） 第五部分：大小（单位：B） 第六部分：最新修改时间 第七部分：文件名 4、vi 文件名 如果vi后面的文件夹不存在，则新建文件夹；如果存在，则修改 vi详细步骤： （1）vi 文件名（进入一般模式） （2）按字母“i”(进入vi编辑模式，左下角出现insert) （3）对文件进行编辑 （4）按“esc”（退出编辑模式，进入一般模式，左下角insert消失） （5）输入：（进入命令模式）wq 保存退出；q! 强制退出不保存；w 文件另存为 5、pwd 显示工作路径","link":"/posts/ecf5933.html"},{"title":"Linux基本命令学习(三)- ln","text":"ln ln命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。 当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。 1ln [参数][源文件或目录][目标文件或目录] Linux文件系统中，有所谓的链接(link)，我们可以将其视为档案的别名，而链接又可分为两种 : 硬链接(hard link)与软链接(symbolic link)，硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。 不论是硬链接或软链接都不会将原本的档案复制一份，只会占用非常少量的磁碟空间。 软硬链接的区别： 软链接： 软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式 软链接可以对一个不存在的文件名进行链接 软链接可以对目录进行链接 软链接文件和被链接文件可以位于不同的文件系统，甚至可以跨越机器 软链接一旦原始文件被删除，链接文件立马失效 硬链接： 硬链接，以文件副本的形式存在。但不占用实际空间。 不允许给目录创建硬链接 硬链接只有在同一个文件系统中才能创建 硬链接指向一个原始文件时，及时原始文件被删除，链接文件依然有效， 必要参数： -b 删除，覆盖以前建立的链接 -d 允许超级用户制作目录的硬链接 -f 强制执行 -i 交互模式，文件存在则提示用户是否覆盖 -n 把符号链接视为一般目录 -s 软链接(符号链接) -v 显示详细的处理过程 选择参数： -S &quot;-S&lt;字尾备份字符串&gt; &quot;或 “–suffix=&lt;字尾备份字符串&gt;” -V “-V&lt;备份方式&gt;“或”–version-control=&lt;备份方式&gt;” –help 显示帮助信息 –version 显示版本信息 12ln -s file1 lnk1 #创建一个指向文件或目录的软链接 ln file1 lnk1 #创建一个指向文件或目录的物理链接 给文件创建软链接，为log2019.log文件创建软链接link2019，如果log2019.log丢失，link2019将失效： 1ln -s log2019.log link2019 给文件创建硬链接，为log2019.log创建硬链接ln2019，log2019.log与ln2019的各项属性相同 1ln log2019.log ln2019","link":"/posts/be4bd57b.html"},{"title":"Linux基本命令学习(二)-mkdir、rm、rmdir、mv、cp","text":"1、mkdir mkdir命令用于建立名称为 dirName 之子目录。 1mkdir [-p] dirName 其中： -p 确保目录名称存在，不存在的就建一个。 mkdir dir1 创建一个叫做 ‘dir1’ 的目录’ mkdir dir1 dir2 同时创建两个目录 mkdir -p /tmp/dir1/dir2 创建一个目录树 2、rm rm命令用于删除一个文件或者目录。 1rm [options] name... -i 删除前逐一询问确认。 -f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。 -r 将目录及以下之档案亦逐一删除。 rm test.txt rm：是否删除 一般文件 “test.txt”? y rm homework rm: 无法删除目录&quot;homework&quot;: 是一个目录 rm -r homework rm：是否删除 目录 “homework”? y 先用 rm -rf dir1 删除一个叫做 ‘dir1’ 的目录并同时删除其内容 rm -rf dir1 dir2 同时删除两个目录及它们的内容 先用 vi 命令创建文件 然后用 rm 命令删除 3、rmdir rmdir命令删除空的目录。 1rmdir [-p] dirName -p 是当子目录被删除后使它也成为空目录的话，则顺便一并删除。 先用mkdir 命令创建目录 BBB/Text rmdir -p BBB/Text 在工作目录下的 BBB 目录中，删除名为 Text 的子目录。若 Text 删除后，BBB 目录成为空目录，则 BBB 亦予删除。 4、mv mv命令用来为文件或目录改名、或将文件或目录移入其它位置。 命令格式 运行结果 mv 文件名 文件名 将源文件名改为目标文件名 mv 文件名 目录名 将文件移动到目标目录 mv 目录名 目录名 目标目录已存在，将源目录 移动到目标目录；目标 目录不存在则改名 mv 目录名 文件名 出错 5、cp cp命令主要用于复制文件或目录。 cp file1 file2 复制一个文件 cp dir/* . 复制一个目录下的所有文件到当前工作目录 cp -a /tmp/dir1 . 复制一个目录到当前工作目录 cp -a dir1 dir2 复制一个目录 -a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。 -d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。 -f：覆盖已经存在的目标文件而不给出提示。 -i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答&quot;y&quot;时目标文件将被覆盖。 -p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。 -r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。 -l：不复制文件，只是生成链接文件。 使用指令&quot;cp&quot;将当前目录&quot;test/&quot;下的所有文件复制到新目录&quot;newtest&quot;下，输入如下命令： 1$ cp –r test/ newtest","link":"/posts/81990dd0.html"},{"title":"Linux基本命令学习(五)-crontab","text":"Linux crontab是用来定期执行程序的命令。 当安装完成操作系统之后，默认便会启动此任务调度命令。 crond命令每分钟会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。 而linux任务调度的工作主要分为以下两类： 1、系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存 2、个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置 crontab [ -u user ] file crontab [ -u user ] { -l -r -e } 说明： crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。 -u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。 参数说明： -e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe) -r : 删除目前的时程表 -l : 列出目前的时程表 时程表的格式如下： f1 f2 f3 f4 f5 program 其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。 当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其余类推 当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其余类推 当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其余类推 当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其余类推","link":"/posts/85548b17.html"},{"title":"Memcached、Redis和MongoDB的区别","text":"一、Memcached Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提供动态、数据库驱动网站的速度。Memcached基于一个存储键/值对的hashmap。 端口（11211） Memcached的优点： Memcached可以利用多核优势，单实例吞吐量极高，可以达到几十万QPS（取决于key、value的字节大小以及服务器硬件性能，日常环境中QPS高峰大约在4-6w左右）。适用于最大程度扛量。 Memcached的局限性： 只支持简单的key/value数据结构，不像Redis可以支持丰富的数据类型。 无法进行持久化，数据不能备份，只能用于缓存使用，且重启后数据全部丢失。 无法进行数据同步，不能将MC中的数据迁移到其他MC实例中。 Memcached内存分配采用Slab Allocation机制管理内存，value大小分布差异较大时会造成内存利用率降低，并引发低利用率时依然出现踢出等问题。需要用户注重value设计。 应用场景： 1.分布式应该， 2.数据库前段缓存， 3.服务器间数据共享。 二、Redis Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。 端口（6379） Redis的优点： 支持多种数据结构，包括string(字符串)、 list(链表)、set(集合)和zset(有序集合)。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。 支持持久化操作，可以进行aof及rdb数据持久化到磁盘，从而进行数据备份或数据恢复等操作，较好的防止数据丢失的手段。 支持通过Replication进行数据复制，通过master-slave机制，可以实时进行数据的同步复制，支持多级复制和增量复制，master-slave机制是Redis进行HA的重要手段。 单线程请求，所有命令串行执行，并发情况下不需要考虑数据一致性问题。 支持pub/sub消息订阅机制，可以用来进行消息订阅与通知。 支持简单的事务需求，但业界使用场景很少，并不成熟。 Redis的局限性： Redis只能使用单线程，性能受限于CPU性能，故单实例CPU最高才可能达到5-6wQPS每秒（取决于数据结构，数据大小以及服务器硬件性能，日常环境中QPS高峰大约在1-2w左右）。 支持简单的事务需求，但业界使用场景很少，并不成熟，既是优点也是缺点。 Redis在string类型上会消耗较多内存，可以使用dict（hash表）压缩存储以降低内存耗用。 Mc和Redis都是Key-Value类型，不适合在不同数据集之间建立关系，也不适合进行查询搜索。比如redis的keys pattern这种匹配操作，对redis的性能是灾难。 应用场景： 1.配合关系型数据库做高速缓存 2.缓存高频次数据，降低数据库io 3.分布式架构，做session共享 三、mongoDB mongoDB 是一种文档性的数据库。先解释一下文档的数据库，即可以存放xml、json、bson类型系那个的数据。 这些数据具备自述性（self-describing），呈现分层的树状数据结构。redis可以用hash存放简单关系型数据。 mongoDB 存放json格式数据。 端口（27017） 适合场景：事件记录、内容管理或者博客平台，比如评论系统。_ mongodb持久化原理 mongodb与mysql不同，mysql的每一次更新操作都会直接写入硬盘，但是mongo不会，做为内存型数据库，数据操作会先写入内存，然后再会持久化到硬盘中去，那么mongo是如何持久化的呢 mongodb在启动时，专门初始化一个线程不断循环（除非应用crash掉），用于在一定时间周期内来从defer队列中获取要持久化的数据并写入到磁盘的journal(日志)和mongofile(数据)处，当然因为它不是在用户添加记录时就写到磁盘上，所以按mongodb开发者说，它不会造成性能上的损耗，因为看过代码发现，当进行CUD操作时，记录(Record类型)都被放入到defer队列中以供延时批量（groupcommit）提交写入，但相信其中时间周期参数是个要认真考量的参数，系统为90毫秒，如果该值更低的话，可能会造成频繁磁盘操作，过高又会造成系统宕机时数据丢失过。 MongoDB的数据文件很大 MongoDB采用的预分配空间的方式来防止文件碎片 从以下几个维度，对redis、memcache、mongoDB 做了对比 1.性能上： 性能上都很出色，具体到细节，由于Redis只使用单核，而Memcached可以使用多核，所以平均每一个核上Redis在存储小数据时比Memcached性能更高。而在100k以上的数据中，Memcached性能要高于Redis，虽然Redis最近也在存储大数据的性能上进行优化，但是比起 Memcached，还是稍有逊色。前两者性能差不多，大于 Mongodb。 2.内存空间和数据量大小： MemCached可以修改最大内存，采用LRU算法。 Redis增加了VM的特性，突破了物理内存的限制。 MongoDB 适合大数据量的存储，依赖操作系统 VM 做内存管理，吃内存也比较厉害，服务不要和别的服务在一起 3.操作便利上： MemCached数据结构单一，仅用来缓存数据 Redis支持更加丰富的数据类型，也可以在服务器端直接对数据进行丰富的操作,这样可以减少网络IO次数和数据体积。 Mongodb 支持丰富的数据表达，索引，最类似关系型数据库，支持的查询语言非常丰富。 4.可靠性上： MemCached不支持数据持久化，断电或重启后数据消失，但其稳定性是有保证的。 Redis支持数据持久化和数据恢复，允许单点故障，但是同时也会付出性能的代价。 MongoDB 从 1.8 版本开始采用 binlog 方式支持持久化的可靠性。 5.应用场景： Memcached：动态系统中减轻数据库负载，提升性能；做缓存，适合多读少写，大数据量的情况（如人人网大量查询用户信息、好友信息、文章信息等）。 Redis：适用于对读写效率要求都很高，数据处理业务复杂和对安全性要求较高的系统（如新浪微博的计数和微博发布部分系统，对数据安全性、读写要求都很高）。 MongoDB:主要解决海量数据的访问效率问题。","link":"/posts/3c85d9f1.html"},{"title":"Linux基本命令学习(四)-touch、chmod","text":"1、touch touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。 12touch [-acfm][-d&lt;日期时间&gt;][-r&lt;参考文件或目录&gt;] [-t&lt;日期时间&gt;][--help][--version][文件或目录…] 参数说明： a 改变档案的读取时间记录。 m 改变档案的修改时间记录。 c 假如目的档案不存在，不会建立新的档案。与 --no-create 的效果一样。 f 不使用，是为了与其他 unix 系统的相容性而保留。 r 使用参考档的时间记录，与 --file 的效果一样。 d 设定时间与日期，可以使用各种不同的格式。 t 设定档案的时间记录，格式与 date 指令相同。 –no-create 不会建立新档案。 –help 列出指令格式。 –version 列出版本讯息。 1$ touch testfile #修改文件的时间属性 使用指令&quot;touch&quot;时，如果指定的文件不存在，则将创建一个新的空白文件。例如，在当前目录下，使用该指令创建一个空白文件&quot;file&quot;，输入如下命令： 1$ touch file #创建一个名为“file”的新的空白文件 2、chmod chmod Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。 1chmod [-cfvR] [--help] [--version] mode file... 参数说明 mode : 权限设定字串，格式如下 : 1[ugoa...][\\[+-=][rwxX]...][,...] 其中： u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。 + 表示增加权限、- 表示取消权限、= 表示唯一设定权限。 r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。 其他参数说明： -c : 若该文件权限确实已经更改，才显示其更改动作 -f : 若该文件权限无法被更改也不要显示错误讯息 -v : 显示权限变更的详细资料 -R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更) –help : 显示辅助说明 –version : 显示版本 将文件 file1.txt 设为所有人皆可读取 : 1chmod ugo+r file1.txt 将文件 file1.txt 设为所有人皆可读取 : 1chmod a+r file1.txt 将文件 file1.txt 与 file2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 : 1chmod ug+w,o-w file1.txt file2.txt 将 ex1.py 设定为只有该文件拥有者可以执行 : 1chmod u+x ex1.py 将目前目录下的所有文件与子目录皆设为任何人可读取 : 123456chmod -R a+r \\*chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限 chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限 chown user1 file1 改变一个文件的所有人属性 chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性","link":"/posts/32e33b3a.html"},{"title":"MVCC（数据库多版本并发控制）","text":"前面的文章说到数据库的事务问题，在innodb引擎四个隔离级别（读未提交RU；读已提交RC；可重复读RR；可串行化Serializable）中，而MVCC只适用于RC和RR。 一、什么是MVCC Multi-Version Concurrency Control，就是在事务执行过程中加入“版本”这个概念、MVCC的实现，通过保存数据在某个时间点的快照来实现的。 1、MVCC优缺点 MVCC在大多数情况下代替了行锁，实现了对读的非阻塞，读不加锁，读写不冲突。缺点是每行记录都需要_额外的存储空间_，需要做更多的行维护和检查工作。 innodb 在事务上离不开undo log，那什么是undo log？ 在数据库中有三种日志形式，binlog/redo log /undo log。 binlog二进制日志是server层的，主要是左主从复制，时间点恢复使用，保存的是逻辑日志-&gt;执行的sql语句。 redo log重做日志是InnoDB存储引擎层的，用来保证事务安全，保存的是物理日志-&gt;数据。 undo log回滚日志保存了事务发生之前的数据的一个版本，可以用于回滚，同时可以提供多版本并发控制下的读（MVCC），也即非锁定读。保存的是逻辑日志-&gt;数据前一个版本。 其中，redo log通常是物理日志，记录的是数据页的物理修改。undo用来回滚行记录到某个版本。undo log一般是逻辑日志，根据每行记录进行记录。 通过以上知识点可以大体理解为：MVCC通过undo log 日志形式在事务中标记一个时间点形成快照，通过这个时间点的日志可以对事务进行回滚操作。 在不考虑redo log 的情况下利用undo log工作的简化过程为： 序号 动作 1 开始事务 2 记录数据行数据快照到undo log 3 更新数据 4 将undo log写到磁盘 5 将数据写到磁盘 6 提交事务 1）为了保证数据的持久性数据要在事务提交之前持久化 2）undo log的持久化必须在在数据持久化之前，这样才能保证系统崩溃时，可以用undo log来回滚事务 2、InnoDB存储引擎是如何记录事务操作的呢？ InnoDB存储引擎在数据库每行数据的后面添加了三个字段。事务id+回滚指针+自增id 6字节的事务ID(DB_TRX_ID)字段: 用来标识最近一次对本行记录做修改(insertupdate)的事务的标识符, 即最后一次修改(insertupdate)本行记录的事务id。至于delete操作，在innodb看来也不过是一次update操作，更新行中的一个特殊位将行表示为deleted, 并非真正删除。 7字节的回滚指针(DB_ROLL_PTR)字段: 指写入回滚段(rollback segment)的 undo log record (撤销日志记录记录)。如果一行记录被更新, 则 undo log record 包含 ‘重建该行记录被更新之前内容’ 所必须的信息。 6字节的DB_ROW_ID字段: 包含一个随着新行插入而单调递增的行ID, 行标识。（当由innodb自动产生聚集索引时，聚集索引会包括这个行ID的值，否则这个行ID不会出现在任何索引中。 结合聚簇索引的相关知识点, 我的理解是, 如果我们的表中没有主键或合适的唯一索引, 也就是无法生成聚簇索引的时候, InnoDB会帮我们自动生成聚集索引, 但聚簇索引会使用DB_ROW_ID的值来作为主键; 如果我们有自己的主键或者合适的唯一索引, 那么聚簇索引中也就不会包含 DB_ROW_ID 了 。","link":"/posts/765fe4cd.html"},{"title":"MySQL 优化常用方法","text":"1、选取最适用的字段属性 MySQL可以很好的支持大数据量的存取，但是一般说来，数据库中的表越小，在它上面执行的查询也就会越快。因此，在创建表的时候，为了获得更好的性能，我们可以将表中字段的宽度设得尽可能小。例如，在定义邮政编码这个字段时，如果将其设置为CHAR(255),显然给数据库增加了不必要的空间，甚至使用VARCHAR这种类型也是多余的，因为CHAR(6)就可以很好的完成任务了。同样的，如果可以的话，我们应该使用MEDIUMINT而不是 BIGIN来定义整型字段。 另外一个提高效率的方法是在可能的情况下，应该尽量把字段设置为NOT NULL，这样在将来执行查询的时候，数据库不用去比较NULL值。 对于某些文本字段，例如“省份”或者“性别”，我们可以将它们定义为ENUM类型。因为在MySQL中，ENUM类型被当作数值型数据来处理，而数值型数据被处理起来的速度要比文本类型快得多。这样，我们又可以提高数据库的性能。 2、使用连接（JOIN）来代替子查询(Sub-Queries) MySQL从4.1开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。例如，我们要将客户基本信息表中没有任何订单的客户删除掉，就可以利用子查询先从销售信息表中将所有发出订单的客户ID取出来，然后将结果传递给主查询，如下所示： 1DELETE FROM customerinfo WHERE CustomerID NOT in (SELECT CustomerID FROM salesinfo ); 使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询可以被更有效率的连接（JOIN）… 替代。例如，假设我们要将所有没有订单记录的用户取出来，可以用下面这个查询完成： 1SELECT * FROM customerinfo WHERE CustomerID NOT in (SELECT CustomerID FROM salesinfo ); 如果使用连接（JOIN）… 来完成这个查询工作，速度将会快很多。尤其是当salesinfo表中对CustomerID建有索引的话，性能将会更好，查询如下： 1SELECT * FROM customerinfo LEFT JOIN salesinfoON customerinfo.CustomerID=salesinfo. CustomerID WHERE salesinfo.CustomerID IS NULL; 连接（JOIN）… 之所以更有效率一些，是因为 MySQL不需要在内存中创建临时表来完成这个逻辑上的需要两个步骤的查询工作。 3、使用联合(UNION)来代替手动创建的临时表 MySQL 从 4.0 的版本开始支持 UNION 查询，它可以把需要使用临时表的两条或更多的 SELECT 查询合并的一个查询中。在客户端的查询会话结束的时候，临时表会被自动删除，从而保证数据库整齐、高效。使用 UNION 来创建查询的时候，我们只需要用 UNION作为关键字把多个 SELECT 语句连接起来就可以了，要注意的是所有 SELECT 语句中的字段数目要想同。下面的例子就演示了一个使用 UNION的查询。 123SELECT Name, Phone FROM client UNION SELECT Name, BirthDate FROM author UNION SELECT Name, Supplier FROM product; 4、事务 尽管我们可以使用子查询（Sub-Queries）、连接（JOIN）和联合（UNION）来创建各种各样的查询，但不是所有的数据库操作都可以只用一条或少数几条SQL语句就可以完成的。更多的时候是需要用到一系列的语句来完成某种工作。但是在这种情况下，当这个语句块中的某一条语句运行出错的时候，整个语句块的操作就会变得不确定起来。设想一下，要把某个数据同时插入两个相关联的表中，可能会出现这样的情况：第一个表中成功更新后，数据库突然出现意外状况，造成第二个表中的操作没有完成，这样，就会造成数据的不完整，甚至会破坏数据库中的数据。要避免这种情况，就应该使用事务，它的作用是：要么语句块中每条语句都操作成功，要么都失败。换句话说，就是可以保持数据库中数据的一致性和完整性。事物以BEGIN 关键字开始，COMMIT关键字结束。在这之间的一条SQL操作失败，那么，ROLLBACK命令就可以把数据库恢复到BEGIN开始之前的状态。 12345BEGIN; INSERT INTO salesinfo SET CustomerID=14; UPDATE inventory SET Quantity=11 WHERE item='book'; COMMIT; 事务的另一个重要作用是当多个用户同时使用相同的数据源时，它可以利用锁定数据库的方法来为用户提供一种安全的访问方式，这样可以保证用户的操作不被其它的用户所干扰。 5、锁定表 尽管事务是维护数据库完整性的一个非常好的方法，但却因为它的独占性，有时会影响数据库的性能，尤其是在很大的应用系统中。由于在事务执行的过程中，数据库将会被锁定，因此其它的用户请求只能暂时等待直到该事务结束。如果一个数据库系统只有少数几个用户来使用，事务造成的影响不会成为一个太大的问题；但假设有成千上万的用户同时访问一个数据库系统，例如访问一个电子商务网站，就会产生比较严重的响应延迟。 其实，有些情况下我们可以通过锁定表的方法来获得更好的性能。下面的例子就用锁定表的方法来完成前面一个例子中事务的功能。 1234567LOCK TABLE inventory WRITE SELECT Quantity FROM inventory WHEREItem='book'; ... UPDATE inventory SET Quantity=11 WHEREItem='book'; UNLOCK TABLES 这里，我们用一个 SELECT 语句取出初始数据，通过一些计算，用 UPDATE 语句将新值更新到表中。包含有 WRITE 关键字的 LOCK TABLE 语句可以保证在 UNLOCK TABLES 命令被执行之前，不会有其它的访问来对 inventory 进行插入、更新或者删除的操作。 6、使用外键 锁定表的方法可以维护数据的完整性，但是它却不能保证数据的关联性。这个时候我们就可以使用外键。例如，外键可以保证每一条销售记录都指向某一个存在的客户。在这里，外键可以把customerinfo 表中的CustomerID映射到salesinfo表中CustomerID，任何一条没有合法CustomerID的记录都不会被更新或插入到 salesinfo中。 12345678910111213CREATE TABLE customerinfo ( CustomerID INT NOT NULL , PRIMARY KEY ( CustomerID ) ) TYPE = INNODB; CREATE TABLE salesinfo ( SalesID INT NOT NULL, CustomerID INT NOT NULL, PRIMARY KEY(CustomerID, SalesID), FOREIGN KEY (CustomerID) REFERENCES customerinfo (CustomerID) ON DELETECASCADE ) TYPE = INNODB; 注意例子中的参数“ON DELETE CASCADE”。该参数保证当 customerinfo 表中的一条客户记录被删除的时候，salesinfo 表中所有与该客户相关的记录也会被自动删除。如果要在 MySQL 中使用外键，一定要记住在创建表的时候将表的类型定义为事务安全表 InnoDB类型。该类型不是 MySQL 表的默认类型。定义的方法是在 CREATE TABLE 语句中加上 TYPE=INNODB。如例中所示。 7、使用索引 索引是提高数据库性能的常用方法，它可以令数据库服务器以比没有索引快得多的速度检索特定的行，尤其是在查询语句当中包含有MAX(), MIN()和ORDERBY这些命令的时候，性能提高更为明显。那该对哪些字段建立索引呢？一般说来，索引应建立在那些将用于JOIN, WHERE判断和ORDER BY排序的字段上。尽量不要对数据库中某个含有大量重复的值的字段建立索引。对于一个ENUM类型的字段来说，出现大量重复值是很有可能的情况，例如 customerinfo中的“province”… 字段，在这样的字段上建立索引将不会有什么帮助；相反，还有可能降低数据库的性能。我们在创建表的时候可以同时创建合适的索引，也可以使用ALTER TABLE或CREATE INDEX在以后创建索引。此外，MySQL从版本3.23.23开始支持全文索引和搜索。全文索引在MySQL 中是一个FULLTEXT类型索引，但仅能用于MyISAM 类型的表。对于一个大的数据库，将数据装载到一个没有FULLTEXT索引的表中，然后再使用ALTER TABLE或CREATE INDEX创建索引，将是非常快的。但如果将数据装载到一个已经有FULLTEXT索引的表中，执行过程将会非常慢。 8、优化的查询语句 绝大多数情况下，使用索引可以提高查询的速度，但如果SQL语句使用不恰当的话，索引将无法发挥它应有的作用。下面是应该注意的几个方面。首先，最好是在相同类型的字段间进行比较的操作。在MySQL 3.23版之前，这甚至是一个必须的条件。例如不能将一个建有索引的INT字段和BIGINT字段进行比较；但是作为特殊的情况，在CHAR类型的字段和 VARCHAR类型字段的字段大小相同的时候，可以将它们进行比较。其次，在建有索引的字段上尽量不要使用函数进行操作。 例如，在一个DATE类型的字段上使用YEAE()函数时，将会使索引不能发挥应有的作用。所以，下面的两个查询虽然返回的结果一样，但后者要比前者快得多。 12SELECT * FROM order WHERE YEAR(OrderDate)&lt;2001; SELECT * FROM order WHERE OrderDate&lt;&quot;2001-01-01&quot;; 同样的情形也会发生在对数值型字段进行计算的时候： 12SELECT * FROM inventory WHERE Amount/7&lt;24; SELECT * FROM inventory WHERE Amount&lt;24*7; 上面的两个查询也是返回相同的结果，但后面的查询将比前面的一个快很多。第三，在搜索字符型字段时，我们有时会使用 LIKE 关键字和通配符，这种做法虽然简单，但却也是以牺牲系统性能为代价的。例如下面的查询将会比较表中的每一条记录。 1SELECT * FROM books WHERE name like &quot;MySQL%&quot;; 但是如果换用下面的查询，返回的结果一样，但速度就要快上很多： 1SELECT * FROM books WHERE name&gt;=&quot;MySQL&quot;and name&lt;&quot;MySQM&quot;; 最后，应该注意避免在查询中让MySQL进行自动类型转换，因为转换过程也会使索引变得不起作用。","link":"/posts/e802d614.html"},{"title":"MySQL 语句举例（一）","text":"举例：有10个用户，输出在订单表中下单数最多的5个人的名字。 my_user 表数据 my_order，uid对应my_user表的id 测试数据生成 写一个存储过程，随机插入10000条数据： 123456789101112131415CREATE DEFINER=`root`@`localhost` PROCEDURE `test_loop`( ) BEGIN DECLARE i INT DEFAULT 1; WHILE i &lt; 10000 DO INSERT INTO my\\_order ( oid, uid ) VALUES ( CONCAT( 'o\\_', DATE\\_FORMAT( now( ), '%Y%m%d%h%i%s' ), FLOOR(1000 + RAND( )\\*(9999-1000) )), FLOOR( 1 + RAND( ) \\* 10 ) ); SET i = i + 1; END WHILE; END 查询语句： 12345678910111213SELECT count( o.uid ) count\\_num, u.NAME FROM my\\_user u JOIN my\\_order o ON u.id = o.uid GROUP BY o.uid HAVING COUNT( o.uid ) ORDER BY COUNT( o.uid ) DESC LIMIT 5; 查询结果： 统计所有的用户订单数，结果如下： 123456789101112SELECT count( o.uid ) count\\_num, u.NAME FROM my\\_user u JOIN my\\_order o ON u.id = o.uid GROUP BY o.uid HAVING COUNT( o.uid ) ORDER BY COUNT( o.uid ) DESC 该sql 主要考察 group by 和 having 的使用，然后 order by 和 desc 排序。 sql 的执行顺序如下： 1、FORM: 对FROM左边的表和右边的表计算笛卡尔积，产生虚表VT1。 2、ON: 对虚表VT1进行ON过滤，只有那些符合的行才会被记录在虚表VT2中。 3、JOIN： 如果指定了OUTER JOIN（比如left join、 right join），那么保留表中未匹配的行就会作为外部行添加到虚拟表VT2中，产生虚拟表VT3。 4、WHERE： 对虚拟表VT3进行WHERE条件过滤。只有符合的记录才会被插入到虚拟表VT4中。 5、GROUP BY: 根据group by子句中的列，对VT4中的记录进行分组操作，产生VT5。 6、HAVING： 对虚拟表VT5应用having过滤，只有符合的记录才会被 插入到虚拟表VT6中。 7、SELECT： 执行select操作，选择指定的列，插入到虚拟表VT7中。 8、DISTINCT： 对VT7中的记录进行去重。产生虚拟表VT8. 9、ORDER BY: 将虚拟表VT8中的记录按照进行排序操作，产生虚拟表VT9. 10、LIMIT：取出指定行的记录，产生虚拟表VT10, 并将结果返回。","link":"/posts/62cdf58c.html"},{"title":"MySQL分库分表","text":"分表是分散数据库压力的好方法。分表，最直白的意思，就是将一个表结构分为多个表，然后，可以再同一个库里，也可以放到不同的库。当然，首先要知道什么情况下，才需要分表。个人觉得单表记录条数达到百万到千万级别时就要使用分表了。 一、分库分表方式 1、纵向分表 将本来可以在同一个表的内容，人为划分为多个表。（所谓的本来，是指按照关系型数据库的第三范式要求，是应该在同一个表的。） 分表理由：根据数据的活跃度进行分离，（因为不同活跃的数据，处理方式是不同的）案例：对于一个博客系统，文章标题，作者，分类，创建时间等，是变化频率慢，查询次数多，而且最好有很好的实时性的数据，我们把它叫做冷数据。而博客的浏览量，回复数等，类似的统计信息，或者别的变化频率比较高的数据，我们把它叫做活跃数据。所以，在进行数据库结构设计的时候，就应该考虑分表，首先是纵向分表的处理。这样纵向分表后：首先存储引擎的使用不同，冷数据使用MYISAM可以有更好的查询数据。活跃数据，可以使用Innodb ,可以有更好的更新速度。其次，对冷数据进行更多的从库配置，因为更多的操作时查询，这样来加快查询速度。对热数据，可以相对有更多的主库的横向分表处理。其实，对于一些特殊的活跃数据，也可以考虑使用memcache ,redis 之类的缓存，等累计到一定量再去更新数据库。或者mongodb 一类的nosql 数据库，这里只是举例，就先不说这个。 垂直切分的长处 ◆ 数据库的拆分简单明了，拆分规则明白； ◆ 应用程序模块清晰明白，整合easy。 ◆ 数据维护方便易行，easy定位。 垂直切分的缺点 ◆ 部分表关联无法在数据库级别完毕。须要在程序中完毕。 ◆ 对于訪问极其频繁且数据量超大的表仍然存在性能平静，不一定能满足要求。 ◆ 事务处理相对更为复杂； ◆ 切分达到一定程度之后，扩展性会遇到限制； ◆ 过读切分可能会带来系统过渡复杂而难以维护。 2、横向分表 字面意思，就可以看出来，是把大的表结构，横向切割为同样结构的不同表，如，用户信息表，user_1,user_2 等。表结构是完全一样，但是，根据某些特定的规则来划分的表，如根据用户ID来取模划分。 分表理由：根据数据量的规模来划分，保证单表的容量不会太大，从而来保证单表的查询等处理能力。案例：同上面的例子，博客系统。当博客的量达到很大时候，就应该采取横向分割来降低每个单表的压力，来提升性能。例如博客的冷数据表，假如分为100个表，当同时有100万个用户在浏览时，如果是单表的话，会进行100万次请求，而现在分表后，就可能是每个表进行1万个数据的请求（因为，不可能绝对的平均，只是假设），这样压力就降低了很多很多。 水平切分的长处 ◆ 表关联基本能够在数据库端全部完毕； ◆ 不会存在某些超大型数据量和高负载的表遇到瓶颈的问题； ◆ 应用程序端总体架构修改相对较少； ◆ 事务处理相对简单； ◆ 仅仅要切分规则能够定义好。基本上较难遇到扩展性限制； 水平切分的缺点 ◆ 切分规则相对更为复杂，非常难抽象出一个能够满足整个数据库的切分规则； ◆ 后期数据的维护难度有所添加，人为手工定位数据更困难； ◆ 应用系统各模块耦合度较高，可能会对后面数据的迁移拆分造成一定的困难。 二、分表策略 1、HASH取模 假设有用户表user,将其分成4个表user0,user1,user2,user3.路由规则是对4取模,当uid=1时,对应到的是user1,uid=2时,对应的是user2. 2、范围分片 从1-10000一个表,10001-20000一个表。 3、地理位置分片 华南区一个表,华北一个表。 4、时间分片 按月分片，按季度分片等等,可以做到冷热数据。 三、分表解决办法 数据的整合非常难依靠数据库本身来达到这个效果，尽管MySQL存在Federated存储引擎，能够解决部分相似的问题。可是在实际应用场景中却非常难较好的运用。那我们该怎样来整合这些分散在各个MySQL主机上面的数据源呢？ 总的来说，存在两种解决思路： 1. 在每一个应用程序模块中配置管理自己须要的一个（或者多个）数据源。直接訪问各个数据库，在模块内完毕数据的整合； 2. 通过中间代理层来统一管理全部的数据源。后端数据库集群对前端应用程序透明； 可能90%以上的人在面对上面这两种解决思路的时候都会倾向于选择另外一种，尤其是系统不断变得庞大复杂的时候。确实。这是一个非常正确的选择，尽管短期内须要付出的成本可能会相对更大一些，可是对整个系统的扩展性来说，是非常有帮助的。所以，对于第一种解决思路我这里就不准备过多的分析，以下重点分析一下在另外一种解决思路中的一些解决方式。 1、自行开发中间代理层 在决定选择通过数据库的中间代理层来解决数据源整合的架构方向之后，有不少公司（或者企业）选择了通过自行开发符合自身应用特定场景的代理层应用程序。 通过自行开发中间代理层能够最大程度的应对自身应用的特定。最大化的定制非常多个性化需求，在面对变化的时候也能够灵活的应对。这应该说是自行开发代理层最大的优势了。当然，选择自行开发，享受让个性化定制最大化的乐趣的同一时候，自然也须要投入很多其它的成本来进行前期研发以及后期的持续升级改进工作。并且本身的技术门槛可能也比简单的Web应用要更高一些。所以，在决定选择自行开发之前，还是须要进行比較全面的评估为好。 2、利用MySQLProxy实现数据切分及整合 MySQLProxy是MySQL官方提供的一个数据库代理层产品，和MySQLServer一样，相同是一个基于GPL开源协议的开源产品。可用来监视、分析或者传输他们之间的通讯信息。他的灵活性同意你最大限度的使用它，眼下具备的功能主要有连接路由，Query分析，Query过滤和修改，负载均衡。以及主要的HA机制等。 实际上，MySQLProxy本身并不具有上述全部的这些功能。而是提供了实现上述功能的基础。 要实现这些功能，还须要通过我们自行编写LUA脚本来实现。 3、利用Amoeba实现数据切分及整合 Amoeba是一个基于Java开发的，专注于解决分布式数据库数据源整合Proxy程序的开源框架，基于GPL3开源协议。眼下，Amoeba已经具有Query路由，Query过滤，读写分离，负载均衡以及HA机制等相关内容。 Amoeba 主要解决的以下几个问题： 数据切分后复杂数据源整合； 提供数据切分规则并降低数据切分规则给数据库带来的影响。 降低数据库与client的连接数。 读写分离路由； 3、利用HiveDB实现数据切分及整合** 和前面的MySQLProxy以及Amoeba一样，HiveDB相同是一个基于Java针对MySQL数据库的提供数据切分及整合的开源框架，仅仅是眼下的HiveDB仅仅支持数据的水平切分。 主要解决大数据量下数据库的扩展性及数据的高性能訪问问题，同一时候支持数据的冗余及主要的HA机制。 HiveDB的实现机制与MySQLProxy和Amoeba有一定的差异，他并非借助MySQL的Replication功能来实现数据的冗余，而是自行实现了数据冗余机制，而其底层主要是基于HibernateShards来实现的数据切分工作。 ###4、mycat 数据整合 具体ttp://www.songwie.com/articlelist/11 四、分库分表存在的问题 1、 事务问题。 在执行分库分表之后，由于数据存储到了不同的库上，数据库事务管理出现了困难。如果依赖数据库本身的分布式事务管理功能去执行事务，将付出高昂的性能代价；如果由应用程序去协助控制，形成程序逻辑上的事务，又会造成编程方面的负担。 2、跨库跨表的join问题。 在执行了分库分表之后，难以避免会将原本逻辑关联性很强的数据划分到不同的表、不同的库上，这时，表的关联操作将受到限制，我们无法join位于不同分库的表，也无法join分表粒度不同的表，结果原本一次查询能够完成的业务，可能需要多次查询才能完成。 3、额外的数据管理负担和数据运算压力。 额外的数据管理负担，最显而易见的就是数据的定位问题和数据的增删改查的重复执行问题，这些都可以通过应用程序解决，但必然引起额外的逻辑运算，例如，对于一个记录用户成绩的用户数据表userTable，业务要求查出成绩最好的100位，在进行分表之前，只需一个order by语句就可以搞定，但是在进行分表之后，将需要n个order by语句，分别查出每一个分表的前100名用户数据，然后再对这些数据进行合并计算，才能得出结果。","link":"/posts/ad1a844d.html"},{"title":"MySQL如何做双机热备和负载均衡","text":"先简要介绍一下mysql双向热备：mysql从3.23.15版本以后提供数据库复制功能。利用该功能可以实现两个数据库同步，主从模式(A-&gt;B)，互相备份模式(A&lt;=&gt;B)的功能。 mysql数据库双向热备的操作实际说明： 1、mysql数据库同步复制功能的设置都在mysql的配置文件中体现。 在linux环境下的配置文件一般在/etc/mysql/my.cnf或者在 mysql用户的home目录下的my.cnf，笔者的my.cnf则在/etc/my.cnf；windows环境下则可到mysql安装路径下找到 my.ini。mac的mamp环境下在tmp下找。 2、配置数据同步(A-&gt;B)（以mysql版本 5.0.26为例）： 假设数据库A为主机：A机器：IP = 192.168.1.101 B机器：IP = 192.168.1.102 (1)在A机器中有数据库如下： 12345678910-- 数据库ACREATE DATABASE backup_db;USE backup_db;CREATE TABLE `backup_table` ( `id` INT ( 11 ) NOT NULL auto_increment, `name` VARCHAR ( 20 ) CHARACTER SET utf8 NOT NULL, `sex` VARCHAR ( 2 ) CHARACTER SET utf8 NOT NULL,PRIMARY KEY ( `id` )) ENGINE = INNODB DEFAULT CHARSET = latin1; A机器的my.cnf(或my.ini)中应该配置： server-id=1log-bin=c:\\mysqlback #同步事件的日志记录文件binlog-do-db=backup_db #提供数据同步服务的数据库 (2)在B机器中有数据库如下： 12345678910-- 数据库BCREATE DATABASE backup_db;USE backup_db;CREATE TABLE `backup\\_table` ( `id` INT ( 11 ) NOT NULL auto_increment, `name` VARCHAR ( 20 ) CHARACTER SET utf8 NOT NULL, `sex` VARCHAR ( 2 ) CHARACTER SET utf8 NOT NULL,PRIMARY KEY ( `id` )) ENGINE = INNODB DEFAULT CHARSET = latin1; 注：数据库A和B的数据库结构一定要相同，否则无法构成同步。 B机器的my.cnf(或my.ini)中应该配置： 1234567server-id=2 master-host=192.168.1.101 #主机A的地址 master-user=ym #主机A提供给B的用户,该用户中需要包括数据库backup_db的权限 master-password=ym #访问密码 master-port=3306 #端口，主机的MYSQL端口 master-connect-retry=60 #重试间隔60秒 replicate-do-db=backup_db #同步的数据库 (3)完成了以上配置之后，将A的mysql数据的权限给B。 A机器： 1mysql&gt;GRANT FILE ON *.* TO ym@’192.168.1.102′ IDENTIFIED BY ‘ym’; (4)重启AB数据库，后： B机器： 1mysql&gt;slave start; //查看同步配置情况 A机器： 1mysql&gt;show master status; B机器： 1mysql&gt;show slave status; (5)在A中的backup_db.backup_table表中插入一些数据，查看B中的backup_db.backup_table表是否同步了数据改动。如果没有看到同步数据结果，即同步不成功，请查看错误（如下）。 当有错误产生时*.err日志文件（可到mysql安装目录下找），同步的线程退出。当纠正错误后重复步骤(4)。 3、实现双向热备(A&lt;=&gt;B)： 将以上的(1)-(5)步骤按A-B双向配置即可。 总结一下： 主要是两边建立同样的数据库，然后在数据库配置文件里加入更新的语句即可。相互开通互有权限的用户，然后这条命令就是同步频率和同步数据库： 12master-connect-retry=60#重试间隔60秒 replicate-do-db=backup_db #同步的数据库 4、另外，可能用到的代码语句 根据不同的环境可能会用到的一些语句如下，仅供参考 分配权限给从数据库 1rant replication slave on *.* to ‘rm’@’192.168.1.102’ identified by ‘rm’; 通过 CHANGE MASTER TO 来设置从数据库 123CHANGE MASTER TO MASTER_HOST=’192.168.1.101′, MASTER_PORT=3306,MASTER_USER=’r’m’,MASTER_PASSWORD=’rm’ ,MASTER_LOG_FILE=’backup_db ‘,MASTER_LOG_POS=0;","link":"/posts/632ef9fc.html"},{"title":"MySQL存储引擎MyISAM与InnoDB的区别比较","text":"使用MySQL当然会接触到MySQL的存储引擎，在新建数据库和新建数据表的时候都会看到。 MySQL默认的存储引擎是MyISAM，其他常用的就是InnoDB了。至于到底用哪种存储引擎比较好？这个问题是没有定论的，需要根据你的需求和环境来衡量。所以对这两种引擎的概念、原理、异同和各自的优劣点有了详细的了解之后，再根据自己的情况选择起来就容易多了。 |比较类型|MyISAM|InnoDB| |–|–| |存储结构|每张表被存放在三个文件：frm - 表格定义 MYD(MYData) - 数据文件 MYI(MYIndex) - 索引文件|所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB表的大小只受限于操作系统文件的大小，一般为2GB |存储空间|MyISAM可被压缩，存储空间较小|InnoDB的表需要更多的内存和存储，它会在主内存中建立其专用的缓冲池，用于高速缓冲数据和索引 |可移植性、备份及恢复|由于MyISAM的数据是以文件的形式存储，所以在跨平台的数据转移中会很方便。在备份和恢复时可单独针对某个表进行操作|免费的方案可以是拷贝数据文件、备份 binlog，或者用 mysqldump，在数据量达到几十G的时候就相对痛苦了 |事务安全|不支持，每次查询具有原子性|支持 具有事务、回滚和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表 AUTO_INCREMENT|MyISAM表可以和其他字段一起建立联合索引|InnoDB中必须包含只有该字段的索引 SELECT|MyISAM更优 INSERT||InnoDB更优 UPDATE||InnoDB更优 DELETE||InnoDB更优 它不会重新建立表，而是一行一行的删除 COUNT without WHERE|MyISAM更优。因为MyISAM保存了表的具体行数|InnoDB没有保存表的具体行数，需要逐行扫描统计，就很慢了 COUNT with WHERE|一样|一样，InnoDB也会锁表 锁|只支持表锁|支持表锁、行锁。行锁大幅度提高了多用户并发操作的新能。但是InnoDB的行锁，只是在WHERE的主键是有效的，非主键的WHERE都会锁全表的 外键|不支持|支持 FULLTEXT全文索引|支持|5.6+支持 可以通过使用Sphinx从InnoDB中获得全文索引，会慢一点 总的来说，MyISAM和InnoDB各有优劣，各有各的使用环境。但是，InnoDB的设计目标是处理大容量数据库系统，它的CPU利用率是其它基于磁盘的关系数据库引擎所不能比的。我觉得使用InnoDB可以应对更为复杂的情况，特别是对并发的处理要比MyISAM高效。同时结合memcache也可以缓存SELECT来减少SELECT查询，从而提高整体性能。 MyISAM和InnoDB两者的应用场景： MyISAM管理非事务表。它提供高速存储和检索，以及全文搜索能力。如果应用中需要执行大量的SELECT查询，那么MyISAM是更好的选择。 InnoDB用于事务处理应用程序，具有众多特性，包括ACID事务支持。如果应用中需要执行大量的INSERT或UPDATE操作，则应该使用InnoDB，这样可以提高多用户并发操作的性能。","link":"/posts/10651370.html"},{"title":"MySQL对于千万级的大表要怎么优化","text":"第一、优化你的sql和索引； 第二、加缓存，memcached,redis； 第三、以上都做了后，还是慢，就做主从复制或主主复制，读写分离，可以在应用层做，效率高，也可以用三方工具，第三方工具推荐360的atlas,其它的要么效率不高，要么没人维护； 第四、如果以上都做了还是慢，不要想着去做切分，mysql自带分区表，先试试这个，对你的应用是透明的，无需更改代码,但是sql语句是需要针对分区表做优化的，sql条件中要带上分区条件的列，从而使查询定位到少量的分区上，否则就会扫描全部分区，另外分区表还有一些坑，在这里就不多说了； 第五、如果以上都做了，那就先做垂直拆分，其实就是根据你模块的耦合度，将一个大的系统分为多个小的系统，也就是分布式系统； 第六、才是水平切分，针对数据量大的表，这一步最麻烦，最能考验技术水平，要选择一个合理的sharding key,为了有好的查询效率，表结构也要改动，做一定的冗余，应用也要改，sql中尽量带sharding key，将数据定位到限定的表上去查，而不是扫描全部的表； mysql数据库一般都是按照这个步骤去演化的，成本也是由低到高。","link":"/posts/cb531db8.html"},{"title":"MySQL语句优化补充（一）","text":"前面已经写了一些关于优化sql语句的方法。为了更形象的在项目中使用，以现有的数据再次详细说明一些，希望对sql优化有更进一步的学习。 一、从发现问题到解决问题 以本地数据 my_order表为例，先生成119w多条记录。 根据id查询一条数据，用时0.00s 用 explain 查看详情，用到了主键索引 primary key ；查询的行数row=1； 同理，若用oid 查询一条数据,用时0.26s explain 查看一下,没用任何索引，查询的行数row=1186791 对比两条语句，差别在于where字句后的字段是否使用了索引，初步判断是因为索引的问题。先不说索引的问题。 二、先开启慢查询 123show variables like &quot;slow%&quot;; set global slow_query_log=on; 设置慢查询时间，为了更好的测试设置为0.1s，在实际项目中根据需求设置，比如设为0.5s等。 1show variables like &quot;%long%&quot;; 1set long_query_time=0.1; 再次运行 1select * from my_order where oid='o_201904060514268977'; 打开慢日志文件，可查看刚才运行的语句。 三、查看性能 1show variables like &quot;%profiling%&quot;; 1set profiling=on; 再次运行 1select * from my\\_order where oid='o_201904060514268977'; 1show profiles; 可以看到刚才语句语句运行的更具体的时间。再进一步分析： 1show profile for query 2; 通过上图可以看到详细的运行时间。其中，Sending data花费时间最长。 并且，注意：logging slow query 也花费时间，一般不要在线上开启慢查询，等需要分析的时候再启用。 四、加索引优化 增加索引， 1alter table my_order add index(oid); 并运行： 1select * from my_order where oid='o_201904060514268977'; 再分析一下： 看来加索引解决了刚才慢查询的问题。","link":"/posts/70573c79.html"},{"title":"MySQL语句优化补充（二）","text":"除了增加索引外，还有很多注意的问题。 1、不要在语句中出现计算 2、查询条件数据类型一致 为了测试把其中的一个订单id 改为 201903121704170005，看下图不同的查询： 显然oid=201903121704170005比 oid='201903121704170005’长很多,因为原来的oid 的字段类型是varchar，而不是数值型。分析一下： 类型不一致的第一条，没有走索引。 3、不要使用like左模糊查询 左模糊不走索引。 右模糊不影响索引的使用 4、select 避免使用*查询所需字段 需要什么字段就查什么字段，避免使用*。 5、查询一条语句时加上limit 1 show profiles; 但是，并不是所有的查询加上limit 1，都能提高速度，我们再试一次： 显然，前者加上limit 1 的查询时间反而比后者没加limit 1 花费更长的时间，即使差距只有0.00006s。那么在什么时候需要一条数据加上limit 1 的时候才能达到优化的效果呢？ 请看下面的例子： 通过简单的测试，当所选的记录id越靠前，使用limit 1 时，效果越明显。原因是，price 字段在没有加索引的情况下，需要进行全表扫描，加上limit 1,只要找到了对应的一条记录，就不会继续向下扫描了，效率会大大提高。 limit 1适用于查询结果为1条(也可能为0)会导致全表扫描的的SQL语句。 再看一下使用主键作为条件时，使用limit 1 从结果看来，效果不是特别明显，而时候反而加上limit 1，效率反而降低。原因是 sql 语句执行顺序为 select 查询完结果之后再进行 limit 1筛选。 所以，建议使用limit 1 最好是用在没加索引的where条件下。","link":"/posts/4041d0a1.html"},{"title":"php 中instanceof的使用","text":"作用： （1）判断一个对象是否是某个类的实例， （2）判断一个对象是否实现了某个接口。 第一种用法： 123456&lt;?php $obj = new A(); if ($obj instanceof A) { echo 'A'; } ?&gt; 第二种用法： 12345678910111213141516&lt;?php interface ExampleInterface { public function interfaceMethod(); } class ExampleClass implements ExampleInterface { public function interfaceMethod(){ return 'Hello World!'; } } $exampleInstance = new ExampleClass(); if($exampleInstance instanceof ExampleInterface){ echo 'Yes, it is'; }else{ echo 'No, it is not'; } ?&gt; 输出结果：Yes, it is","link":"/posts/9270c4ff.html"},{"title":"php优先级问题","text":"结合方向 运算符 附加信息 非结合 clone new clone 和 new 左 [ array() 非结合 ++ – 递增／递减运算符 非结合 ~ - (int) (float) (string) (array) (object) (bool) @ 类型 非结合 instanceof 类型 右结合 ! 逻辑操作符 左 * / % 算术运算符 左 + - . 算术运算符和字符串运算符 左 &lt;&lt; &gt;&gt; 位运算符 非结合 &lt; &lt;= &gt; &gt;= &lt;&gt; 比较运算符 非结合 == != === !== 比较运算符 左 &amp; 位运算符和引用 左 ^ 位运算符 左 | 位运算符 左 &amp;&amp; 逻辑运算符 左 &amp;&amp; 逻辑运算符 左 ? : 三元运算符 右 = += -= *= /= .= %= &amp;= = ^= &lt;&lt;= &gt;&gt;= 赋值运算符 左 and 逻辑运算符 左 xor 逻辑运算符 左 or 逻辑运算符 左 , 多处用到左联表示表达式从左向右求值，右联相反 举例： 1234567891011$a=1; $b=2; $c=3; if($a=4 || $b=5 &amp;&amp; $c=6){ $a++; $b++; } var_dump($a); var_dump($b); var_dump($c); 输出结果： 说明：先运算 5&amp;&amp;$c ,结果是true，再运算 4 ,结果也是true， 后面的就不再执行，最后 再赋值运算$a=true; 进入if语句体进行运算，所以结果就是$a=true,$b=3,$c=3","link":"/posts/36bca469.html"},{"title":"PHP写排序算法（一）冒泡排序","text":"冒泡排序 依次比较相邻的两个元素，每次比较完毕最大的一个字跑到本轮的末尾。 例如： 1$arr=[26,76,43,41,86,1,45,49,71,4]; 第一轮比较相邻两个元素，如果左边元素大于右边元素，则交换。 26和76比较的结果就是，26在前，76在后； 然后76和43比较的结果，43在前，76在后； 然后76和41比较的结果，41在前，76在后； 然后76和86比较的结果，76在前，86在后； 然后86和1比较的结果，1在前，86在后； 然后86和45比较的结果，45在前，86在后； 然后86和49比较的结果，49在前，86在后； 然后86和71比较的结果，71在前，86在后； 然后86和4比较的结果，4在前，86在后； 以此类推，第一轮比较之后的结果是：26，43，41，76，1，45，49，71，4，86。经过第一轮比较，最大的元素跑到了最后一个，所以第二轮比较，最后一个元素不需要进行比较了。 第三轮还是从索引0和1开始比较，最后两个不比较了。第四轮、第五轮以此类推。 123456789101112131415161718192021$arr=[26,76,43,41,86,1,45,49,71,4]; // 冒泡排序function maopao(array $arr) :array{ $len=count($arr); for ($i=0; $i &lt;$len ; $i++) { # code... for ($j=0; $j &lt;$len-$i-1; $j++) { # code... if($arr[$j]&gt;$arr[$j+1]) { # code... $t=$arr[$j]; $arr[$j]=$arr[$j+1]; $arr[$j+1]=$t; } } var_dump($arr); } return $arr; } var_dump(maopao($arr)); 每次比较结果： 时间复杂度： 从代码中可以看出一共遍历了n-1 + n-2 + … + 2 + 1 = n * (n-1) / 2 = 0.5 * n ^ 2 - 0.5 * n，那么时间复杂度是O(N^2)。 稳定性： 因为arr[j]==arr[j+1]的时候，我们可以不移动arr[j]和arr[j++]，所以冒泡排序是稳定的。","link":"/posts/792fbcf1.html"},{"title":"PHP抽象类与接口的区别","text":"一、抽象类: 1 ．抽象类是指在 class 前加了 abstract关键字且存在抽象方法（在类方法 function 关键字前加了 abstract 关键字）的类。 2 ．抽象类不能被直接实例化。抽象类中只定义（或部分实现）子类需要的方法。子类可以通过继承抽象类并通过实现抽象类中的所有抽象方法，使抽象类具体化。 3 ．如果子类需要实例化，前提是它实现了抽象类中的所有抽象方法。如果子类没有全部实现抽象类中的所有抽象方法，那么该子类也是一个抽象类，必须在 class 前面加上 abstract 关键字，并且不能被实例化。 二、接口: 1 ．抽象类提供了具体实现的标准，而接口则是纯粹的模版。接口只定义功能，而不包含实现的内容。接口用关键字 interface 来声明。 2 ． interface 是完全抽象的，只能声明方法，而且只能声明 public 的方法，不能声明 private 及 protected 的方法，不能定义方法体，也不能声明实例变量 。然而， interface 却可以声明常量变量 。但将常量变量放在 interface 中违背了其作为接口的作用而存在的宗旨，也混淆了 interface 与类的不同价值。如果的确需要，可以将其放在相应的 abstract class 或 Class 中。 3 ．任何实现接口的类都要实现接口中所定义的所有方法。 4 ．一个类可以在声明中使用 implements 关键字来实现某个接口。这么做之后，实现接口的具体过程和继承一个仅包含抽象方法的抽象类是一样的。一个类可以同时继承一个父类和实现任意多个接口。 extends 子句应该在 implements 子句之前。 PHP 只支持继承自一个父类，因此 extends 关键字后只能跟一个类名 5 ．接口不可以实现另一个接口，但可以继承多个。 实现多个接口时，接口中的方法不能有重名。 接口也可以继承，通过使用extends操作符. 类要实现接口，必须使用和接口中所定义的方法完全一致的方式。否则会导致致命错误。 三、 抽象类和接口的异同 1. 相同点： (1) 两者都是抽象类，都不能实例化。 (2) interface 实现类及 abstract class 的子类都必须要实现已经声明的抽象方法。 2. 不同点： (1) interface 需要实现，要用 implements ，而 abstract class 需要继承，要用 extends 。 (2) 一个类可以实现多个 interface ，但一个类只能继承一个 abstract class 。 (3) interface 强调特定功能的实现，而 abstract class 强调所属关系。 (4) 尽管 interface 实现类及 abstract class 的子类都必须要实现相应的抽象方法，但实现的形式不同。 interface 中的每一个方法都是抽象方法，都只是声明的 (declaration, 没有方法体 ) ，实现类必须要实现。而 abstract class 的子类可以有选择地实现。这个选择有两点含义： a) abstract class 中并非所有的方法都是抽象的，只有那些冠有 abstract 的方法才是抽象的，子类必须实现。那些没有 abstract 的方法，在 abstract class 中必须定义方法体； b) abstract class 的子类在继承它时，对非抽象方法既可以直接继承，也可以覆盖；而对抽象方法，可以选择实现，也可以留给其子类来实现，但此类必须也声明为抽象类。既是抽象类，当然也不能实例化。 (5) abstract class 是 interface 与 class 的中介。 abstract class 在 interface 及 class 中起到了承上启下的作用。一方面， abstract class 是抽象的，可以声明抽象方法，以规范子类必须实现的功能；另一方面，它又可以定义缺省的方法体，供子类直接使用或覆盖。另外，它还可以定义自己的实例变量，以供子类通过继承来使用。 (6) 接口中的抽象方法前不用也不能加 abstract 关键字，默认隐式就是抽象方法，也不能加 final 关键字来防止抽象方法的继承。而抽象类中抽象方法前则必须加上 abstract 表示显示声明为抽象方法。 (7) 接口中的抽象方法默认是 public 的，也只能是 public 的，不能用 private ， protected 修饰符修饰。而抽象类中的抽象方法则可以用 public ，protected 来修饰，但不能用 private 。 (8）接口没有构造函数,抽象类可以有 3. interface 的应用场合 (1) 类与类之间需要特定的接口进行协调，而不在乎其如何实现。 (2) 作为能够实现特定功能的标识存在，也可以是什么接口方法都没有的纯粹标识。 (3) 需要将一组类视为单一的类，而调用者只通过接口来与这组类发生联系。 (4) 需要实现特定的多项功能，而这些功能之间可能完全没有任何联系。 4. abstract class 的应用场合 一句话，在既需要统一的接口，又需要实例变量或缺省的方法的情况下，就可以使用它。最常见的有： (1) 定义了一组接口，但又不想强迫每个实现类都必须实现所有的接口。可以用 abstract class 定义一组方法体，甚至可以是空方法体，然后由子类选择自己所感兴趣的方法来覆盖。 (2) 某些场合下，只靠纯粹的接口不能满足类与类之间的协调，还必需类中表示状态的变量来区别不同的关系。 abstract 的中介作用可以很好地满足这一点。 (3) 规范了一组相互协调的方法，其中一些方法是共同的，与状态无关的，可以共享的，无需子类分别实现；而另一些方法却需要各个子类根据自己特定的状态来实现特 定的功能 。","link":"/posts/f88dcb45.html"},{"title":"PHP防SQL注入","text":"什么是SQL注入攻击 sql注入_百度百科： 所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将（恶意）的SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。 SQL注入攻击指的是通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的一些组合，通过执行SQL语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。 防范SQL注入攻击的方法： 除了一些框架自带的过滤方法外，在php开发中，常用的函数有： 1、addslashes($string):用反斜线引用字符串中的特殊字符’ &quot; \\ $username=addslashes($username); **2、htmlspecialchars($str);**此函数只转换5个字符，和号（&amp;），双引号（“），单引号（‘），小于（&lt;），大于（&gt;），转换为实体形式，输出时浏览器会自动还原的，如果有意识的转换回来使用htmlspecialchars_decode(); 3、mysql_escape_string($string)：用反斜杠转义字符串中的特殊字符，用于mysql_query()查询。 $username=mysql_escape_string($username); 4、mysql_real_escape_string($string)：转义SQL语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集，需要保证当前是连接状态才能用该函数，否则会报警告。 不转义%与_ $username=mysql_real_escape_string($username); 下面是一个封装防SQL注入函数，可参考。 mysql_escape_string(strip_tags($arr[“$val”])); /** * 函数名称：post_check() * 函数作用：对提交的编辑内容进行处理 * 参 数：$post: 要提交的内容 * 返 回 值：$post: 返回过滤后的内容 */ function post_check($post){ if(!get_magic_quotes_gpc()){// 判断magic_quotes_gpc是否为打开 $post = addslashes($post);// 进行magic_quotes_gpc没有打开的情况对提交数据的过滤 } $post = str_replace(“_”,“\\_”,$post);// 把 '_'过滤掉 $post = str_replace(“%”,“\\%”,$post);// 把 '%'过滤掉 $post = nl2br($post);// 回车转换 $post =htmlspecialchars($post);// html标记转换 return $post; } 注意：php.ini中有一个设置：magic_quotes_gpc = Off这个默认是关闭的，打开magic_quotes_gpc来防止SQL注入。 其他环境设置： 1、php.ini 中把safe_mode 打开 2、safe_mode_gid = off 3、关闭危险函数 disable_functions = chdir,chroot,dir,getcwd,opendir,readdir,scandir,fopen,unlink,delete,copy,mkdir, rmdir,rename,file,file_get_contents,fputs,fwrite,chgrp,chmod,chown 4、关闭PHP版本信息在http头中的泄漏 expose_php = Off 5、打开magic_quotes_gpc来防止SQL注入 magic_quotes_gpc = On 这个默认是关闭的，如果它打开后将自动把用户提交对sql的查询进行转换 比如把 ’ 转为 \\'等，这对防止sql注入有重大作用。 6、错误信息控制 error_reporting = E_WARNING &amp; E_ERROR 只显示警告以上 7、错误日志 建议在关闭display_errors后能够把错误信息记录下来，便于查找服务器运行的原因 log_errors = On","link":"/posts/33a07bb5.html"},{"title":"php：布尔值（boolean）数据类型判断","text":"在PHP中，将变量明确转化为boolean值是可以使用(bool) 或者 (boolean) 来进行强制转化。 以下情况将变量转化为boolean时，值会为false 布尔值 且值为false 整型值 0（零） 浮点型值 0.0（零） 空字符串 字符串 “0” 不包括任何元素的数组 特殊类型 NULL（包括尚未赋值的变量 从空标记生成的 SimpleXML 对象 变量值为字符串时，如果值为“”（即空）或0即为假，其它都为真（既使为0.00或“ ”中间有空格也是真）： “ ”，“0.00” 都为 true","link":"/posts/e1c556bb.html"},{"title":"shell 批量关闭端口","text":"在开发小程序的时候 频繁的 npm run dev 每次都会占用一个端口。 为了一起杀死这些连续的端口，特意写了一个shell脚本。 建shell文件： 12sudo vi kill_port.shsudo chmod 755 kill_port.sh shell内容： 12345678910111213141516171819202122232425!/bin/bash read -p &quot;输入 你要kill的端口号起始值(例如: 8081 8082,若只输入一个则只操作当前端口号): &quot; a b #判断变量是否输入 if [[ -z $a &amp;&amp; -z $b ]]; then echo &quot;请输入至少一个端口号&quot;; fi #如果不输入其中一个则只生效另一个 if [ -z $a ]; then a=$b; fi if [ -z $b ]; then b=$a; fi #k 计数变量 let N=0; for ((i=$a; i&lt;=$b; i ++)) do for j in lsof -i:$i | awk '{print $2}' | grep -v 'PID'; do kill -9 $j; N=expr $N + 1; echo -e &quot;\\033[37m $i port kill done! \\033[0m&quot;; done done echo -e &quot;\\033[41;37m 共关闭 $N 个端口号 \\033[0m&quot;; 操作实例： 不熟悉shell的朋友可以继续看下去，了解shell的朋友可绕过。 接下来，我详细说明一下这个shell内容： 1、起始行就不用说了 1#!/bin/bash 2、read 1read命令 -p(提示语句) -n(字符个数) -t(等待时间) -s(不回显) 3、if[[ ]] 在命令行里test expr和[ expr ]的效果相同。 test的三个基本作用是判断文件、判断字符串、判断整数。支持使用 ”与或非“ 将表达式连接起来。 test中可用的比较运算符只有==和!=，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用-eq, -gt这种形式。 无论是字符串比较还是整数比较都千万不要使用大于号小于号。当然，如果你实在想用也是可以的，对于字符串比较可以使用尖括号的转义形式， 如果比较&quot;ab&quot;和&quot;bc&quot;：[ ab &lt; bc ]，结果为真，也就是返回状态为0. [[ ]] 在shell中的一个命令，它就比test强大的多了。支持字符串的模式匹配（使用=~操作符时甚至支持shell的正则表达 式）。逻辑组合可以不使用test的-a,-o而使用&amp;&amp; 。 字符串比较时可以把右边的作为一个模式（这是右边的字符串不加双引号的情况下。如果右边的字符串加了双引号，则认为是一个文本字符串。），而不仅仅是一个字符串，比如[[ hello == hell? ]]，结果为真。 4、-z [ -z STRING ] “STRING” 的长度为零则为真。 [ -n STRING ] or [ STRING ] “STRING” 的长度为非零 non-zero则为真。 1lsof -i:$i awk '{print $2}' grep -v 'PID' 这个是linux 命令。 5、lsof -i :8082 知道8082端口被哪个进程占用 6、awk ‘{print $2}’ $2：表示第二个字段 print $2 ： 打印第二个字段 grep 是查找含有指定文本行的意思，比如grep cpu 就是查找含有cpu的文本的行 grep -v 是反向查找的意思，比如 grep -v ‘PID’ 就是查找不含有 PID 字段的行 整个命令的意思就是：从查找的端口返回的内容中，找到每行的第二个字段，那就是 PID 和4218，再通过反向查找，去掉 PID，那就只剩下4218了。赋值给j 7、kill -15 $j;kill -9 $j kill - 9 表示强制杀死该进程；而 kill 则有局限性，例如后台进程，守护进程等； 1) 关闭socket链接 2) 清理临时文件 3) 将自己将要被销毁的消息通知给子进程 4) 重置自己的终止状态 再说一下： SIGNKILL（9） 和 SIGNTERM（15） 的区别在于： SIGNKILL（9） 的效果是立即杀死进程. 该信号不能被阻塞, 处理和忽略。 SIGNTERM（15） 的效果是正常退出进程，退出前可以被阻塞或回调处理。并且它是Linux缺省的程序中断信号。 建议做法：先使用kill -15，然后再使用kill -9 8、expr 'expr’支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。 expr 对表达式的格式有几点特殊的要求： 出现在表达式中的运算符、数字、变量和小括号的左右两边至少要有一个空格，否则会报错。 有些特殊符号必须用反斜杠\\进行转义（屏蔽其特殊含义），比如乘号*和小括号()，如果不用\\转义，那么 Shell 会把它们误解为正则表达式中的符号（*对应通配符，()对应分组）。 使用变量时要加$前缀。 9、echo -e -e：激活转义字符。使用-e选项时，若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出： •\\a 发出警告声； •\\b 删除前一个字符； •\\c 最后不加上换行符号； •\\f 换行但光标仍旧停留在原来的位置； •\\n 换行且光标移至行首； •\\r 光标移至行首，但不换行； •\\t 插入tab； •\\v 与\\f相同； •\\ 插入\\字符； •\\nnn 插入nnn（八进制）所代表的ASCII字符； 格式: echo -e “\\033[字背景颜色;字体颜色m字符串\\033[0m” 例如：echo -e “\\033[37m $i port kill done! \\033[0m”; 其中37代表字的颜色。 白色 例如：echo -e “\\033[41;37m 共关闭 $N 个端口号 \\033[0m”; 其中41的位置代表底色, 37的位置是代表字的颜色。 41 红色。 字背景颜色范围:40----49 40:黑 41:深红 42:绿 43:黄色 44:蓝色 45:紫色 46:深绿 47:白色 字颜色:30-----------39 30:黑 31:红 32:绿 33:黄 34:蓝色 35:紫色 36:深绿 37:白色","link":"/posts/b26d3dc0.html"},{"title":"WebSocket与HTTP","text":"一、相同点 都是一样基于TCP的，都是可靠性传输协议。 都是应用层协议。 二、不同点 WebSocket是双向通信协议，模拟Socket协议，可以双向发送或接受信息。HTTP是单向的。http链接分为短链接，长链接，短链接是每次请求都要三次握手才能发送自己的信息。 WebSocket是需要浏览器和服务器握手进行建立连接的。而http是浏览器发起向服务器的连接，服务器预先并不知道这个连接。 三、联系 WebSocket在建立握手时，数据是通过HTTP传输的。但是建立之后，在真正传输时候是不需要HTTP协议的。","link":"/posts/71b69db6.html"},{"title":"二年级的同桌","text":"那些被我借过的白色橡皮，被我借过的黑色铅笔，还有小刀和笔记，是否还在你的铅笔盒里，不知你是否还能记起？ 殊不知那天是因为你来的突然，还是因为我没有准备在先，就是那么不太习惯也变习惯的我们坐在了同一张高高的课桌前，自此成了同桌，成了彼此的学习上的伙伴，也就那一年，那一次。 那是一个不知道是星期几的下午，那天的天气倒是很好，阳光甚暖。我和班上的同学都在教室里聚精会神地听着语文老师讲新课，忽闻外面熙熙攘攘，透过南边前窗，看见一群新的同学站在教室外面的走廊里，正在听候着代领老师的一番安排。新的同学是邻村的，她的村子在我们村的西面，走路要有小半个钟头。每到二年级，邻村的学生都会并入我们学校的班级，进行统一的编排学习，那时候的小学需要合校合班，因为那时师资不充足，另外每个村的学生也不是很多，最多加起来也就四十有余。 你留给我的第一印象是：笑容可掬，声音甜美，举止文雅。记得你一直穿着这件普通的衣服：一件以深红色为底，很多小花浮在上面作为装扮的外衣，一条棕色条纹式的裤子，一双家里自做带袢带的布鞋。上学和放学时带着一个暗红色的布包，里面盛放着你的文具，书本和作业。 “你叫什么名字？”我和前排的同学很调皮地问你，那时的你只笑不说，并且不让我们看你的书本上的名字。年龄小嘛，都难免会在陌生同学面前会有那么一丝羞涩和拘谨。而调皮的前桌，在趁你不注意的时候，偷偷拿着你的练习本开始翻找着，而你因害羞红着脸也试图去抢。不过最后调皮的我们还是知道了。嗯，你的名字好听的很哩。 在二年级，我们学习的只有两门主课：语文和数学。上数学课，我们学的是简单的两位加减运算，算着简单的应用题；上语文课，我们读着简短的课文，学着新的汉字，背着简单的古诗。有这么一首不知你还记不记得的诗：是山水田园派诗人孟浩然写的《春晓》，“春眠不觉晓，处处闻啼鸟。夜来风雨声，花落知多少。” “眠”、“晓 ”、“闻”、“落”是该诗中要学习的几个新汉字。语文课学习汉字通常是通过抄写、默写、听写来达到学习巩固的目的，由于初学对汉字的辨别和结构认识还不足，弄出了很多错别字，不知你是否还记得，同学们怎么写的“眠”、“晓”，不知你还是否记得你第一次写的那个“落”字？ “落”字，上下结构，还是左右结构？其实现在都不那么重要，不过那时候你努力学习的样子，你那惹人可爱的样子，都已近封存在这记忆宝盒里，随时打开都觉得格外惊喜。 知道你的小名，还是我们小学老班长告诉我们的。之所以他知道，还不是因为老班长的姥姥家就是你们村庄的，难免再厚的墙也是透风的啊。 你小名也是好听的很哩。 你学成绩优异，不是因为比我学的好，但确实你比我学的好的多。你还有一个学习很好的姐姐，在小学，只要是知道你姐的老师，都会夸上一番，也给我们同学树立了一个好好学习的榜样。说起学习，我便从二年级开始落寞，落寞的时间还很久很久，这不，落寞到了现在。当我读过相关书籍后才渐渐找到这其中的一些原因。 “铃铃铃”，放学后，你便和你们村里的同学一起步行回家或者特殊情况家长骑车来接。第二天在赶来上课。我们村的便一哄而散，各奔各家。 那时候，我们都很单纯，单纯的像一张白纸，单纯的笑着遮羞，单纯的嬉笑追打，单纯的只有友谊，单纯的只听妈妈的话。 那时候，我们都很快乐，快乐的像一只小鸟，放学就往家里跑，快乐的嘻嘻笑笑，快乐的互相攀比学习，快乐的不知如何描述才好。 那时候，我们都很顽皮，顽皮的像一只小猴儿，顽皮的惹人大笑，顽皮的没天没地，顽皮的挨着爸妈的打。 那时候，也只有在那个时候。 和你在同一所学校上学有八年，三个学校。与你在同一班级有便有五年，算是我的一种荣幸。五六年的光阴，一眨眼，不久。 在这求学路上，彼此说着、笑着、哭着、累着，回头间，到现在距我们小学二年级第一次相见已有小二十个年头了，二十年，二十个春秋，二十个冬夏，二十个生日的播放。二十年，你还是比我大四天，至今一直还没能追赶的上。二十年，你还是你，我还是我。不同的是，现在你已经有了属于自己的幸福。在此，深深的祝福。 我们的故事还有很多很多，我怕眼角的泪珠不听话，我怕岁月太吃墨，此生再也买不起这手中的墨笔，我怕容颜到老，还有说不完的话。你听耳边响起了《同桌的你》，“明天你是否会想起，昨天你写的日记，明天你是否还惦记，曾经最爱哭的你，老师们都已想不起，猜不出问题的你，……” 我们的故事，就化成了故事。 初次相见之时，是那年的那天，是1998年的某月的某一天 彼此安好，情谊到老。 仅此献给童年的我们 献给可爱的你","link":"/posts/296757da.html"},{"title":"使用ext_skel，实现一个PHP扩展","text":"一、写在前面 本文是以PHP7.4 作为基础，讲解如何从零开始创建一个PHP扩展。本文主要讲解创建一个扩展的基本步骤都有哪些。示例中，我们将实现如下功能： 12345&lt;?phpecho hello();?&gt; 输出内容： 123$ php74 ./hello.php$ hello word 在扩展中实现一个hello 方法，调用hello 方法后，输出 hello word!。 二、生成代码 PHP为我们提供了生成基本代码的工具 ext_skel.php 。这个工具在PHP源代码的php-对应版本/ext/目录下。 输入命令 php ext_skel.php --ext_skel.php --ext hello --author sunct --std会出现以下效果： 12345678910111213141516171819$ php ext_skel.php ext_skel.php --ext hello --author sunct --stdCopying config scripts... doneCopying sources... doneCopying tests... doneSuccess. The extension is now ready to be compiled. To do so, use thefollowing steps:cd /path/to/php-src/hellophpize./configuremakeDon't forget to run tests once the compilation is done:make testThank you for using PHP! 如果不加参数--ext ,直接运行php ext_skel.php 则报Error错误。 1234$ php ext_skel.php Error: No extension name passed, use &quot;--ext &lt;name&gt;&quot; 在 ext目录下便生成 hello目录。 PHP 扩展由几个文件组成，这些文件对所有扩展来说都是通用的。不同扩展之间，这些文件的很多细节是相似的，只是要费力去复制每个文件的内容。幸运的是，有脚本可以做所有的初始化工作，名为 ext_skel，自 PHP 4.0 起与其一起分发。 以下是源包中的json 文件内容。 可选参数： 12345678910111213141516171819OPTIONS php ext_skel.php --ext &lt;name&gt; [--experimental] [--author &lt;name&gt;] [--dir &lt;path&gt;] [--std] [--onlyunix] [--onlywindows] [--help] --ext &lt;name&gt; The name of the extension defined as &lt;name&gt; //扩展名定义为 &lt;name&gt; --experimental Passed if this extension is experimental, this creates the EXPERIMENTAL file in the root of the extension //如果此扩展名是实验性的，则通过扩展程序根目录中的EXPERIMENTAL文件 --author &lt;name&gt; Your name, this is used if --std is passed and for the CREDITS file //您的名字，如果传递了--std，则CREDITS文件使用此名称 --dir &lt;path&gt; Path to the directory for where extension should be created. Defaults to the directory of where this script lives --std If passed, the standard header used in extensions that is included in the core, will be used --onlyunix Only generate configure scripts for Unix --onlywindows Only generate configure scripts for Windows --help This help 通常来说，开发一个新扩展时，仅需关注的参数是 --ext name 和 --help。除非已经熟悉扩展的结构; 指定此参数会造成 ext_skel 不会在生成的文件里省略很多有用的注释。 剩下的 --ext name 会将扩展的名称传给 ext_skel。“name” 是一个全为小写字母的标识符，仅包含字母和下划线，在 PHP 发行包的 ext/ 文件夹下是唯一的。 三、修改config.m4配置文件 扩展的 config.m4 文件告诉 UNIX 构建系统哪些扩展 configure 选项是支持的，你需要哪些扩展库，以及哪些源文件要编译成它的一部分。对所有经常使用的 autoconf 宏，包括 PHP 特定的及 autoconf 内建的。 config.m4的作用就是配合phpize工具生成configure文件。configure文件是用于环境检测的。检测扩展编译运行所需的环境是否满足。现在我们开始修改config.m4文件。 其中，dnl 是注释符号。 上面的代码说，如果你所编写的扩展如果依赖其它的扩展或者lib库，需要去掉PHP_ARG_WITH相关代码的注释。否则，去掉 PHP_ARG_ENABLE 相关代码段的注释。我们编写的扩展不需要依赖其他的扩展和lib库。因此，我们去掉PHP_ARG_ENABLE前面的注释。 上图生成的时候就已经指定是不依赖其他的扩展。 四、代码实现 修改hello.c文件。实现hello方法。 在执行 php ext_skel.php --ext hello 时，hello.c文件已经给我们生成了两个test方法：hello_test1和hello_test2。 文件生成代码： 123456789101112131415161718192021222324252627/* {{{ void hello_test1() */PHP_FUNCTION(hello_test1){ ZEND_PARSE_PARAMETERS_NONE(); php_printf(&quot;The extension %s is loaded and working!\\r\\n&quot;, &quot;hello&quot;);}/* }}} *//* {{{ string hello_test2( [ string $var ] ) */PHP_FUNCTION(hello_test2){ char *var = &quot;World&quot;; size_t var_len = sizeof(&quot;World&quot;) - 1; zend_string *retval; ZEND_PARSE_PARAMETERS_START(0, 1) Z_PARAM_OPTIONAL Z_PARAM_STRING(var, var_len) ZEND_PARSE_PARAMETERS_END(); retval = strpprintf(0, &quot;Hello %s&quot;, var); RETURN_STR(retval);} 其中： 执行函数hello_test1() 会输出The extension hello is loaded and working!，不可传参，否则echo hello_test1('这是一个参数');报Warning错误：PHP Warning: hello_test1() expects exactly 0 parameters, 1 given in /Users/sunct/code/php/hello.php on line 2； 执行函数hello_test2() 会输出Hello World，并且该函数可传参hello_test2('这是一个参数')，输出：Hello 这是一个参数 我们可以仿照写一个 hello 函数，放到函数PHP_FUNCTION(hello_test2)后面： 12345678/*新增函数*/PHP_FUNCTION(hello){ zend_string *strg; strg = strpprintf(0, &quot;hello word&quot;); RETURN_STR(strg);} 用来输出 hello word 找到 PHP_FE_END 在上面增加如下代码： 1PHP_FE(hello, NULL) 如图所示： 五、编译安装 1234cd hello/phpize./configure make 其中： ./configure根据自己环境的情况加参数即可。 为了便于测试我使用：`./configure --prefix=/usr/local/php7 --without-iconv --with-apxs2 --enable-fpm --with-config-file-path=/usr/local/php7/etc; 修改php.ini文件，增加如下代码： 1extension = say.so 执行： 1php -m 如果没有出现hello，在使用当前PHP时，会出现以下Warning错误： 1PHP Warning: PHP Startup: Unable to load dynamic library 'hello.so' (tried: /usr/local/php7/lib/php/extensions/no-debug-non-zts-20190902/hello.so (dlopen(/usr/local/php7/lib/php/extensions/no-debug-non-zts-20190902/hello.so, 9): image not found), /usr/local/php7/lib/php/extensions/no-debug-non-zts-20190902/hello.so.so (dlopen(/usr/local/php7/lib/php/extensions/no-debug-non-zts-20190902/hello.so.so, 9): image not found)) in Unknown on line 0 这说明/usr/local/php7/lib/php/extensions/no-debug-non-zts-20190902/hello.so 文件不存在，我们可以手动把生成的hello.so移到这里。 在我们开始编译开始执行后·，hello 文件夹下生成modules文件夹，里面就已生成hello.so 移到文件： 1sudo cp ~/code/php/php-7.4.13/ext/hello/modules/hello.so /usr/local/php7/lib/php/extensions/no-debug-non-zts-20190902/hello.so 查看phpinfo(): 六、调用测试 写一个PHP文件，调用hello方法。看输出的内容是否符合预期。 结果如下： 12345&lt;?php echo &quot;\\r\\n执行 hello() ----:&quot;.hello();echo &quot;\\r\\n执行 hello_test2() ----:&quot;.hello_test2();echo &quot;\\r\\n执行 hello_test2('这是一个参数') ----:&quot;.hello_test2('这是一个参数');echo &quot;\\r\\n执行 hello_test1() ----:&quot;.hello_test1(); 七、※ 剖析文件 1、config.m4 UNIX构建系统配置 2、config.w32 Windows构建系统配置 3、php_hello.h 当将扩展作为静态模块构建到PHP二进制文件中时，构建系统将期望php_ 在扩展名之前添加一个头文件，该头文件包括一个指向扩展模块结构的指针的声明。就像任何标头一样，此文件通常包含其他宏，原型和全局变量。 4、hello.c 主扩展源文件。按照惯例，该文件的名称是扩展名，但这不是必需的。该文件包含模块结构声明、INI条目、管理函数、用户空间函数和扩展的其他要求。 PHP扩展的主要源文件包含C程序的一些结构。其中最重要的是zend_module结构，这是开始写一个新扩展时最先接触的。该结构包含大量信息，这些信息告诉Zend Engine扩展的依赖项，版本，回调和其他关键数据。 123456789101112131415/* {{{ hello_module_entry */zend_module_entry hello_module_entry = { STANDARD_MODULE_HEADER, &quot;hello&quot;, /* Extension name */ hello_functions, /* zend_function_entry */ NULL, /* PHP_MINIT - Module initialization */ NULL, /* PHP_MSHUTDOWN - Module shutdown */ PHP_RINIT(hello), /* PHP_RINIT - Request initialization */ NULL, /* PHP_RSHUTDOWN - Request shutdown */ PHP_MINFO(hello), /* PHP_MINFO - Module info */ PHP_HELLO_VERSION, /* Version */ STANDARD_MODULE_PROPERTIES};/* }}} */ 模块结构字段值 Field（字段）Value（值）Description（描述） size [1][2][3]sizeof(zend_module_entry)结构的字节大小。 zend_api [1][2][3]ZEND_MODULE_API_NO此模块针对的Zend API版本。 zend_debug [1][2][3]ZEND_DEBUG指示模块是否在调试打开的情况下进行编译的标志。 zts [1][2][3]USING_ZTS指示模块是否在启用ZTS（TSRM）的情况下进行编译的标志（请参阅内存管理）。 ini_entry [1][3]nullZend在内部使用此指针来保持对模块声明的任何INI条目的非本地引用。 deps[3]null指向模块依赖关系列表的指针。 name\"mymodule\"模块的名称。这是简称，例如\"spl\"或\"standard\"。 functionsmymodule_functions指向模块功能表的指针，Zend使用该指针将模块中的功能公开给用户空间。 module_startup_funcPHP_MINIT(mymodule)Zend将在模块第一次加载到PHP的特定实例时调用的一个回调函数。 module_shutdown_funcPHP_MSHUTDOWN(mymodule)通常在最终关闭期间的一个回调函数，当模块从特定PHP实例卸载时，Zend将调用该函数。 request_startup_funcPHP_RINIT(mymodule)Zend将在每个请求开始时调用一个回调函数。这个函数应该尽可能的短或者为空，因为调用这个函数对每个请求都有代价。 request_shutdown_funcPHP_RSHUTDOWN(mymodule)Zend将在每个请求结束时调用的个回调函数。这个函数应该尽可能的短或者为空，因为调用这个函数对每个请求都有代价。| info_funcPHP_MINFO(mymodule)Zend将在调用`phpinfo()`函数时调用的回调函数。 versionNO_VERSION_YET给出模块版本的字符串，由模块开发人员指定。建议版本号采用`version_compare()`期望的格式（例如\"1.0.5-dev\"）或CVS或SVN修订号（例如\"$Rev: 322138 $\"）。 globals_size [1][4][5][6]sizeof(zend_mymodule_globals)包含模块全局变量的数据结构的大小（如果有）。 globals_id_ptr [1][4][5][6][7]＆mymodule_globals_id这两个字段中只有一个字段存在，具体取决于USING_ZTS常量是否为真。前者是TSRM分配表中模块全局变量的索引，后者是直接指向全局变量的指针。 globals_ptr [1][4][5][6][8]&mymodule_globals_id globals_ctor [4][5][6]PHP_GINIT(mymodule)调用这个函数是为了在 `module_startup_func`之前初始化模块的全局变量。 globals_dtor [4][5][6]PHP_GSHUTDOWN(mymodule)这个函数被调用是为了在`module_shutdown_func`之后释放模块的全局变量。 post_deactivate_func [4]ZEND_MODULE_POST_ZEND_DEACTIVATE_N(mymodule)这个函数在请求关闭后由Zend调用。很少被使用。 module_started [1][9][4]0这些字段用于Zend的内部跟踪信息。 type [1][9][4]0 handle [1][9][4]null module_number [1][9][4]0 下一节：PHP的目录结构、设计理念以及核心架构1.此字段不适用于模块开发人员。 ↩2.该字段由STANDARD_MODULE_HEADER_EX填充。 ↩3.该字段由STANDARD_MODULE_HEADER填充。 ↩4.该字段由STANDARD_MODULE_PROPERTIES填充。 ↩5.该字段由NO_MODULE_GLOBALS填充。 ↩6.该字段由PHP_MODULE_GLOBALS填充。 ↩7.仅当USING_ZTS是时，此字段存在true。 ↩8.仅当USING_ZTS是时，此字段存在false。 ↩9.该字段由STANDARD_MODULE_PROPERTIES_EX填充。 ↩","link":"/posts/d42c7b69.html"},{"title":"使用mpvue重构个人小程序（七）使用自定义模板","text":"上一节：使用mpvue重构个人小程序（六）封装组件配置 一、模板文件 把自己的模板统一放在src/components目录下： 二、调用模板 1import Sinfo from '@/components/sinfo' 把模板配置到组成部分components 名字和import 时的名字一致 123components: { Sinfo }, 使用组件 如果不使用会报错误 页面代码中调用模板 说明：模板标签不区分大小写 可以使用 sinfo 也可以使用 Sinfo 根据个人使用习惯和增加区分度，定义使用大写字母开头的标签。如图： 其中 ： :timeDate=“timeDate” 是定义传给模板的参数。 ref=“sinfo” 是模板回调使用。 和调用时使用的名字一致即可。 回调是当前文件调用模板里的方法（函数）使用。 1this.$refs.sinfo.getTodaySinfo(time, 1) 模板函数： 如果名称不一致，则报 undefined 错误 当我点选日历日期时，就可以调取模板中的方法，加载新的数据。 三、参数传递 为了测试，写死数据为 1111 接收参数： 12345678// 增加一个可从外部传入的属性 props: { timeDate: { type: String, default: [] } }, 小程序开发工具编译一下，在调试器中打印： 如何使用传递的参数默认加载模板数据呢？ 在模板中，使用 mounted 或 onLoad 方法,调用自定义的函数。 为了更好的体现出 传递参数的作用，修改了一下 getTodaySinfo( )，在 mounted 调用时就可以不用传递参数，没有参数默认是 timeDate 的值。 下一节：使用mpvue重构个人小程序（八）使用全局变量","link":"/posts/f5d98e9f.html"},{"title":"使用mpvue重构个人小程序（一）安装","text":"mpvue安装 全局安装 vue-cli 1$ npm install --global vue-cli 创建一个基于 mpvue-quickstart 模板的新项目 1$ vue init mpvue/mpvue-quickstart my-project 安装依赖 12$ cd my-project$ npm install 启动构建 1$ npm run dev 我的微信小程序项目都在WeChatProjects目录下，根据提示输入相对应的内容。如下图： 根据上图的提示，cd 到项目目录下，cd WeChatProjects/my-project，执行安装 接下来，你只需要启动微信开发者工具，引入项目即可预览到你的第一个 mpvue 小程序 使用mpvue重构个人小程序（二）文件结构","link":"/posts/3d00f2cc.html"},{"title":"使用mpvue重构个人小程序（三）使用Vue的语法编写","text":"上一节：使用mpvue重构个人小程序（二）文件结构 我们将要对vue-cli生成的代码做一个清理工作，具体如下： 删掉src/components、src/pages、src/utils三个目录下的所有代码文件 提前说一下，微信开发者工具不支持打开vue文件，因为微信开发者工具只是一个用户代理(即显示网站用)，类似Google浏览器一样。所以编写的时候一般会选择一款编辑器，可以使用Sublime、webstorm、vs等。 一、重置 将src/App.vue文件中的内容重置： 原来的文件： 重置成： 123456&lt;script&gt;export default {}&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 将src/main.js文件中添加内容; 1234567891011export default { config: { pages: [], window: { backgroundTextStyle: 'light', navigationBarBackgroundColor: '#fff', navigationBarTitleText: '第一个小程序', navigationBarTextStyle: 'black' } }} 二、app.json app.json是小程序的全局配置文件，其包含了小程序的页面文件路径配置、窗口的全局样式信息、底部选项卡式菜单栏的配置，以及一些小程序网络超时的配置等等。 在src/main.js中，我们就可以完整的进行这些信息的配置，具体可以查看上图文件刚添加的最底部代码。在该代码中通过export default导出的对象的config属性下的值，就是这些小程序的配置信息了。 三、首页 每个小程序都需要至少有一个页面，第一个展示的页面被叫做首页。因为前面已经把所有的页面代码都删完了，所以我们现在要新建一个首页。在src/pages目录下，我们新建一个名为index的子目录（请遵循每个页面放入一个子目录的良好习惯），然后在该子目录下，新建2个文件：一个用于实现页面主体功能的index.vue组件，另一个则用于将这个页面组件生成Vue实例并加载的main.js。以后的每一个mpvue页面组件都会拥有这样的结构。 没有首页会在命令行中报错，如： 然后在main.js中编写如下代码，的功能是引入index.vue并创建Vue实例： 12345import Vue from 'vue'import App from './index'const app = new Vue(App)app.$mount() 当然你也可以像在src/main.js中去导出一个页面级别的配置，因为小程序的每个页面都可以有一些单独的配置： 123456789101112import Vue from 'vue'import App from './index'const app = new Vue(App)app.$mount()export default { config: { // 注意，页面级可配置属性相当于只是`src/main.js`中配置里的`window`部分 &quot;navigationBarTitleText&quot;: &quot;首页&quot; }} 接着，我们需要实现index.vue页面组件，它的写法是最典型的Vue组件写法。 当我们写到此时，在开发工具中编译运行，结果还不是我们想要的： 改了这么多，为啥还和最初的一样？原因是 我们还没有编译，这个编译不是小程序开发工具里的编译。我们最初运行了 npm run dev ，在dist 文件已编译。 先清空/wx/该目录，再运行： 1npm run dev 当我们实现了这个index.vue页面组件后，其实还缺最后一个步骤，就是需要将这个页面组件指定为首页。如果我们的小程序只有一个页面的话，其实也可以省略这一步，因为mpvue会自动将src/pages目录下的页面组件路径添加到最终编译出来的小程序配置文件中去（可以打开dist/app.json文件观察一下）： 和 src/app.json 点击 界面中的hello，变成了 Clicked，效果如下： 下一节：使用mpvue重构个人小程序（四）全局配置","link":"/posts/e2f0bd0d.html"},{"title":"使用mpvue重构个人小程序（二）文件结构","text":"上一节：使用mpvue重构个人小程序（一）安装 package.json文件 package.json是项目的主配置文件，里面包含了mpvue项目的基本描述信息、项目所依赖的各种第三方库以及版本信息、以及可执行的脚本信息。 我们看到该文件中的scripts部分配置了4个可执行的命令： 1234&quot;dev&quot;: &quot;node build/dev-server.js&quot;,&quot;start&quot;: &quot;node build/dev-server.js&quot;,&quot;build&quot;: &quot;node build/build.js&quot;,&quot;lint&quot;: &quot;eslint --ext .js,.vue src&quot; dev和start是两个等价的命令，执行其中之一都可以将项目以开发模式启动。执行方式是： 12npm startnpm run dev lint指令是使用ESLint来进行代码语法和格式检查，以及修复一些可自动修复的问题。执行方式是： 12npm run lint #检查语法和格式npm run lint -- --fix #检查代码语法和格式，并修复可自动修复的问题 build指令是用于生成发布用代码的，它会对代码进行一些压缩优化处理。当小程序开发完成后，将要提交审核时，请使用build来生成发布的代码。 project.config.json文件 project.config.json文件是用于管理微信开发者工具的小程序项目的配置文件，其中记录了小程序的appid、代码主目录、以及编译选项等等信息，在微信开发者工具中导入小程序项目的时候主要是通过该配置文件读取和写入配置信息。 static目录 static目录可以用于存放各种小程序本地静态资源，如图片、文本文件等。代码中可通过相对路径或绝对路径进行访问。 build目录 build目录下是一些用于项目编译打包的node.js脚本和webpack配置文件。一般情况下不需要修改。 config目录 config目录下包含了用于开发和生产环境下的不同配置，dev.env.js用于开发环境，prod.env.js用于生产环境，可以将开发阶段和生产阶段不一样的信息（如后台API的url地址等）配置到这两个文件中去，然后在代码中以变量的形式进行引用。 在编写请求后端API的代码时，你就可以使用这个环境配置： 1234const baseURL = process.env.API_BASE_URLwx.request({ url: `${baseURL}/about`}) 这样一来，可以清楚的区分开发阶段和上线发布阶段的环境。 src目录 src目录是我们主要进行小程序功能编写的地方。默认生成的demo代码为我们创建了几个子目录：components、pages和utils，还有2个文件：App.vue和main.js。其实它们都不是必须的，可以按照自己的风格进行定义和配置。不过默认创建的这个结构基本上是一个约定俗成的结构了，比较易于理解，所以我们可以遵循这个结构进行开发。 components：在实际开发中，我们可以尽量将界面上可复用的部分，提取成vue组件放入该目录 pages：存放小程序的页面。请遵循每个小程序页面放入一个单独子目录的组织形式 utils：可选（可删）。可以将代码中一些公用工具函数组织成模块放入该目录下 可新建其他目录，存放你希望组织起来的代码。比如公用的业务逻辑代码、请求后台API的代码等等 main.js + App.vue：这两个是入口文件，相当于原生小程序框架中的app.json和app.js的复合体。 下一节：使用mpvue重构个人小程序（三）使用Vue的语法编写","link":"/posts/fa757708.html"},{"title":"使用mpvue重构个人小程序（九）下拉刷新","text":"上一节：使用mpvue重构个人小程序（八）使用全局变量 前面有几节已经提到过下拉刷新，本节，再详细的归结一下。 一、配置 1、全局配置 1&quot;enablePullDownRefresh&quot;: true, 2、单独页面局部配置 没有main.json 自己新建一个即可。 二、使用 和methods 平级使用 12345678onPullDownRefresh () { // to doing.. console.log('shuaxin') // 停止下拉刷新 wx.stopPullDownRefresh() …… 模板中使用也是如此： 重新编译，下拉刷新一下，结果： 执行顺序，当前页面 -&gt; 模板页面。 我们用模板sinfo.vue来测试下拉加载。 123456789101112131415onPullDownRefresh () {console.log(‘下拉刷新1’)let that = this** wx.showNavigationBarLoading() // 在标题栏中显示加载// 模拟加载setTimeout(function** () {// completethat.getTodaySinfo()wx.hideNavigationBarLoading() // 完成停止加载wx.stopPullDownRefresh() // 停止下拉刷新}, 1500)},…… 先去写留言，再返回首页，下拉加载。 返点左上角返回是不会更新的： 下拉一下： 下拉松手 完美！ 下一节：使用mpvue重构个人小程序（十）页面跳转传参","link":"/posts/4390feb9.html"},{"title":"使用mpvue重构个人小程序（五）插件配置mpvue-calendar","text":"上一节：使用mpvue重构个人小程序（四）全局配置 一、 插件下载 根据项目需求，先加载日历组件，为了不重复造轮子，直接安装。 1npm i mpvue-calendar 或者 1yarn add mpvue-calendar 下载完成，在需要的页面进行插件引用 二、插件引用 1import Calendar from 'mpvue-calendar' 添加为组件 12345678components: { Calendar },//其他代码... ... 具体的可参照文档，不在此一一说明，文档地址：https://www.npmjs.com/package/mpvue-calendar 三、样式修改 当你引用完但是界面并不是源文档所说的那样，那么还需要进一步引用样式： 在src/main.js中配置即可。 1import 'mpvue-calendar/src/style.css' 插件原始样式： 如果自己想修改样式，可以在自己文件中写style，设定为最高级 !importent 我现在使用的情况为： 下一节：使用mpvue重构个人小程序（六）封装组件配置","link":"/posts/afd9c236.html"},{"title":"使用mpvue重构个人小程序（八）使用全局变量","text":"上一节：使用mpvue重构个人小程序（七）使用自定义模板 在开发的过程中，用到全局变量的问题，搜了很多，方法五花八门，有的推荐使用vuex ，如果你想折腾一番可以自己尝试的使用。 下面，我用的是最原始的方式来介绍一下全局变量的使用方法。 首先，在配置文件src/mian.js 中进行开启和全局配置。 我的配置文件内容： 12345678910111213141516import Vue from ‘vue’import App from ‘./App’import ‘mpvue-calendar/src/style.css’Vue.config.productionTip = *false*App.mpType = ‘app’const app = new Vue(App)app.$mount()getApp().globalData = {uid: ‘123456’}Vue.prototype.globalData = getApp().globalDataapp.$mount() getApp().globalData = {uid: '123456'} Vue.prototype.globalData = getApp().globalData 放到 app.$mount() 后面。 为了直观的配置，先给getApp().globalData 赋值。再给Vue.prototype.globalData，当然，你也可以直接赋值给Vue.prototype.globalData。效果一样。 调用全局变量 使用 this.globalData.uid 调用即可。小程序重新编译： 执行过程 改变全局变量的值： 在写留言界面 改变值：this.globalData.test = ‘我已经改变了全局变量测试值’ 返回首页下拉刷新： 改变成功！ 下一节：使用mpvue重构个人小程序（九）下拉刷新","link":"/posts/8eb20e20.html"},{"title":"使用mpvue重构个人小程序（六）封装组件配置","text":"上一节：使用mpvue重构个人小程序（五）插件配置mpvue-calendar 一、自定义组件文件目录 在utils中书写自己的公共方法 名字自己起，其中我的api.js文件中主要放的是和接口相关的文件： 我的index.js里放的是常用函数： 暴露给外部调用方法（函数）： 二、文件调用 和调用插件方法一样，写相对路径即可。 1import util from '../../utils/index.js' 使用方法 1let today = util.formatDate(new Date()) 下一节：使用mpvue重构个人小程序（七）使用自定义模板","link":"/posts/fdc1a9c5.html"},{"title":"使用mpvue重构个人小程序（十）页面跳转传参","text":"上一节：使用mpvue重构个人小程序（九）下拉刷新 前面已经使用到页面跳转，在此简单说明一下页面跳转和参数传递。 定义跳转方式，使用@click 触发。 或者 以第二个写留言为例，做跳转 定义方法并传递参数： 1234567// 写留言 comment (e) { console.log(e) **let** sid = e.currentTarget.id console.log(sid) wx.navigateTo({ url: '../comment/main?sid=' + sid }) }, 接收参数 在 comment.vue 的 onLoad 的 options 接收： 1234567onLoad (options) { console.log(options) let islogin = false this**.sid = options.sid …… 测试结果：","link":"/posts/a11697d3.html"},{"title":"使用mpvue重构个人小程序（零）源码地址","text":"使用mpvue写的小程序git地址： https://github.com/sunct/yudou-mpvue 使用小程序原生代码写的小程序git地址： https://github.com/sunct/yudou-one 源码和文档在持续更新中 …… 由于微信公众平台审核问题，本小程序带有图文，无法正常发布成正式版。测试的话，可以自行下载源码到本地。","link":"/posts/3bb4c83c.html"},{"title":"使用mpvue重构个人小程序（四）全局配置","text":"使用mpvue重构个人小程序（三）使用Vue的语法编写 如何把右侧的小程序通过mpvue 进行重构呢？ 为了干净，可以把app.json里的tabBar等数据清掉 只保留下图数据 一、全局配置 在src/app.json配置全局属性： pages是页面配置，加一个页面就配置一个。 window 是页面全局配置 12345&quot;enablePullDownRefresh&quot;: **true**, // 开启下拉 &quot;backgroundTextStyle&quot;: &quot;dark&quot;, // 头部背景主题颜色类型，包括 dark 和 light &quot;navigationBarBackgroundColor&quot;: &quot;#3F3F47&quot;,// 头部背景颜色 &quot;navigationBarTitleText&quot;: &quot;雨豆&quot;,// 头部文本内容 &quot;navigationBarTextStyle&quot;: &quot;white&quot; // 头部文本颜色 二、局部配置 在相关页面新建main.json 文件 是否支持下拉操作，也可以可以在单独页面配置，避免全局配置影响其他不需要下拉操作的页面。 其他配置在后续文章中陆续介绍。 下一节：使用mpvue重构个人小程序（五）插件配置mpvue-calendar","link":"/posts/e425dd84.html"},{"title":"关于消息队列的使用","text":"消息队列中间件是分布式系统中重要的组件，主要解决应用耦合，异步消息，流量削锋,日志处理等问题，实现高性能，高可用，可伸缩和最终一致性的架构。 使用较多的消息队列有ActiveMQ，RabbitMQ，ZeroMQ，Kafka，MetaMQ，RocketMQ。 1、消息队列应用场景 以下介绍消息队列在实际应用中常用的使用场景。异步处理，应用解耦，流量削锋和消息通讯四个场景 1.1异步处理 场景说明：用户注册后，需要发注册邮件和注册短信。传统的做法有两种 1.串行的方式；2.并行方式 （1）串行方式：将注册信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户端 （2）并行方式：将注册信息写入数据库成功后，发送注册邮件的同时，发送注册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可以提高处理的时间 假设三个业务节点每个使用50毫秒钟，不考虑网络等其他开销，则串行方式的时间是150毫秒，并行的时间可能是100毫秒。 因为CPU在单位时间内处理的请求数是一定的，假设CPU1秒内吞吐量是100次。则串行方式1秒内CPU可处理的请求量是7次（1000/150）。并行方式处理的请求量是10次（1000/100） 小结：如以上案例描述，传统的方式系统的性能（并发量，吞吐量，响应时间）会有瓶颈。如何解决这个问题呢？ 引入消息队列，将不是必须的业务逻辑，异步处理。改造后的架构如下： 按照以上约定，用户的响应时间相当于是注册信息写入数据库的时间，也就是50毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。因此架构改变后，系统的吞吐量提高到每秒20 QPS。比串行提高了3倍，比并行提高了两倍 2.2应用解耦 场景说明：用户下单后，订单系统需要通知库存系统。传统的做法是，订单系统调用库存系统的接口。如下图 传统模式的缺点： 假如库存系统无法访问，则订单减库存将失败，从而导致订单失败 订单系统与库存系统耦合 如何解决以上问题呢？引入应用消息队列后的方案，如下图： 订单系统：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功 库存系统：订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作 假如：在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了。实现订单系统与库存系统的应用解耦 2.3流量削锋 流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛 应用场景：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。 可以控制活动的人数 可以缓解短时间内高流量压垮应用 用户的请求，服务器接收后，首先写入消息队列。假如消息队列长度超过最大数量，则直接抛弃用户请求或跳转到错误页面 秒杀业务根据消息队列中的请求信息，再做后续处理 2.4日志处理 日志处理是指将消息队列用在日志处理中，比如Kafka的应用，解决大量日志传输的问题。架构简化如下 日志采集客户端，负责日志数据采集，定时写受写入Kafka队列 Kafka消息队列，负责日志数据的接收，存储和转发 日志处理应用：订阅并消费kafka队列中的日志数据 以下是新浪kafka日志处理应用案例：转自（http://cloud.51cto.com/art/201507/484338.htm） (1)Kafka：接收用户日志的消息队列 (2)Logstash：做日志解析，统一成JSON输出给Elasticsearch (3)Elasticsearch：实时日志分析服务的核心技术，一个schemaless，实时的数据存储服务，通过index组织数据，兼具强大的搜索和统计功能 (4)Kibana：基于Elasticsearch的数据可视化组件，超强的数据可视化能力是众多公司选择ELK stack的重要原因 2.5消息通讯 消息通讯是指，消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等 点对点通讯： 客户端A和客户端B使用同一队列，进行消息通讯。 聊天室通讯： 客户端A，客户端B，客户端N订阅同一主题，进行消息发布和接收。实现类似聊天室效果。 以上实际是消息队列的两种消息模式，点对点或发布订阅模式。模型为示意图，供参考。 三、消息中间件示例 3.1电商系统 消息队列采用高可用，可持久化的消息中间件。比如Active MQ，Rabbit MQ，Rocket Mq。 （1）应用将主干逻辑处理完成后，写入消息队列。消息发送是否成功可以开启消息的确认模式。（消息队列返回消息接收成功状态后，应用再返回，这样保障消息的完整性） （2）扩展流程（发短信，配送处理）订阅队列消息。采用推或拉的方式获取消息并处理。 （3）消息将应用解耦的同时，带来了数据一致性问题，可以采用最终一致性方式解决。比如主数据写入数据库，扩展应用根据消息队列，并结合数据库方式实现基于消息队列的后续处理。 3.2日志收集系统 分为Zookeeper注册中心，日志收集客户端，Kafka集群和Storm集群（OtherApp）四部分组成。 Zookeeper注册中心，提出负载均衡和地址查找服务 日志收集客户端，用于采集应用系统的日志，并将数据推送到kafka队列 Kafka集群：接收，路由，存储，转发等消息处理 Storm集群：与OtherApp处于同一级别，采用拉的方式消费队列中的数据 四、JMS消息服务 讲消息队列就不得不提JMS 。JMS（Java Message Service,Java消息服务）API是一个消息服务的标准/规范，允许应用程序组件基于JavaEE平台创建、发送、接收和读取消息。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。 在EJB架构中，有消息bean可以无缝的与JM消息服务集成。在J2EE架构模式中，有消息服务者模式，用于实现消息与应用直接的解耦。 4.1消息模型 在JMS标准中，有两种消息模型P2P（Point to Point）,Publish/Subscribe(Pub/Sub)。4.1.1 P2P模式 P2P模式包含三个角色：消息队列（Queue），发送者(Sender)，接收者(Receiver)。每个消息都被发送到一个特定的队列，接收者从队列中获取消息。队列保留着消息，直到他们被消费或超时。 P2P的特点 每个消息只有一个消费者（Consumer）(即一旦被消费，消息就不再在消息队列中) 发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列 接收者在成功接收消息之后需向队列应答成功 如果希望发送的每个消息都会被成功处理的话，那么需要P2P模式。（架构KKQ：466097527，欢迎加入） 4.1.2 Pub/sub模式 包含三个角色主题（Topic），发布者（Publisher），订阅者（Subscriber） 多个发布者将消息发送到Topic,系统将这些消息传递给多个订阅者。 Pub/Sub的特点 每个消息可以有多个消费者 发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息 为了消费消息，订阅者必须保持运行的状态 为了缓和这样严格的时间相关性，JMS允许订阅者创建一个可持久化的订阅。这样，即使订阅者没有被激活（运行），它也能接收到发布者的消息。 如果希望发送的消息可以不被做任何处理、或者只被一个消息者处理、或者可以被多个消费者处理的话，那么可以采用Pub/Sub模型。 4.2消息消费 在JMS中，消息的产生和消费都是异步的。对于消费来说，JMS的消息者可以通过两种方式来消费消息。 （1）同步 订阅者或接收者通过receive方法来接收消息，receive方法在接收到消息之前（或超时之前）将一直阻塞； （2）异步 订阅者或接收者可以注册为一个消息监听器。当消息到达之后，系统自动调用监听器的onMessage方法。 JNDI：Java命名和目录接口,是一种标准的Java命名系统接口。可以在网络上查找和访问服务。通过指定一个资源名称，该名称对应于数据库或命名服务中的一个记录，同时返回资源连接建立所必须的信息。 JNDI在JMS中起到查找和访问发送目标或消息来源的作用。 4.3JMS编程模型 (1) ConnectionFactory 创建Connection对象的工厂，针对两种不同的jms消息模型，分别有QueueConnectionFactory和TopicConnectionFactory两种。可以通过JNDI来查找ConnectionFactory对象。 (2) Destination Destination的意思是消息生产者的消息发送目标或者说消息消费者的消息来源。对于消息生产者来说，它的Destination是某个队列（Queue）或某个主题（Topic）;对于消息消费者来说，它的Destination也是某个队列或主题（即消息来源）。 所以，Destination实际上就是两种类型的对象：Queue、Topic可以通过JNDI来查找Destination。 (3) Connection Connection表示在客户端和JMS系统之间建立的链接（对TCP/IP socket的包装）。Connection可以产生一个或多个Session。跟ConnectionFactory一样，Connection也有两种类型：QueueConnection和TopicConnection。 (4) Session Session是操作消息的接口。可以通过session创建生产者、消费者、消息等。Session提供了事务的功能。当需要使用session发送/接收多个消息时，可以将这些发送/接收动作放到一个事务中。同样，也分QueueSession和TopicSession。 (5) 消息的生产者 消息生产者由Session创建，并用于将消息发送到Destination。同样，消息生产者分两种类型：QueueSender和TopicPublisher。可以调用消息生产者的方法（send或publish方法）发送消息。 (6) 消息消费者 消息消费者由Session创建，用于接收被发送到Destination的消息。两种类型：QueueReceiver和TopicSubscriber。可分别通过session的createReceiver(Queue)或createSubscriber(Topic)来创建。当然，也可以session的creatDurableSubscriber方法来创建持久化的订阅者。 (7) MessageListener 消息监听器。如果注册了消息监听器，一旦消息到达，将自动调用监听器的onMessage方法。EJB中的MDB（Message-Driven Bean）就是一种MessageListener。 深入学习JMS对掌握JAVA架构，EJB架构有很好的帮助，消息中间件也是大型分布式系统必须的组件。本次分享主要做全局性介绍，具体的深入需要大家学习，实践，总结，领会。 五、常用消息队列 一般商用的容器，比如WebLogic，JBoss，都支持JMS标准，开发上很方便。但免费的比如Tomcat，Jetty等则需要使用第三方的消息中间件。本部分内容介绍常用的消息中间件（Active MQ,Rabbit MQ，Zero MQ,Kafka）以及他们的特点。 5.1 ActiveMQ ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现，尽管JMS规范出台已经是很久的事情了，但是JMS在当今的J2EE应用中间仍然扮演着特殊的地位。 ActiveMQ特性如下： 多种语言和协议编写客户端。语言: Java,C,C++,C#,Ruby,Perl,Python,PHP。应用协议： OpenWire,Stomp REST,WS Notification,XMPP,AMQP 完全支持JMS1.1和J2EE 1.4规范 （持久化，XA消息，事务) 对Spring的支持,ActiveMQ可以很容易内嵌到使用Spring的系统里面去,而且也支持Spring2.0的特性 通过了常见J2EE服务器(如 Geronimo,JBoss 4, GlassFish,WebLogic)的测试,其中通过JCA 1.5 resource adaptors的配置,可以让ActiveMQ可以自动的部署到任何兼容J2EE 1.4 商业服务器上 支持多种传送协议:in-VM,TCP,SSL,NIO,UDP,JGroups,JXTA 支持通过JDBC和journal提供高速的消息持久化 从设计上保证了高性能的集群,客户端-服务器,点对点 支持Ajax 支持与Axis的整合 可以很容易得调用内嵌JMS provider,进行测试 ActiveMQ速度非常快；一般要比jbossMQ快10倍。 原文地址： 原文地址","link":"/posts/a956fc6a.html"},{"title":"家门外的石碾","text":"“吱哽——吱哽——吱哽…….”天刚有些蒙蒙亮，沉睡的大地还没揉开她那惺忪的睡眼，而房外的石碾在推动下开始不停的吟唱着，就这样唱醒了太阳，唱醒了大地，唱醒了辛勤的人们。 “一大早是谁在压碾？” “还能有谁？除了八妮。” “一大早晨的压什么碾，这么好的早晨，还让不让人家再睡那么会觉？”这是我在家居住的那些日子里某天早晨听到家父家母的谈话声。 现在是入秋的早上5点半钟。外面的空气很凉爽。周围的邻居们都知道这是八妮在准备今天一家的口粮，她一大清早带着需要的粮食，碾棍，簸箕，扫帚（扫碾专用的，扫头小，脊梁和扫把一条线）等工具，自己一个人围着碾盘一圈一圈的推着碾砣。那“吱哽”声是碾砣、碾框、碾管互相摩擦发出的声音。 关于家门外的那台石碾的来历我知道的甚少，它在我来到这个人间之前就已经在那里度过了好几十年。这是祖辈、父辈还在生产队的时候就有的生产工具，也是生产队唯一的一台户外石碾。以这台石碾为中心，方圆数里的家家户户如果有需要都会来这里碾压一些东西，包括：小麦、玉米、大豆、小葱种等。除了一些粮食种子外，碾压其他东西的也有，不过很少，比如粗盐。 家门外的这碾砣所用的石头是由一块很大的花岗岩打磨而成，至于这么大的石头从哪里搬运来的，我不太清楚，可能是从家乡的南山里开凿出来的，用的久了，碾砣表面光滑如抹了一层油，并且还有岩石的花纹，星星点点，十分耐看。碾框是铁匠炼打的金属框架，不像木头那般易被腐蚀腐烂，而且耐牢。中间的碾管同样也是由实金属做成的，又粗又长，估计这碾管也得有那么一二十斤重。至于下面的碾台，分为两部分，中间部分半径和碾石一样长，也是用一整块花岗岩打磨制成，而碾砣外周部分就没那么讲究，是用普通的石块和石灰或水泥堆砌而成，不过还要时常进行加固修理。 说起对石碾的修理加固不得不说我邻家的四奶奶，不过她已过世有八九年之久，想起邻家奶奶来都已变成脑海里深深的回忆。印象中的她一身素装，精神饱满，头上挽着发鬏，裹着小脚。一年从头到尾那石碾每天都在转动，邻家奶奶可是个仔细人，只要是她有功夫隔三差五都会过去打量一番，看看碾台是否牢固，看看碾轴是否生锈，她都会进行修补或点些油（润滑、防锈作用），奶奶之所以这样精心照料，或许是这碾台已成为奶奶的一种生活记忆，也感恩于石碾的付出，放在心里，不丢不舍。在邻家奶奶去世之后，左邻右舍也就全权担起了对石碾的维修之责，或者由碾物的村民来简单修修补补。 小的时候，我和一些小伙伴们都不谙世俗，也都很调皮，一起玩耍时也会在碾盘处那里玩耍，压空碾（家人说，压空碾不好，至于为什么我也说不去一二，也可能是有忌讳）、站在碾台上、向碾台上撒放杂物，邻家奶奶要是瞥到了，肯定会大口数落并教育我们一顿，那时候，要是被教育了，我们也就只是听着，左耳朵进右耳朵出，然后一哄而逃，回头还不知又要对碾台做些什么坏事哩。有时，路过的行人看到我们对石碾有什么不敬之处，他们也会训斥我们几句。现在想想，就是儿时的我们太顽皮了。而今，我对那碾台逐渐有一种敬畏之心，每次回家时，都会从它身旁走过，伫立在那里静静地看着它，看看它这几年经历风风雨雨后的模样，看看它在历史划痕下是否还一直安好。 这石碾已成为一种生活在农村人们古老且不灭的记忆载体，它也有一种与人们的辛勤劳作分不开的情怀。每逢佳节和习俗，比如春节、元宵、清明、××神（祖）的特殊日子，人们都会陆陆续续的在碾台下烧些纸钱，点高香，放灯烛，以此表达乡亲对它的敬畏和感恩之情。 写到这里，我也不免想写一首诗歌，那就以《石碾》为题。也以此表达我对家乡石碾的那份情，那份恩。 1234567891011121314151617181920212223242526272829303132333435石碾经久了数十载的青葱岁月，你依然在那里静静地卧着，卧着自己内心的踏实质朴，卧着人们辛勤劳碌的脚步。 你转动不停但你并不富有，但你已尝遍了丰收的五谷，尝遍了一圈圈辛勤的汗水，还有暮暮朝朝甘甜的雨露。 你转动着历史悠悠的年轮，你书写着年年岁岁的记录，你饱受着日夜的风雨雪霜，你承载着乡亲百般的呵护。 “吱哽——吱哽——吱哽”，这不，又是你在独特地浅唱，浅唱着劳动者的欣喜，浅唱稻谷丰收的欢乐，浅唱着历史悠悠的歌。 说起这石碾，不得不说的是我小时候亲自用它碾压稻谷的一些经历。 那时大概是三伏天，中午的太阳会炙烤着大地，不过早晨天气还算比较凉快些。早在夏至到来之前家里的小麦早已晒干库藏，为了增加主餐的花样和品尝自家的麦香，家母一大清早起来在院子里用瓷瓮淘洗麦中的砂石，这淘洗砂石并非一件容易的活：在瓮中放些许小麦和水，水要足够漫过，手拿着笊篱在水中打起漩涡借用水流惯性，把小麦捞起并放在铺着过滤布的斜桌上，以便控掉一些水。反复几遍。 带着家事（工具）来到石碾，时间还早，太阳还没有完全跳出东海，还偶尔有一阵小风，家母清扫碾台后，把小麦分了两拨，先把第一拨小麦放在碾台中央，随转随摊匀。我和母亲一人一碾棍，小孩子嘛，把压碾当作一种乐趣，我就以各种姿势，不同速度围着碾台转圈，即使是干活也可谓其乐无穷。转的快了，母亲就小跑或者让我自己转，母亲虽不止是转着，她两只手可都没闲着，左手里拿着扫帚不停的扫动，一来是为了使小麦碾压均匀，二来是防止碾压过重。 经过碾压和扫动，不一会儿的工夫第一拨小麦的表皮都已经变得毛糙起来，有的小麦已经压的发白，母亲说：“再压上两圈就可以碾第二拨了。压完这两拨，回家先晾上，中午我们就先尝个鲜，给家里做上一锅。”闻着那麦香，我恨不得碾完就回家下锅尝一尝。 半个钟头过去了，需要碾压的小麦也都已经碾完，这碾压的过程就把小麦变成了麦仁，最后就是对碾台和碾砣的清扫，清扫完之后，碾台旁的槐树也挡不住太阳的光芒了，阳光从茂盛的枝叶间找着空隙，散落在了地上和碾台上，一会天气就热起来了。我们走后，不知从哪里冒出几只麻雀，迅速把碾台“包围”起来，啄食掉落的那些粮食。 压碾时走动是逆时针。有人可能会问，为什么是逆时针转动碾砣？对于这问题的回答和问“为什么逆时针跑步”的答案一样，这里蕴含着祖辈们的智慧，之所以逆时针转动碾砣，是和我们人体的生理相关联，其一，我们的心脏居左，重心偏左，向左转弯比较容易；其二，我们的双脚，左脚支撑重心，右脚提供动力。还有，我们运动习惯，不然你顺时针转转，你是很不习惯的。当然，祖辈们留下的智慧博大精深，而这小小的石碾设计就蕴藏着智慧结晶哩。看来，这石碾不仅是生产力的推动器，还是劳动人民的智慧载体。 随着时代和科技的进步，机器的出现已经代替了这古董式的生产方式，也只有在一些展览馆和农村乡下才能看到这石碾，不过，这石碾也会印刻在每个土生土长人的记忆里。如果再次看到碾台，心里也不乏想起一些人：那个时代的劳动人民和邻家奶奶等。却如今只剩的个物是人非。有句话说得好：睹物思人，物是人非。 “吱哽——吱哽……” 八妮又在压碾，准备着口粮。","link":"/posts/438565e0.html"},{"title":"夏之花","text":"夏已来许久，前些时日曾下起连阴的雨，这雨也权是稍微缓和即将扑面而来的暑气。小暑已至，大暑招手。温情似火的太阳敞着胸怀毫不收敛的拥抱大地，实在有些过分。可谓是“小暑过，一日热三分”。 “春生，夏长”。春，万物复苏、破土染绿；夏，千枝伸展、绚烂叠翠。这“绚烂”说的便是“夏之花”的绚丽多彩、 万紫千红。比起艺术，我更喜欢自然，喜欢这自然无私奉献的美。 荷花 荷花，又名莲花、水芙蓉。长年水生，叶盾圆形，花单生梗顶、高托水面。《诗经·国风》曾记载荷花。“山有扶苏，隰有荷华。”隰（xí），洼地。华，同“花”。 荷花的清纯和高洁常被人赞赏。宋有周敦颐的《爱莲说》“予独爱莲之出淤泥而不染，濯清涟而不妖。中通外直，不蔓不枝，香远益清，亭亭净植，可远观而不可亵玩焉！”荷花的美也时常喻人，特别是形容美好的女子。比如“出水芙蓉”，还有“亭亭玉立”、“玉洁冰清”、“步步莲花”抑或“移步生莲”等。李时珍也说芙蓉就是“敷布容艳之意”，司马相如把他的妻子卓文君比作是出水的芙蓉。 古人描写荷花的诗数不胜数，广为人熟的是“接天莲叶无穷碧，映日荷花别样红”、“荷叶罗裙一色裁， 芙蓉向脸两边开 ”。而我独爱“叶上初阳干宿雨，水面清圆，一一风荷举。”此等神理，只可意会，岂可言传。“惟有绿荷红菡萏，卷舒开合任天真”，荷花是红花绿叶相配，荷叶有卷有舒，荷花有开有合。“此花此叶常相映，翠减红衰愁杀人”，花与叶交相相映，又怎忍得叶落花谢，实在是令人惋惜。 除了诗人歌咏，也有很多古往今来墨客绘画，也是寄予荷花的高尚品格。 明有周之冕的《莲渚文禽图》，“没骨写叶，粉白勾花”。 陈红绶的《荷花鸳鸯图》，“敷色艳丽，精细圆润”。 清代有谢荪《红莲图册》，“本固枝荣，一品清廉”。 荷花是印度和越南的国花。也和佛教有千丝万缕的联系。“莲花藏世界”。莲花是“报身佛所居之“净土”。可见莲花已成为佛教的象征。所以菩萨要垫以莲花为座。佛教中的莲花，包括了荷花和睡莲各种，大乘佛教的佛像座用荷花。 圆明园的荷花特别多。七月正是开始赏荷花的时节。水上荷花是圆明园的夏季之魂。从南门迈入，进入绮春园，左走数十米，便看见一汪池水，池子的边上长出叶叶相连的荷叶，像一塘绵延的绿云，绿云的上面便伸出几只娇羞荷花。沿着路往北走，交叉路多，荷花也多，有荷花也有睡莲。高处的天、远处的山或柳，再近一些的水和成片的荷花荷叶，偶尔一座石桥，或穿梭而过的游船，集于一个画面，照片能留住的只是瞬间，亲身体会到的却是美不可言。 朋友说，你怎么喜欢拍一些未开的荷花。因为使我驻足的并为之惊愕的就是那样似开未开，欲语未语，待香未香的一株荷花啊。 向日葵 向日葵，又名葵花、转日莲、向阳花，因其花常朝着太阳而得名。一年生草本，喜阳光。茎直，圆形多棱，叶互生，先端锐突，头状花序，单生顶端。 初夏，播种。“更无柳絮因风起，惟有葵花向日倾”，向日葵朝着阳光生长，它也被人们赋予“阳光，上进，美好，忠诚、爱慕”的象征。这句司马光的诗更是托物言志：我不是因风起舞的柳絮，随便附和；心就像葵花那样向着太阳，忠贞不贰。更有杜甫的“葵藿倾太阳，物性固莫夺”，以表忠诚。 提及到向日葵，就想起梵高的《向日葵》，这幅画算是人人可知。梵高用简练的笔法表现出植物形貌，充满了律动感及生命力。在梵高看来，向日葵象征着一种激情，更象征着一种生命的永存。梵高的向日葵似乎成为最具代表性的作品，它甚至成了艺术史上的一座丰碑。 ”最怜一点丹忱在，不为斜阳影便移“，向阳如葵。奥林匹克公园北园有一大块如海般的葵园，每年的六月末，七月初都是最佳赏花季。如若想看着这葵花海，就不要错过每年的赏花季，毕竟向日葵的花期不长。园中葵花种类繁多，名字少所见，倒没记住几个，从花色上看，有柠檬黄的、金黄的、亮黄的。从蕊上看，有黑褐色的、绿色的、黑色的。成片的向日葵沐浴在阳光下，个个伸着脑袋，风吹过，向来往的人儿摆了摆手，注目着、微笑着。 我时常在想：如果向日葵一直向着阳光，那早上的向日葵是如何把头从西扭到东？是猛地一下子吗？ 石榴花 ”五月榴花照眼明, 枝间时见子初成“，石榴花应该是入夏以来最先看到的红花，至少要早于荷花和葵花。“只待绿荫芳树合，蕊珠如火一时开”，这如火般的花儿就是石榴花。 石榴花生于枝顶或叶腋，花萼钟形，肉质，先端6裂，表面光滑具腊质，橙红色。花瓣5～7枚。“一朵花开千叶红，开时又不借春风。若教移在香闺畔，定与佳人艳态同。”不管是以人比花，还是以花拟人，人花融一，说的就是一个“美”字。 石榴喜阳，耐旱，耐寒。在北方的城市和农村都比较常见。在北京的很多公园里我都见过石榴花，观赏性的花，石榴花虽小，不过红的似火，在有的公园还是很容易被发现的。“谁家巧妇残针线，一撮生红熨不开”，是啊！熨不开的是藏在花萼里成簇的娇滴滴的石榴花。 说起石榴花，想起那粒粒饱满的石榴果，《河阳庭前安石榴赋有序》曰：“石榴者，天下之齐树，九州之名果也。”这石榴果之名果，那股久违的酸甜，让人垂涎欲滴。 石榴花的美也不仅如此，也与穿着石榴裙的美丽女子的俏丽动人、清新自然分不开。“眉黛夺将萱草色，红裙妒杀石榴花。”红的似火般的石榴裙，让人联想起杨贵妃酷爱石榴花和“拜倒在石榴裙下”的故事。“眉欺杨柳叶，裙妒石榴花”，好一个石榴花。 牵牛花 牵牛花一年生缠绕草本，它还有一个好听的名字叫朝颜花。又因形似喇叭，有的地方也叫它喇叭花。 有首儿歌就唱的是“喇叭花像喇叭”。 “晓思欢欣晚思愁，绕篱萦架太娇柔。”晓，拂晓，夏秋的清晨卯时，牵牛花欢喜地开；晚，傍晚，花缩而萎，不免愁苦在心头。说牵牛花的秧娇柔一些也不为过，它的韧性的确比不过带刺的拉拉秧。 牵牛花花薄，易脱水，遇到太阳热烈的时候，不一会的功夫就萎缩枯焉，令人惋惜。牵牛花花没有明显的花瓣，但却有一条条的分割线排列开来。其花色众多，常见的有蓝、粉白、紫、桃红等。喇叭花的花色会因外界的气温、湿度和土壤的酸碱度而异。 牵牛花生命顽强且生长迅速，叶圣陶先生曾被为它感叹和赞服。“前一晚只是绿豆般大一粒嫩头，早起看时，便已透出二三寸长的新条，缀一两张长满细白绒毛的小叶子，叶柄处是仅能辨认形状的小花蕾，而末梢又有了绿豆般大一粒嫩头。有时认着墙上斑剥痕想，明天未必便爬到那里吧；但出乎意外，明晨竟爬到了斑剥痕之上；好努力的一夜功夫！“生之力”不可得见；在这样小立静观的当儿，却默契了“生之力”了。渐渐地，浑忘意想，复何言说，只呆对着这一墙绿叶。” 牵牛花不怎么在城市的公园轻易露面，有也是在杂草丛生的地方缠绕着。牵牛花倒是在山野地头比较常见。其蔓顺着较高的野草往上爬，抑或铺在地上连成一片。俏皮的花儿每天都笑迎东起的太阳，并与夕阳作别。“篱落牵牛又著花，摘花心在鬓先华。”要是清晨碰见小院篱笆上爬满牵牛花，该不知有多美。 美人蕉 美人蕉长的高，花生顶端。一眼望去煞是显眼。那未开的矛头状的花骨朵，聚拥成团，蓄力开放。“带雨红妆湿，迎风翠袖翻，欲知心不卷，迟暮独无言。”花开过，唇瓣披散着，迎着风，等待着什么。 美人蕉艳丽，有红色的，也有黄色的。我见过红色的美人蕉，花开正艳时远远望去宛如一串熊熊燃烧的火，近看却像是小姑娘头戴的蝴蝶结儿。正如李绅在《红蕉花》所写“红蕉花样炎方识，瘴水溪边色更深。叶满丛深殷似火，不惟烧眼更烧心。”红花似火，这红的花不止烧我的眼睛，更烧我的心。 “不为烧眼更烧心”，这花红的确实有些突然。若只是注意到这火红的花瓣，也不足以展现美人蕉的貌美，还有那娇羞的花蕊和那一身碧绿的茎叶。赏花应如此，也不仅如此。 我不知道它为什么叫美人蕉。或许是因为花瓣薄如蝉翼的缘故，花瓣的尾部一齐向下无力地翻卷着，柔柔弱弱的样子，又如此娇媚，人见人怜。就像有句诗词写的这样“翠绿舒展大片叶，绯红欲卷半空霞。灿若美人争入眼，谁教此花色太浓。” 据说美人蕉是由佛祖脚趾所流出的血变成的。在阳光下，酷热的天气中盛开的美人蕉，让人感受到它强烈的存在意志，也为之敬畏。 鸡冠花 喇叭花形似喇叭，鸡冠花状如鸡冠。这名字起的也真是好听得紧哩。鸡冠花的茎直立，分枝少，花立尖端，多且密。花序下窄上宽。上部就像一肉质的鸡冠。也有诗云：“秋光及物眼犹迷，著叶婆娑拟碧鸡。精采十分佯欲动，五更只欠一声啼。” “亭亭高出竹篱间，露滴风吹血染乾。”从竹篱笆中挺着身子探着头的，红的如血的鸡冠花煞是光彩夺目。鸡冠花花期比较长，从夏日炎炎到秋风瑟瑟。这才有了“一枝秾艳对秋光，露滴风摇倚砌傍。” 小的时候，在家乡看到过鸡冠花。大的花帽有一个巴掌那么大。立于枝头，像一只傲首的大公鸡，迎着东边的朝阳像是在破晓歌唱。鸡冠花开得好，却闻不到香味，其实只有花美就足以立于众花丛中。鸡冠上长满这细细的“绒毛”，手感极佳。再往里拨开一点，里面包裹着黑色的小种子，也甚是可爱。 鸡冠花开都能开出爱你的形状。她爱的是滋养它的大地和给于它阳光雨露的天空。一撮撮的花序彼此偎依，这么美的花，除了欣赏赞叹，还能多说些什么呢？ 夏花争先斗艳，除了刚才说的那些夏花外还有很多。比如：“冰姿素淡广寒女，雪魂轻盈姑射仙”的茉莉；“花似鹿葱还耐久,叶如芍药不多深”的百合；“有此倾城好颜色，天教晚发赛诸花”的牡丹；…… 花的好也要有叶的美，浓的酒也要配淡的茶。细细数来这夏花无数，不管是闲步公园，还是路过小巷，抑或田间山野，这夏花随处惹眼。当然除了广为人知的一些，还有一些不知名的小花，也在烈日下静静开放，管你欣不欣赏。","link":"/posts/fc8eac67.html"},{"title":"常见的 PHP 设计模式1–策略模式（抽象）","text":"策略模式 策略模式是对象的行为模式，用意是对一组算法的封装。动态的选择需要的算法并使用。 策略模式指的是程序中涉及决策控制的一种模式。策略模式功能非常强大，因为这个设计模式本身的核心思想就是面向对象编程的多形性思想。 策略模式的三个角色： 1．抽象策略角色 2．具体策略角色 3．环境角色（对抽象策略角色的引用） 实现步骤： 1．定义抽象角色类（定义好各个实现的共同抽象方法） 2．定义具体策略类（具体实现父类的共同方法） 3．定义环境角色类（私有化申明抽象角色变量，重载构造方法，执行抽象方法） 就在编程领域之外，有许多例子是关于策略模式的。例如： 如果我需要在早晨从家里出发去上班，我可以有几个策略考虑：我可以乘坐地铁，乘坐公交车，走路或其它的途径。每个策略可以得到相同的结果，但是使用了不同的资源。 策略模式的代码实例： 12345678910111213141516171819202122232425262728293031323334&lt;?php/** *这是一个php 策略模式 demo * *此文件程序用来做什么的（详细说明，可选。）。 * Created by PhpStorm * @author sunct * @version $Id$ * @since 1.0 */ abstract class baseVehicle { //抽象策略类 abstract function PrintPage(); } //用于公共汽车调用的类（环境角色） class busVehicle extends baseVehicle { function PrintPage() { return '公共汽车'; } } //用于地铁时调用的类（环境角色） class subwayVehicle extends baseVehicle { function PrintPage() { return '地铁'; } } class people { //具体策略角色 public function call($object) { return $object-&gt;PrintPage (); } } $people = new people (); echo $people-&gt;call ( new subwayVehicle () );?&gt; 输出结果：","link":"/posts/a9a04784.html"},{"title":"常见的 PHP 设计模式2–工厂模式（接口）","text":"工厂模式 工厂模式是我们最常用的实例化对象模式，是用工厂方法代替new操作的一种模式。 使用工厂模式的好处是，如果你想要更改所实例化的类名等，则只需更改该工厂方法内容即可，不需逐一寻找代码中具体实例化的地方（new处）修改了。为系统结构提供灵活的动态扩展机制，减少了耦合。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;?php /** *这是一个工厂模式demo * *此文件程序用来做什么的（详细说明，可选。）。 * Created by PhpStorm * @author sunct * @version $Id$ * @since 1.0 */ /** *简单工厂模式（静态工厂方法模式） */ /** * Interface people 人类 */ interface people { public function say(); } /** * Class man 继承people的男人类 */ class man implements people { // 具体实现people的say方法 public function say() { echo '我是男人&lt;br&gt;'; } } /** * Class women 继承people的女人类 */ class women implements people { // 具体实现people的say方法 public function say() { echo '我是女人&lt;br&gt;'; } } /** * Class SimpleFactoty 工厂类 */ class SimpleFactoty { // 简单工厂里的静态方法-用于创建男人对象 static function createMan() { return new man(); } // 简单工厂里的静态方法-用于创建女人对象 static function createWomen() { return new women(); } } /** * 具体调用 */ $man = SimpleFactoty::createMan(); $man-&gt;say(); $woman = SimpleFactoty::createWomen(); $woman-&gt;say(); 输出结果：","link":"/posts/43f2273.html"},{"title":"浏览器报错 net::ERR_CONTENT_LENGTH_MISMATCH 200 (OK) 解决办法","text":"一、发现问题 ​ 在开发过程中，遇到前端页面加载css，js或woff，ttf 文件的时候，经常出现 ERR_CONTENT_LENGTH_MISMATCH 的报错情况。但不是所有的js或css 报错，报错的文件较没报错的文件偏大。并且报错的文件也可以单独在浏览器中打开,所以排除了最简单的地址错误。前端项目是由nginx代理的，所以可以查看nginx的日志，看看有无线索。 二、解决问题 查找 nginx 错误日志文件 1、查找nginx配置文件 1ps -ef grep nginx 结果如下： 123456789www 16951 18739 0 16:15 ? 00:00:00 nginx: worker processwww 16952 18739 0 16:15 ? 00:00:00 nginx: worker processwww 16953 18739 0 16:15 ? 00:00:00 nginx: worker processwww 16954 18739 0 16:15 ? 00:00:00 nginx: worker processwww 16955 18739 0 16:15 ? 00:00:00 nginx: worker processwww 16956 18739 0 16:15 ? 00:00:00 nginx: worker processwww 16957 18739 0 16:15 ? 00:00:00 nginx: worker processwww 16958 18739 0 16:15 ? 00:00:00 nginx: worker processroot 18739 1 0 Sep20 ? 00:00:26 nginx: master process /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf 我的开发环境nginx配置文件路径为： /usr/local/nginx/conf/nginx.conf 2、查看错误日志文件位置 1cat /usr/local/nginx/conf/nginx.conf 我的开发环境nginx错误日志路径为：cnk_data/nginx_logs/error.log 3、打开错误日志 根据出错的文件过滤一下（若文件过大，请稍等片刻）： 1cat /cnk_data/nginx_logs/error.log grep &quot;query.dataTables.min.js&quot; 结果如下： 12019/10/16 16:11:37 [crit] 5878#0: *81035 mkdir() &quot;/usr/local/openresty/nginx/proxy_temp/2/35&quot; failed (13: Permission denied) while reading upstream, client: 123.116.114.84, server: sunct.goapi.youlai.cn, request: &quot;GET /static/js/adminone/jquery.dataTables.min.js HTTP/1.1&quot;, upstream: &quot;http://127.0.0.1:9092/static/js/adminone/jquery.dataTables.min.js&quot;, host: &quot;sunct.goapi.youlai.cn&quot;, referrer: &quot;http://sunct.goapi.youlai.cn/admin/index&quot; 其中有一句 mkdir() Permission denied 错误： 2019/10/16 16:11:36 [crit] 5881#0: *80999 mkdir() &quot;/usr/local/openresty/nginx/proxy_temp/1/35&quot; failed (13: Permission denied) while reading upstream, client: 123.116.114.84, server: sunct.goapi.youlai.cn, request: “GET /static/js/adminone/jquery.dataTables.min.js HTTP/1.1”, upstream: “http://127.0.0.1:9092/static/js/adminone/jquery.dataTables.min.js”, host: “sunct.goapi.youlai.cn”, referrer: “http://sunct.goapi.youlai.cn/admin/index” 到此，可以得知是没有mkdir()成功，结果因为没有权限，导致了请求失败，被拒绝。 那么，为什么nginx要访问proxy_temp文件夹呢？ 因为proxy_temp是nginx的缓存文件夹，我的css和js文件过大了，所以nginx一般会从缓存里面去拿，而不是每次都去原地址直接加载。 4、尝试解决 进入报错的路径，我的是 /usr/local/openresty/nginx/，查看文件夹proxy_temp权限。 123cd /usr/local/openresty/nginxll 结果如下（注：这是改后的权限） 根据个人情况，给proxy_temp文件夹重新修改权限和组 即可。 12chown www root proxy_tempchmod -Rf 777 proxy_temp 5、重启 nginx 服务 根据自己的nginx 服务配置来重启即可，命令可能如下： 1./nginx -s reload 我使用的是： 1/etc/init.d/nginx reload 6、重新刷新浏览器 完美，一切正常！ 希望本文对你学习有所帮助，感谢您的阅读。","link":"/posts/329f423.html"},{"title":"常见的 PHP 设计模式3–单例模式（三私+一公）","text":"单例模式 单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。 单例模式是一种常见的设计模式，在计算机系统中，线程池、缓存、日志对象、对话框、打印机、数据库操作、显卡的驱动程序常被设计成单例。 php只有懒汉式单例、没有饿汉式单例。 特点 单例模式有以下3个特点： 1．只能有一个实例。 2．必须自行创建这个实例。 3．必须给其他对象提供这一实例。 那么为什么要使用PHP单例模式？ PHP一个主要应用场合就是应用程序与数据库打交道的场景，在一个应用中会存在大量的数据库操作，针对数据库句柄连接数据库的行为，使用单例模式可以避免大量的new操作。因为每一次new操作都会消耗系统和内存的资源。 为什么必须是静态的?因为静态成员属于类,并被类所有实例所共享 为什么必须是私有的?不允许外部直接访问,仅允许通过类方法控制方法 为什么要有初始值null,因为类内部访问接口需要检测实例的状态,判断是否需要实例化 知识点： 一、三私一公： ①、私有静态属性，又来储存生成的唯一对象 ②、私有构造函数 ③、私有克隆函数，防止克隆——clone ④、公共静态方法，用来访问静态属性储存的对象，如果没有对象，则生成此单例 二、关键词instanceof 检查此变量是否为该类的对象、子类、或是实现接口。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;?php/** *这是一个单例模式 demo * *此文件程序用来做什么的（详细说明，可选。）。 * Created by PhpStorm * @author sunct * @version $Id$ * @since 1.0 */class Mysql{ /** * * @var self[该属性用来保存实例] need */ private static $instance; /** * * @var mixed */ public $mix; /** * Return self instance[创建一个用来实例化对象的方法] need * * @return self */ public static function getInstance() { if (! (self::$instance instanceof self)) { self::$instance = new self(); } return self::$instance; } /** * 构造函数为private,防止创建对象 need */ private function __construct() {} /** * 防止对象被复制 */ private function __clone() need { trigger_error('Clone is not allowed !'); }}// @test$firstMysql = Mysql::getInstance();$secondMysql = Mysql::getInstance();$firstMysql-&gt;mix = &quot;this_one&lt;br/&gt;&quot;;$secondMysql-&gt;mix = &quot;this_two&lt;br/&gt;&quot;;print_r($firstMysql-&gt;mix);// 输出： this_twoprint_r($secondMysql-&gt;mix);// 输出： this_two 输出结果： 优点 一、实例控制单例模式会阻止其他对象实例化其自己的单例对象的副本，从而确保所有对象都访问唯一实例。 二、灵活性因为类控制了实例化过程，所以类可以灵活更改实例化过程。 缺点 一、开销虽然数量很少，但如果每次对象请求引用时都要检查是否存在类的实例，将仍然需要一些开销。可以通过使用静态初始化解决此问题。 二、可能的开发混淆使用单例对象（尤其在类库中定义的对象）时，开发人员必须记住自己不能使用new关键字实例化对象。因为可能无法访问库源代码，因此应用程序开发人员可能会意外发现自己无法直接实例化此类。","link":"/posts/a878a524.html"},{"title":"漫谈数据库事务（一）事务、事务隔离级别","text":"该节内容为漫谈，内容相对比较多。 首先说明一下：事务不只是关系型数据库独有，非关系型数据库也有事务。只要在高并发或在短时间内操作做多条（批量，状态改变）数据的情况下，大都，注意是大都，而不是全部。 说事务，但解决问题的最好的办法是避免使用事务。在日常开发中要是迫不得己那就用下事务吧。目前大型国企在事务处理上大都选择orical ，一般私营企业还是选择MySQL，使用MySQL来处理事务，在MySQL中用的最多的存储引擎有：innodb，bdb，myisam ,memory 等。其中innodb和bdb支持事务而myisam等不支持事务。这也是 innodb和myisam的重要区别之一。 一、什么是事务 在数据库中事务是工作的逻辑单元，一个事务是由一个或多个完成一组的相关行为的SQL语句组成，通过事务机制确保这一组SQL语句所作的操作要么都成功执行，完成整个工作单元操作，要么一个也不执行。 如：网上转帐就是典型的要用事务来处理，用以保证数据的一致性。 事务就像是一个整体，执行的目的是要完整。要么都成功执行，要么都不执行。 二、事务有什么特性 特性就是更好的来描述事务。事务具体四大特性，也就是经常说的ACID 。ACID是原子性（atomicity）、一致性（consistency）、隔离性（isolation）、持久性（durability）的缩写。重要的知识点要默念三遍。 1、原子性（atomicity） 即不可分割，事务要么全部被执行，要么全部不执行。如果事务的所有子事务全部提交成功，则所有的数据库操作被提交，数据库状态发生变化；如果有子事务失败，则其他子事务的数据库操作被回滚，即数据库回到事务执行前的状态，不会发生状态转换。 2、一致性（consistency) 事务的执行使得数据从一种正确状态转换成另外一种正确状态。 3、隔离性（isolation） 在事务正确提交之前，不允许把事务对该数据的改变提供给任何其他事务，即在事务正确提交之前，它可能的结果不应该显示给其他事务。 在进行事务查看数据时数据所处的状态，要么是被另一并发事务修改之前的状态，要么是被另一并发事务修改之后的状态，即当前事务不会查看由另外一个并发事务正在修改的数据。这种特性主要由锁机制实现。 4、持久性（durability） 事务正确提交之后，其结果将永远保存在数据库之中，即使在事务提交之后有了其他故障，事务的处理结果也会得到保存。 三、有了事务的机制，那么在并发情况下会出现什么问题？ 举个例子，事务A和事务B操纵的是同一个资源，事务A有若干个子事务，事务B也有若干个子事务，事务A和事务B在高并发的情况下，会出现各种各样的问题。“各种各样的问题”，常出现的有三种：脏读、不可重复读、幻读。 1、脏读 所谓脏读，就是指事务A读到了事务B还没有提交的数据，比如银行取钱，事务A开启事务，此时切换到事务B，事务B开启事务–&gt;取走100元，此时切换回事务A，事务A读取的肯定是数据库里面的原始数据，因为事务B取走了100块钱，并没有提交，数据库里面的账务余额肯定还是原始余额，这就是脏读。 2、不可重复读 所谓不可重复读，就是指在一个事务里面读取了两次某个数据，读出来的数据不一致。（在同一事务中重复读取数据，读取的结果不一致，导致数据不可重复读）。读取的还是以银行取钱为例，事务A开启事务–&gt;查出银行卡余额为1000元，此时切换到事务B，事务B开启事务–&gt;事务B取走100元–&gt;提交，数据库里面余额变为900元，此时切换回事务A，事务A再查一次查出账户余额为900元，这样对事务A而言，在同一个事务内两次读取账户余额数据不一致，这就是不可重复读。 3、幻读 所谓幻读，就是指在一个事务里面的操作中发现了未被操作的数据。比如学生信息，事务A开启事务–&gt;修改所有学生当天签到状况为false，此时切换到事务B，事务B开启事务–&gt;事务B插入了一条学生数据，此时切换回事务A，事务A提交的时候发现了一条自己没有修改过的数据，这就是幻读，就好像发生了幻觉一样。幻读出现的前提是并发的事务中有事务发生了插入、删除操作。 四、那在事务中怎么出现或避免这些情况的呢？ 这就需要了解事务隔离级别。 SQL标准定义了4种隔离级别，包括了一些具体规则，用来限定事务内外哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。 以本地数据库为例： 1、第1级别：Read Uncommitted(读未提交) 通过名字可以看出，就是一个事务读取了另一个事务未提交的内容。该级别引发的问题是——脏读(Dirty Read)：读取到了未提交的数据。 举例： 设置事务隔离为：READ-UNCOMMITTED 1set tx_isolation='READ-UNCOMMITTED'; 事务A：启动事务 12start transaction; select * from my_user; 事务B：也启动一个事务(那么两个事务交叉了)。在事务B中执行更新语句，且不提交。 123start transaction; update my_user set sex='0' where id=1; select * from my_user; 事务A：回到事务A查看数据情况，两次操作前后对比： 1select * from my_user; 数据改变了，说明我们读到了事务B还没有提交的数据。 事务B：事务B回滚，仍然未提交 12rollback; select * from my_user; 事务A：回到事务A，在事务A里面看到的也是B没有提交的数据。 脏读意味着我在这个事务中(A中)，事务B虽然没有提交，但它任何一条数据变化，我都可以看到！ 2、第2级别：Read Committed(读已提交) 还是从名字上看出，这个级别是指：一个事务只能读取其他事物已经提交的数据。这个级别隔离这是大多数数据库系统的默认隔离级别（但不是MySQL默认的） 。而这种隔离级别出现的问题是——不可重复读(Nonrepeatable Read)：不可重复读意味着我们在同一个事务中执行完全相同的select语句时可能看到不一样的结果。导致这种情况的原因可能有：(1)有一个交叉的事务有新的commit，导致了数据的改变；(2)一个数据库被多个实例操作时，同一事务的其他实例在该实例处理其间可能会有新的commit。总之就是有其他事务comment了，导致当前事务读取前后不一致。 修改隔离级别 1set tx_isolation='read-committed'; 事务A：启动一个事务 12start transaction; select * from my_user; 事务B：也启动一个事务(那么两个事务交叉了)。在这事务中更新数据，且未提交。 1234start transaction; select * from my_user; update my_user set sex='0' where id=1; select * from my_user; 事务A：回到事务A，这个时候我们在事务A中能看到数据的变化吗? 这说明，事务A读取不到事务B未提交的数据，避免了上种情况的脏读。但是，把事务B commit 之后： 再来看事务A: 3、第3级别：Repeatable Read(可重读) 顾名思义，在同一个事务中，读取的数据是不会发生变化的，不受其他事务的影响。这是MySQL的默认事务隔离级别。此级别可能出现的问题——幻读(Phantom Read)：当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。 InnoDB和Falcon存储引擎通过多版本并发控制(MVCC，Multiversion Concurrency Control)机制解决了该问题，下节再讲关于MVCC 的内容。 更改隔离级别 1set tx_isolation='repeatable-read'; 事务A：启动一个事务 12start transaction; select * from my_user; 事务B：开启一个新事务(那么这两个事务交叉了)，在事务B中增加一条数据，并提交 。 12345start transaction; insert into my_user (`name`,`sex`) values ('杨十三','1'); select * from my_user;commit; 事务A：这时候即使事务B已经提交了，但A能不能看到数据变化？ 1select * from my_user; 事务A：只有当事务A也提交了，它才能够看到数据变化 4、第4级别：Serializable(可串行化) 可串行化是指，在同一个事务中要完全从头到尾一连串的执行完，不能在此过程中有其他事务改变数据。此级别的隔离是最高的隔离级别。它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。但在这个级别，可能导致大量的超时现象和锁竞争。随后章节说一下锁的内容。 修改隔离级别 1set tx_isolation='serializable'; 事务A：开启一个新事务 1start transaction; 1select * from my_user; 在事务A中遇到了问题，只能插入数据，而不能查看数据。当事务A提交之后可select查看。 虽然出错了，但???奇怪的是，事务B怎么插入数据成功了？和预期的不一样？哪里出了问题呢？ 原来 在 Serializable(可串行化) 级别下，表加的锁不是表锁而是行锁，在select 中加上where 条件就可查询出来。 而update 语句也执行错误。","link":"/posts/b22c4717.html"},{"title":"爬虫|Charles（茶壶）工具在MAC端设置","text":"一、说明和关于 Charles是一款代理服务器，通过设置将自己的电脑设备（服务器，浏览器）做为网络访问代理服务器，然后可以通过截取请求和发送请求，分析结果达到分析抓包的目的。 本人系统环境为 mac ，如果有相关需要可联系我本人（联系方式可参照置顶文章 ：获取我的联系方式）获取。 声明：软件仅供个人开发学习使用，不可商用，如若有条件请 购买正版 ，也可从官网获取使用免费版30天。 谢谢！ 二、使用方法 目前我通过该软件主要应用于 爬虫抓包。 1、安装 通过安装包安装完成。不再描述。 需要说明的一点，如果在mac 环境安装 时出现 “app已损坏，打不开。你应该将它移到废纸篓。” ​ 不要慌，这很可能是因为权限不足，打开 “系统偏好设置“——”安全与隐私“ 如下图所示 选择“任何来源”，如果没有这个选项，在终端，执行以下命令，并输入自己的密码。 1sudo spctl --master-disable 然后就可以看到选中“任何来源”这个选项，然后重装软件即可。 安装即可。 2、代理设置 （1） HTTP 代理端口设置为 ：8888 SOCKS 代理 启用把端口设置为 8889 其他全部勾选 - [x] … 即可。如下图所示。 （2） 在菜单中 找到“代理”并选择 “macOS Proxy” ​ (3) 如果还不能使用，设置根证书 在charles菜单中，选择“帮助” help -&gt; SSL Proxying -&gt; Install Charles Root Certificate，此时会打开mac的钥匙串访问程序，右键选择证书列表中的charles根证书，将该证书选择信任。 ​ 设置信任证书。 另外注意，在使用软件时，请关闭其他代理。 使用时 点击 开启，圆点置红状态 即为可用。左边就会出现你请求的访问请求数据。 然后就可以查看 返回的数据，包括参数和结果：","link":"/posts/48a81f3d.html"},{"title":"春之味","text":"今日又逢春雨，雨约在昨日凌晨寅时开始淅沥沥，今日这雨却比前几日的那场大了许多，天阴暗暗的，也没有风。要是知道雨止于何时，那就取决于这雨的兴致。对于我而言，我还是希望这雨能下的更久一点。让这春雨浸透干涸的大地，冲刷浑浊的空气，催醒沉睡的枝桠，洗礼不忘的初心。我喜欢雨，也喜欢春天。 “春之味”说的就是这春天的味道，如果此时要再写什么雨后的泥土芬芳，或者娇花引蜂蝶的甜香，抑或观景赏春时心中油然升起的美滋滋，就太过于矫情了。说这“味”，不妨观于眼，闻于耳，嗅于鼻，品于舌，情于心。浅一步说，有谁不忠于这舌尖上的美味，可谓“一日无食，生而无味”。 ⊙ 春笋 雨后春笋，说的是春雨过后笋长得尤为迅速。宋·张耒《食笋》中曰：“荒林春雨足，新笋迸龙雏。”这春笋就像是遇雨从泥土中一下子蹦出来一样。 竹笋一年四季皆有，但惟有春笋、冬笋味道最佳。烹调时无论是凉拌、煎炒还是熬汤，均鲜嫩清香。 春笋笋体肥大、洁白如玉、肉质鲜嫩、美味爽口可被誉为“菜王”。 《诗经·大雅·韩奕》中记载：“其肴维何？炰鳖鲜鱼。其蔌维何？维笋及蒲。”由此可见自古以来，就视竹笋为上等蔬菜。苏轼在《初到黄州》 中曰“长江绕郭知鱼美，好竹连山觉笋香。”虽被贬到黄州，反倒如了心愿，鱼肥水美，竹笋喷香。也有民谚“不图今年竹，单图来年笋。”笋的美味也就随之飘来。林语堂在《吾国吾民》中写到“竹笋一物之所以如此流行，即为其嫩笋所给予吾人牙齿上的精美的抵抗力。一般人之爱好竹笋可为吾人善辨滋味的典型例证，它既不油腻，却有一种不可言辞形容的肥美之质。” 说到春笋之美，梁实秋在《笋》中描写到：“春笋不但细嫩清脆，而且样子也漂亮。细细长长的，洁白光润，没有一点瑕疵。春雨之后，竹笋骤发，水分充足，纤维特细。古人形容妇女手指之美常曰春笋。‘秋波浅浅银灯下，春笋纤纤玉镜前。’(剪灯余话)。”春笋不但味美，也有“利九窍、通血脉、化痰涎、消食胀”的功效。 不用花大力气生火动灶，去笋衣，切老根，沸水焯烫，冷水过滤，切成小段，外加豌豆、胡萝卜丁和调料，搅拌均匀，来一盘凉拌春笋，就单看这红绿白三色交叠，就美不可言。 ​ ⊙春韭 “正月葱二月韭”，每年的农历二月是吃韭菜的最佳时节，尤其是吃根部带着紫红外衣的头韭。 韭菜适应力强，抗旱耐热，味辛益阳，祛阴散寒，并且滋味甜美，提鲜亦可，乃是常见的家常菜品。杜甫曾在诗《赠卫八处士》中曰：“夜雨剪春韭，新炊间黄粱。” 老舍曾在《济南的冬天》写雨后的韭菜：“雨后，韭菜叶上还往往带着雨时溅起的泥。青菜摊子的红红绿绿几乎有诗似的美丽。”初春，用镰刀割一捆鲜韭是在老家家母去菜地顺手拈来的事情，割回来的春韭也都带着护根的泥土。母亲常说，韭菜吃两头，春秋季的韭菜最鲜。 有的人喜欢吃韭菜，虽然吃着清香入口，但其余味也是让人闻之捂鼻。我不常吃韭菜，也是这个原因。在老家，韭菜洗净可以生吃，所谓生吃就是蘸些豆酱卷入煎饼中一并嚼在嘴里，既方便省事又清爽可口。 韭菜最常的做法有：韭菜水饺，韭菜炒鸡蛋，韭菜炒鱿鱼，韭菜鸡蛋饼，韭菜盒子。待到韭菜长梗开花的时，可取其梗和花一并加料研磨，做成韭花（酱），要是铺在碟子里像溶化了的一块墨玉，墨绿墨绿的。梁启超曾有诗云韭花“韭菜花开心一枝，花正黄时叶正肥，愿郎摘花连叶摘，到死心头不肯离。”由此可见韭菜开花时的样子。 ​ ⊙莴苣 既雨已秋，堂下理小畦，隔种一两席许莴苣，向二旬矣，而苣不甲拆，独野苋青青。伤时君子，或晚得微禄，轗轲不进。为此杜甫为莴苣作诗一首——《种莴苣》，以此自喻。 莴苣经过严冬，在初春时节，经过充足的施肥灌溉，时隔数日，便长出一大截，还用力舒展着又长又嫩的叶子。半尺之高的莴苣便可以从菜园连根拔出食用。 剥掉外面的几层叶柄，用清水洗净，里面嫩些的叶子，便可一层层的置于餐盘，蘸着酱，卷个煎饼，也是一种自然的美味。不得不说家乡的煎饼就是各种蔬菜的“百配搭档”。 莴苣成丝划片都可以做出美味的菜肴。这莴苣的皮苦涩，食用时要剥叶后再去皮，去皮也很简单，手拿削皮器沿着它生长的方向（从根部往头梢），三下五除二就脱胎换骨成用晶莹剔透来形容也不为过的浅绿色的玉般柱子。“哒哒哒”，在菜刀与案板的碰撞下把莴苣划片切丝，加油炝锅，再放一撮虾米，配料微许，小火清炒之后，一锅水（水产的虾米）与土（土长的莴苣）交融的喷香就要滑入餐盘，秀色可餐。 ​ ​ ⊙椿芽 提到椿芽我就忆起椿芽炒鸡蛋的美味，也让我想起小时候那棵老香椿树。“雨前椿芽嫩如丝，雨后椿芽生木质”，其中这“雨”是指节气谷雨。 香椿的嫩芽是暗红色的，正如张晓风描述的那样“香椿芽刚冒上来的时候，是暗红色，仿佛可以看见一股地液喷上来，把每片嫩叶都充了血。” 椿芽被称为“树上蔬菜”，椿芽做菜约始于唐，确认于宋。宋《图经本草》“椿木实而叶香，可口取”。明《救荒本草》记载“采嫩芽炒熟，水浸淘净，油盐调食。”于丹在《人间有味是清欢》中提到“道家说，‘人法地，地法天，天法道，道法自然’。土地的规律是春生夏长秋收冬藏。所以，吃饭也应该顺应这个规律。”，并说到，春天食嫩芽，夏天吃叶子，秋天吃果子，冬天吃“根”，她的“春天，阳气升腾，可以吃点阳气旺盛的东西，比如香椿、柳芽等带嫩芽的食物”就是这个道理。 除了椿芽炒鸡蛋外，还有椿芽拌豆腐。椿芽择洗干净，先焯，捞出后切末；精盐、味精加少量水调匀，同豆腐、香油、葱末拌匀，放进盘中，撒上椿芽即可。 椿香浓郁，富含营养。 汪曾祺的文章写得好，简简单单，朴朴素素，却又余味悠长。其中《豆腐》一文提到：“香椿拌豆腐是拌豆腐里的上上品。嫩香椿头，芽叶未舒，颜色紫赤，嗅之香气扑鼻，入开水稍烫，梗叶转为碧绿，捞出，揉以细盐，候冷，切为碎末，与豆腐同拌（以南豆腐为佳），下香油数滴。一箸入口，三春不忘。三春不忘耶，是何等美味？” ​ ⊙荠菜 又是一年杨柳绿，春在溪头荠菜花。荠菜迎春而开，荠菜不仅可以做美味的蔬菜，也可以治疗一些疾病，俗语言“阳春三月三，荠菜当灵丹”，这说的便是荠菜可药用。“打了春赤脚奔，挑荠菜拔茅针”，茅针是茅草的初生叶芽后花苞期的花穗。 入春的荠菜，最好吃。陆游《食荠》一首便彰显春荠的美味诱惑，“日日思归饱蕨薇，春来荠美忽忘归。 传夸真欲嫌茶苦，自笑何时得瓠肥？”陆游更有《食荠十韵》赞许荠菜。郑板桥也曾有诗夸赞荠菜“三春荠菜饶有味，九熟樱桃最有名。”试想可堪比于樱桃的荠菜是何等美味。 荠菜是一种忆苦思甜的野菜，在欠收缺粮的时期“荠菜窝窝头”是何等的珍贵。印象中荠菜可以做荠菜水饺，煲芥菜豆腐汤，包荠菜馄饨。“初春，晚冬的寒气还未尽去，荠菜就开始从草地田野里冒出来。这时的主妇们，要是不应着节令好好包一顿荠菜馄饨，再在冰箱的冷冻室里存上那么一百只备货，当作孩子们的早点、先生的宵夜，简直是不贤惠的呢。”读罢这《半间灶披间》中的馄饨，瞬间有股饥饿感侵入胃肠。 “荠菜那么小也敢开花，他们真快活。”荠菜也开花，白色的小花。荠菜开花后就不能再食用了。鲁迅笔下写过“油菜结子，荠菜将开花，小白菜也老了——统统吃不得了。”虽开花吃不得，但能当药材。《诗经》记载“谁谓荼苦，其甘如荠。”这是说荠菜开花结的籽是甘甜的。 ​ ⊙菠菜 “红嘴绿鹦哥，吃了营养多”，说的就是菠菜，形似鹦鹉，也叫鹦鹉菜。菠菜在我国冬春常吃，菠菜营养价值高，有“营养模范生”之称，更有谚语“菠菜豆腐虽贱，山珍海味不换”。 菠菜在唐代时才从波斯引入中国，菠菜也叫波斯菜。汪曾祺在《老味道》里提及“我劝大家口味不要太窄，什么都要尝尝，不管是古代的还是异地的食物，……，许多大家都已经习以为常的蔬菜，比如菠菜和莴笋，其实原来都是外国菜。” 春天吃菠菜也是一种口福。 菠菜的吃法也很多：烧汤，凉拌，单炒，烙饼等等。说到凉拌菠菜，汪曾祺可谓津津乐道“ 我做的拌菠菜稍为细致。菠菜洗净，去根，在开水锅中焯至八成熟（不可盖锅煮烂），捞出，过凉水，加一点盐，剁成菜泥，挤去菜汁，以手在盘中抟成宝塔状。先碎切香干（北方无香干，可以熏干代），如米粒大，泡好虾米，切姜末、青蒜末。香干末、虾米、姜末、青蒜末，手捏紧，分层堆在菠菜泥上，如宝塔顶。好酱油、香醋、小磨香油及少许味精在小碗中调好。菠菜上桌，将调料轻轻自塔顶淋下。吃时将宝塔推倒，诸料拌匀。”这就是他的 《家常酒菜》。 我喜欢吃菠菜，菠菜的根甘甜如怡，菠菜的叶爽滑微麻。吃菠菜可以滋阴护肝，促进生长发育，增强抗病能力，要不大力水手卜派怎么也喜欢吃菠菜呢? 春之味也实在太多，要是想增口福那就可以尽快去尝鲜。也别等这场春雨散去了，因为舌头和肠胃早已等不及了。还要知道，应季蔬菜吃得好，延年益寿不变老。","link":"/posts/334c89a7.html"},{"title":"爬虫 | 抓取微信公众号阅读量（python3 + mongdb）","text":"声明：此文件内容只适合个人学习参考，不得作为商业用途。谢谢！ 截止到 2019年08月19日18:21:38 亲测可用。 需要的环境：python3 + mongdb 需要修改的部分 是代码中的 # 0，#1，#2，#3，具体参照代码部分。 参数修改说明: #0 mangodb 数据存储配置 #1 微信公众平台参数 找到“新建图文素材” “检查” 查看网络请求。 搜索要找的公众号： 回车，点击出现的公众号，右侧的 Network,则出现相关url： 找到url 中出现的参数： #2 通过 代理服务器 获取参数：我用的是 Charles。 #3 设置抓取的开始页码。 说明：如果抓了一会出现没有数据，说明数据失效，请重新设置 #2 和 #3 部分即可。如果经过一段时间重新设置啥也不起作用，说明 请求频繁，微信被拒绝。可更换微信公众号，重新设置 #1，#2 和 #3。 爬虫文件1: 存储到mangodbimport requestsimport timeimport jsonfrom pymongo import MongoClient#from requests.packages.urllib3.exceptions import InsecureRequestWarning #requests.packages.urllib3.disable_warnings(InsecureRequestWarning)# -------------配置信息开始---------------------------# 0# mango 数据库名称this_mango_base_name= &quot;lianTong_Wx&quot;# 数据存储名称this_sheetName = &quot;孙三苗&quot;# 1# agent 【自己改一次就行】this_Agent = &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36&quot;# 从公众平台获取的信息this_Cookie = &quot;RK=YDxkyyTtcC; ptcz=5c28ad19691371f1f2215899b9c32bd41eee2f920b082a1fb630a8bf8c838f43; ua_id=LEnm9PHfiX941k4PAAAAANbhfiV9BSOuTypE9Grfwz0=; mm_lang=zh_CN; pgv_pvi=9484698624; pgv_pvid=1604216750; o_cookie=326158775; pac_uid=1_326158775; tvfe_boss_uuid=6e82e2762fc3c7e1; noticeLoginFlag=1; XWINDEXGREY=0; eas_sid=41N5l6P2U8m333r9Z7m056I1P5; ied_qq=o0326158775; _ga=GA1.2.1224445687.1562834085; wxuin=62926310217144; ts_uid=3085165680; pgv_si=s326170624; cert=2q9C18dlNtPHEB7jMiyM5e3vbxOVI0Y1; mmad_session=de6452ccbec185104e09c96b6993ee72fe140a098bd64db7c78233f53cc8fd6c6a607ced639a08f8421fe431555d7920369bce0e8d10f4589b5d6057272b6316042b9f59e6af1c07d34af196ba6f497fee4a1ff43b1a6e9ba596f1c2b5cf87ca11de1c56c245721266e7088080fefde3; pgv_info=ssid=s5300444549; sig=h014e6e70ba9db8f575b44f947a9234bb6bedd280a9248533ebfa7446fe06cd7e32a6aea962898dc01c; ptisp=cnc; rewardsn=; wxtokenkey=777; remember_acct=928596269%40qq.com; qm_authimgs_id=1; qqmusic_uin=; qqmusic_key=; qqmusic_fromtag=; openid2ticket_oq4qKuKX1TaomkzwMuzxbHHFUzl8=pG6irwxD2rBTETfrMgA2FuaviyQgyaylv/ZctG7dHvA=; qm_verifyimagesession=h01c9563c5a0d70f34421e35a13e9940408c28320751d500621992ffb48d288a2d5cfe5db77a58e0453; uuid=efb1a396d6b9523590e50a287ce2526e; data_bizuin=3096087211; bizuin=3001031126; data_ticket=6B1hXI/GGiMgCSvAlhkIgds5AB3ObpyvSNjUgEgBZJmswjt1VlnnUxPNyFGW9hJC; slave_sid=ZzNTOHJ3UFBTYWJKcXY5eVhoRTlPa2tIazhuSjBJaW85RlRJTVNJZVNBbnRYYVFjTW1ZaTNvWG1GMGJ1eTdSMEtGamIyblo4OHdLMU04eFF6MlB0RWhUQTRKMkRMMHdFRHdvcEhhNV80Y0NYQ1NKa3piTUFJQ3dWbGpGN3FZc1N2Y1dja3Y2eDlhVnhnNEVO; slave_user=gh_99ec35f7100f; xid=b3cf27a3c009e2e32e56d1e75ac944eb&quot;# 账户tokenthis_token = &quot;1866865635&quot;# 公众号独一无二的一个idthis_fakeid = &quot;MjM5NzU2OTgyMg==&quot;# 2# fillder 中取得一些不变得信息# req_id = &quot;0614ymV0y86FlTVXB02AXd8p&quot;# uin 【自己改一次就行】this_uin = &quot;MTc5MTY3NzkwMA%3D%3D&quot;# 【常需要修改的参数】this_pass_ticket = &quot;I9kFuRkUW%252BCT%252BwMr8IMQPXRuhhoFnZ44lPE9%252FgnVO4GFfplB7aZDkJsphI4XZ92C&quot;# 【常需要修改的参数】this_appmsg_token = &quot;1022_zFB8INnBT9fTaZoqYFPJIaF9WCYQNEUt-78BI74Cqqc36xX3HTdkZYMeFSWJkfblkDknIUugRx_Xj5cW&quot;# 【常需要修改的参数】this_key = &quot;c4663b7b314f3cd81aa79b55defa7b0abdc184895aa16e454eef7daddeb9b49ccd82c37ea3fb662e84fd497bf1c68b027b961460b1daf660b21c23ced6444aa17209b89f80dcf714d8466f5ec2f1880a&quot;# 3# 【常需要修改的参数】 开始页码begin_page = 1# -------------配置信息结束--------------------------# 目标urlurl = &quot;https://mp.weixin.qq.com/cgi-bin/appmsg&quot;Cookie = this_Cookieheaders = { &quot;Cookie&quot;: Cookie, &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.3 Safari/605.1.15&quot;,} &quot;&quot;&quot;需要提交的data以下个别字段是否一定需要还未验证。注意修改yourtoken,numbernumber表示从第number页开始爬取，为5的倍数，从0开始。如0、5、10……token可以使用Chrome自带的工具进行获取fakeid是公众号独一无二的一个id，等同于后面的__biz&quot;&quot;&quot;token = this_tokenfakeid = this_fakeid# type在网页中会是10，但是无法取到对应的消息link地址，改为9就可以了type = '9'data1 = { &quot;token&quot;: token, &quot;lang&quot;: &quot;zh_CN&quot;, &quot;f&quot;: &quot;json&quot;, &quot;ajax&quot;: &quot;1&quot;, &quot;action&quot;: &quot;list_ex&quot;, &quot;begin&quot;: &quot;365&quot;, &quot;count&quot;: &quot;5&quot;, &quot;query&quot;: &quot;&quot;, &quot;fakeid&quot;: fakeid, &quot;type&quot;: type,} # 毫秒数转日期def getDate(times): # print(times) timearr = time.localtime(times) date = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, timearr) return date # 获取阅读数和点赞数def getMoreInfo(link): # 获得mid,_biz,idx,sn 这几个在link中的信息 mid = link.split(&quot;&amp;&quot;)[1].split(&quot;=&quot;)[1] idx = link.split(&quot;&amp;&quot;)[2].split(&quot;=&quot;)[1] sn = link.split(&quot;&amp;&quot;)[3].split(&quot;=&quot;)[1] _biz = link.split(&quot;&amp;&quot;)[0].split(&quot;_biz=&quot;)[1] # fillder 中取得一些不变得信息 #req_id = &quot;0614ymV0y86FlTVXB02AXd8p&quot; uin = this_uin pass_ticket = this_pass_ticket appmsg_token = this_appmsg_token key = this_key # 目标url url = &quot;http://mp.weixin.qq.com/mp/getappmsgext&quot; # 添加Cookie避免登陆操作，这里的&quot;User-Agent&quot;最好为手机浏览器的标识 phoneCookie = &quot;wxtokenkey=777; rewardsn=; wxuin=2529518319; devicetype=Windows10; version=62060619; lang=zh_CN; pass_ticket=4KzFV+kaUHM+atRt91i/shNERUQyQ0EOwFbc9/Oe4gv6RiV6/J293IIDnggg1QzC; wap_sid2=CO/FlbYJElxJc2NLcUFINkI4Y1hmbllPWWszdXRjMVl6Z3hrd2FKcTFFOERyWkJZUjVFd3cyS3VmZHBkWGRZVG50d0F3aFZ4NEFEVktZeDEwVHQyN1NrNG80NFZRdWNEQUFBfjC5uYLkBTgNQAE=&quot; headers = { &quot;Cookie&quot;: phoneCookie, &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 MicroMessenger/6.5.2.501 NetType/WIFI WindowsWechat QBCore/3.43.901.400 QQBrowser/9.0.2524.400&quot; } # 添加data，`req_id`、`pass_ticket`分别对应文章的信息，从fiddler复制即可。 data = { &quot;is_only_read&quot;: &quot;1&quot;, &quot;is_temp_url&quot;: &quot;0&quot;, &quot;appmsg_type&quot;: &quot;9&quot;, 'reward_uin_count':'0' } &quot;&quot;&quot; 添加请求参数 __biz对应公众号的信息，唯一 mid、sn、idx分别对应每篇文章的url的信息，需要从url中进行提取 key、appmsg_token从fiddler上复制即可 pass_ticket对应的文章的信息，也可以直接从fiddler复制 &quot;&quot;&quot; params = { &quot;__biz&quot;: _biz, &quot;mid&quot;: mid, &quot;sn&quot;: sn, &quot;idx&quot;: idx, &quot;key&quot;: key, &quot;pass_ticket&quot;: pass_ticket, &quot;appmsg_token&quot;: appmsg_token, &quot;uin&quot;: uin, &quot;wxtoken&quot;: &quot;777&quot;, } # 使用post方法进行提交 content = requests.post(url, headers=headers, data=data, params=params).json() # 提取其中的阅读数和点赞数 #print(content[&quot;appmsgstat&quot;][&quot;read_num&quot;], content[&quot;appmsgstat&quot;][&quot;like_num&quot;]) try: readNum = content[&quot;appmsgstat&quot;][&quot;read_num&quot;] print(readNum) except: readNum=0 try: likeNum = content[&quot;appmsgstat&quot;][&quot;like_num&quot;] print(likeNum) except: likeNum=0 try: comment_count = content[&quot;comment_count&quot;] print(&quot;true:&quot; + str(comment_count)) except: comment_count = -1 print(&quot;false:&quot; + str(comment_count)) # 歇3s，防止被封 time.sleep(3) return readNum, likeNum,comment_count # 最大值365，所以range中就应该是73,15表示前3页def getAllInfo(url, begin): # 拿一页，存一页 messageAllInfo = [] # begin 从0开始，365结束 data1[&quot;begin&quot;] = begin # 使用get方法进行提交 content_json = requests.get(url, headers=headers, params=data1, verify=False).json() time.sleep(3) # 返回了一个json，里面是每一页的数据 if &quot;app_msg_list&quot; in content_json: for item in content_json[&quot;app_msg_list&quot;]: # 提取每页文章的标题及对应的url url = item['link'] # print(url) readNum, likeNum ,comment_count= getMoreInfo(url) info = { &quot;title&quot;: item['title'], &quot;readNum&quot;: readNum, &quot;likeNum&quot;: likeNum, 'comment_count':comment_count, &quot;digest&quot;: item['digest'], &quot;date&quot;: getDate(item['update_time']), &quot;url&quot;: item['link'] } messageAllInfo.append(info) # print(messageAllInfo) return messageAllInfo # 写入数据库def putIntoMogo(urlList): host = &quot;127.0.0.1&quot; port = 27017 # 连接数据库 client = MongoClient(host, port) # 建库 lianTong_Wx = client[this_mango_base_name] # 建表 wx_message_sheet = lianTong_Wx[this_sheetName] # 存 if urlList is not None: for message in urlList: wx_message_sheet.insert_one(message) print(&quot;成功！&quot;) def main(): # messageAllInfo = [] # 爬10页成功，从1页开始 for i in range(begin_page, 365): begin = i * 5 messageAllInfo = getAllInfo(url, str(begin)) print('\\033[1;31;40m') print('*' * 50) print(&quot;\\033[7;31m第%s页！\\033[1;31;40m\\033[0m\\033[1;31;40m&quot; % i) # 字体颜色红色反白处理 print('*' * 50) print('\\033[0m') # print(&quot;第%s页&quot; % i) putIntoMogo(messageAllInfo) if __name__ == '__main__': main() 爬虫文件2 导出到excel 12345678910111213141516171819202122232425262728293031323334353637383940import pymongo from openpyxl import Workbooktitle = &quot;孙三苗&quot;;excel_QA = Workbook() # 建立一个工作本sheet = excel_QA.active # 激活sheet sheet.title = title # 对sheet进行命名sheet.cell(1, 1).value = '推送日期'sheet.cell(1, 2).value = '位置'sheet.cell(1, 3).value = '标题'sheet.cell(1, 4).value = '点赞数'sheet.cell(1, 5).value = '阅读量'#myclient = pymongo.MongoClient(&quot;mongodb://localhost:27017/&quot;)mydb = myclient[&quot;lianTong_Wx&quot;]mycol = mydb[title]count=2num=1dd=''for x in mycol.find(): # print('dd'+dd) if x['date'] == dd: num+=1 # print(&quot;true:&quot; + str(num)) else: num=1 # print(&quot;false:&quot; + str(num)) # print(&quot;mummmmmmm:&quot; + str(num)) sheet.cell(count, 1).value = x['date'] dd= x['date'] sheet.cell(count, 2).value = num sheet.cell(count, 3).value = x['title'] sheet.cell(count, 4).value = x['likeNum'] sheet.cell(count, 5).value = x['readNum'] count+=1 excel_QA.save(title+&quot;.xlsx&quot;)#保存 抓取结果： 有数字表示正常，其中: false：-1 是 未获取到评论数，如果不需要可忽略。 如果连续出现 false：-1 而没有数字，请重新从当前页抓取。比如 在 16页 下方出现了： 那么，请从17页重新抓取即可，需修改 #3 的数字。 mangdb 数据： 如有问题请在下方留言。 或关注我的公众号“孙三苗”，输入“联系方式”。获得进一步帮助。 或在公众号中输入关键词：微信爬虫包 获取源代码。","link":"/posts/eff5a4.html"},{"title":"由HTTP想到了什么","text":"一、HTTP是什么？ Hyper Text Transfer Protocol 超文本传输协议。 默认端口：80；HTTPS默认端口：443。 二、HTTP 的请求方式：get，post，head，delete，put，move。get和post的区别。 三、HTTP 状态码： 100-199 客户端。200-299 请求成功。300-399已经移动的文件。400-499 客户端错误。500-599 服务器错误。 200 ok ； 301 永久重定向； 403 禁止访问； 404 没有找到资源； 500 服务器错误，不能完成客户端请求。 502 坏的网关，代理服务出了问题。 503服务器不可用，超载、宕机； 504 网关超时。 四、HTTP报文： 1、请求行（请求方法：get；url：https://www.sunsanmiao.cn；http协议，状态码等）， 2、请求头部（键值对，客户端把请求信息告诉服务器） 3、空行。 4、请求报文。（起始行：状态；响应头部；空行；响应报文主体） 五：URL：统一资源定位符。协议；IP或域名；主机资源地址（/index.html）。 六、URI：统一资源标识符。用于标识某一互联网资源名称的字符串，唯一标识某一信息资源。 七：TCP/IP 网络协议。 TCP和UDP的区别。 1、TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接 2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付 3、TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的 UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等） 4、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信 5、TCP首部开销20字节;UDP的首部开销小，只有8个字节 6、TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道 八、DNS解析过程。 本地LDNS，host-》全球DNS服务器-》一层层解析cn-sunsanmiao.cn-&gt;www.sunsanmiao.cn-&gt;把解析出的IP发给本地LDNS-&gt;把记录缓存 九：HTTP协议工作原理。 客户端输入地址-》DNS解析-》建立TCP连接（三次握手）-》发送报文-》服务器响应返回http报文-》关闭HTTP连接，关闭TCP连接=》浏览器显示内容到屏幕上。","link":"/posts/419fa51d.html"},{"title":"花猫","text":"阳光暖暖的冬天，在院子的柴垛上发出一阵响动，走近一看，是花猫打了一个深深的哈欠，伸了一个长长的懒腰。然后又像死了一般睡过去。 家里养过很多猫，有公猫也有母猫。这些猫的毛色大抵都是棕色与白色相间，尖尖的耳朵，圆溜溜的眼睛，长长的尾巴。猫容俊俏，脾性温和。不过都时隔一年两载的一只接一只的走丢或意外离去，每次全家百般呵护的花猫的离开，都会难过一阵子。 冬天。猫爱睡觉，我家的猫也是如此。它每天围着饭桌吃饱饭后，除了跳到床角、衣服堆、针线篮，就是趴在外面朝阳的稻草垛，只要是可卧且暖和的地方，它都会蜷缩成一团，头和四爪摆在中间，尾巴时而轻摇，时而打卷，从远处瞧去就如一块毛绒绒的坐垫。它吃饱后舒舒服服的睡着时，任凭你怎么使唤都不好使，就连头也不抬给你看。 它白天睡，晚上活动一阵又接着睡。猫很聪明，也知道被窝里暖和，从冰冷的外面跑回来就直接跳到床上开始寻找入侵突破口，左拱拱右挠挠。当我觉察后，故意把被角裹得更加严实，任凭它在外面蹭来蹭去。要是真的溜进了被窝，便用脚把它蹬到床尾，权作一个热水袋，暖着脚。否则，就让它一晚蜷在外面，如逢雪天，满身湿漉漉的毛，只能睡在被窝外面。 冬天毫无防备的来，也悄无声息的走。春天万物复苏，是一个充满活力的季节。那“窝”了一冬的猫也开始不安生了：就连饭点都见不到它的身影，一天到晚“鬼混”在外面。看来它在外面有猫了，连家都不回了。深夜总会听到有猫在墙头或屋顶上撕心裂肺般长叫：“喵——呜——”。 春天的猫还有一烦人的事：掉毛。走到哪掉到哪。它呆过的房屋，屋里都会寻得一撮一撮的毛。掉毛掉的厉害了，一摇尾巴都会顺着尾风飘落一些。 说猫乖巧，也倒挺乖。你用手抚摸它的头，它就眯起小眼，甚是一副享受的样子。猫喜欢挠痒痒，抚摸它，它会很自然的趴下，挠挠它的下巴，挠挠它的胸腹。你看！它伸着爪子，露着脚掌上的肉垫，侧仰着头，正让你给它好好挠一挠，此时可以趁机摸摸它的小肉垫。猫也很喜欢在你腿脚上打着圈的来回蹭，这算是猫对你的一种挑逗，其实它就想让你给它挠痒痒。 夏天到了。为了凉快，它完全不在意自己的形象，只要有凉快的地，就侧身一躺，四肢一摊。说好的保持矜持，此刻毫无。能突显不矜持的它，更有美食可以诱惑。猫很馋。从河里捕来的小鱼小虾，它闻到腥味就开始不停地“喵呜”叫，不停地到处乱嗅乱找，在脚边蹭你，瞪着圆眼可怜楚楚地看你。要是看到你手里有什么好吃的，还不知道趁你不注意能跳多高呢。你给它吃的，叼着就跑到一边大口大口的吃起来。“馋猫”这个词就足以形容猫馋之极。 猫身体小，身手敏捷，不仅跳得高，还会飞檐走壁。爬树对它来说只是几秒钟的事，转身的功夫，就一溜烟似的从树底窜到了斜杈上。逮老鼠时，它也极具耐心，蜷着身子，瞪着双眼，一动不动的看着老鼠经过的犄角旮旯，只要目标出现，瞬间出击擒拿，然后叼着自己的猎物美美的饱餐一顿。 猫爱干净，下雨天从不出门，就会窝在家里睡起大懒觉，恐怕雨水沾湿它的毛。它平时喜欢舔自己的毛，不管是后腿上的，还是背上的。猫的舌头很粗糙，舔你手臂时，你会感觉到一些颗粒状的味蕾在皮肤上摩擦着。它也喜欢舔着自己的爪子摆弄着自己的脸和耳朵，一遍一遍的舔，一遍一遍的抹。家里说这是“猫洗脸”，说猫洗脸要来客人。 猫很顽皮，但也很任性。猫喜欢线团和圆球，如若让它找到一个，能在那里玩上半个多钟头。针线篮里的线团不知让它玩过多少次，只要家母做针线活它都会凑过去，赶都赶不走。说它任性吧，也不为过，他要是发了脾气，肯定是我把它惹急了，它就嘴和爪一起并用，要是被挠到了疼的很。它就想跑，哄不得，跑出去了，许久都不会回到家里。 说到猫，想起了虎。虽然猫和虎同属猫科动物，但老虎可不都会爬树，这和猫的身体敏捷性有关。这让我想起了看过的一部老虎向猫学艺的故事，纯属虚构。故事反映的是由于老虎过于自大，自以为本领学到家超过了猫师傅，想把猫吃掉，猫爬到河边的树上，老虎而因未学得爬树，爬了半截，最后坠入河中，冲走了。 都说猫有九条命。这“九”当然是虚数。中国文化中自古以“九”为大。比如“九五之尊”，“数九寒天”。的确猫的生命很顽强，寿命也较长。这与它的基因、生活习性和身手敏捷是分不开。你看！雨后的晴天，它转眼又跑到房瓦上弹起了钢琴，小脚闲情逸步，音乐清脆入耳。","link":"/posts/6fd2d282.html"},{"title":"解决shell 里执行cd 的问题","text":"在开发和学习的时候，经常要切换到固定的文件夹，于是写了个shell脚本用cd命令切换却发现目录切换不了。 代码如下： 12#!/bin/bash cd /Applications/MAMP/htdocs/test/ 解释：执行的时候是./test_dir.sh来执行的，这样执行的话终端会产生一个子shell（类似于C语言调用函数），子shell去执行我的脚本，在子shell中已经切换了目录了，但是子shell一旦执行完，马上退出，子shell中的变量和操作全部都收回。回到终端根本就看不到这个过程的变化。 验证一下： 12345#!/bin/bash history cd /Applications/MAMP/htdocs/test/ sleep 1 pwd 首先按照 ./test_dir.sh执行，这时候终端没有切换目录，history执行的结果是空的，说明子shell里面没有历史命令。 而pwd 输出结果： /Applications/MAMP/htdocs/test 解决方法：source test_dir.sh或者../test_dir.sh","link":"/posts/51347788.html"},{"title":"邻家那棵老香椿","text":"很早的时候邻家有棵老香椿树，叶繁枝茂。不过现在只剩下根部发出的新香椿树，那棵老由于拆屋盖房的被铲除，早已不在了。 老香椿树很丑，树干既没有杨树那么笔直，也没有梧桐那么光滑，它不但长得歪歪扭扭，还千疮百孔，有时树皮成片脱落，有时像人流脓一般，很黏很黏，久积成了树瘤。老香椿虽然长得是丑，但是它枝繁叶茂，新生的椿芽儿，闻起来香味浓郁，吃起来美味可口。 老香椿树长在邻家的大门进口里，门口前方是块空地，经过七八个石阶就可以走进门里。每到春末，郁郁葱葱的枝叶把门里的那块天遮得严严实实，由于地处较高，每天都会有微风光顾，那树下也就成了一块白天乘凉的好去处。 “大热天的，过来凉快凉快，我去拿凳子。”邻家奶奶总是热情招待在它的香椿树下，她坐在大门两边门槛石间镶嵌的门槛（方言音译“门嵌”，可拆卸，方便车辆进出，高三十公分左右），说着说着就起身就往屋里去，一趟拿来了好几个凳子，又一趟拿来了茶壶，暖水壶，还有几个茶碗。坐在树下，望着门外，喝着茶水，也别就这么以为是在闲聊家长里短，奶奶手里还有手工活，我的母亲和一些街坊也在做一些针线活：用麻绳纳鞋底，用袼褙做鞋帮，有时还铺上一块草席子做起衣裳来。有时我和几个小伙伴闲的没事也会在那里凑凑热闹，一玩就是大半天。 椿树像人一样也会生病，也有虫害，最令人厌恶的是树上的小虫儿。树干会流些油脂物，树叶会长一些黄白斑点，叶子上会有一些食叶虫，大量蚕食叶片，邻家爷爷会定时的喷洒一些农药，以除病虫害。除了这些，树上还会有些其他虫子，这就是令人厌恶的八夹（家）子（学名桑褐剌蛾，也俗称霍辣子）和毛毛虫，这两种虫子人见人厌，一旦接触到皮肤，那种滋味其疼其痒，难以忍耐。拿些风油精，清凉油之类的涂抹一下，忍上个二三天，才见好。还有一种害虫，不仅对人无害，还给我们这群调皮的孩子提供了一种玩乐，它就是花姑娘（一种蛾子，学名斑衣蜡蝉，也俗称花蹦蹦），其幼虫我们都叫椿猴子，身穿灰底白点的硬甲，蜷缩一团会装死，一听这名字就知道很有意思，这其中的乐趣，也只有孩子们自己懂。 你可以说不怎么见过香椿树，但你肯定吃过它的芽儿。清明前后，香椿开始发芽，到谷雨时节就可以对顶芽采摘，叶互生，采摘的芽可以做菜吃，搭配其他食材，可以炒着吃，煎着吃，腌着吃。这采摘过程，不仅获得美食，还为椿树多发侧枝起到促进作用。可谓一举二得。 提到椿芽我就忆起椿芽炒鸡蛋的美味，“雨前椿芽嫩如丝，雨后椿芽生木质”，其中这“雨”是指节气谷雨。 香椿的嫩芽是暗红色的，正如张晓风描述的那样“香椿芽刚冒上来的时候，是暗红色，仿佛可以看见一股地液喷上来，把每片嫩叶都充了血。” 椿芽被称为“树上蔬菜”，椿芽做菜约始于唐，确认于宋。宋《图经本草》“椿木实而叶香，可口取”。明《救荒本草》记载“采嫩芽炒熟，水浸淘净，油盐调食。”于丹在《人间有味是清欢》中提到“道家说，‘人法地，地法天，天法道，道法自然’。土地的规律是春生夏长秋收冬藏。所以，吃饭也应该顺应这个规律。”，并说到，春天食嫩芽，夏天吃叶子，秋天吃果子，冬天吃“根”，她的“春天，阳气升腾，可以吃点阳气旺盛的东西，比如香椿、柳芽等带嫩芽的食物”就是这个道理。 香椿树上下全是宝。除了前面所说的椿芽外，那树皮、树叶和树果都是很好的药材，树皮除热燥湿，涩肠止血，树叶消炎解毒，树果祛风散寒、止痛利泻。香椿中富含维生素C、维生素E、胡萝卜素和性激素物质，可以增强免疫力，抗衰老，润肤美容，滋阴补阳，其还含香椿素，可健脾开胃，增加食欲。其木材素有“中国桃花心木”之美誉，家里的大人们也提起过，其木材优良。香椿木材呈褐色并有红色环带，质地坚硬、纹理美丽、光泽顺滑、耐腐耐压、不裂不翘……总之，优良很多。宋苏轼也有诗曾盛赞:“椿木实而叶香可啖。” 提及木材，家父也懂很多，之所以这么说，是因为家父会些木工活儿，虽不以此来维持一家生计，但也算是一个木匠，家父在做木工时，我就在一边捣腾他的工具箱：有折尺、小刨子、大刨子、手锯、凿子、墨斗、钢尺…再说就是一筐子。在那时，这些稀奇的东西无不给我的童年增加许多乐趣。 阳春三月，正是采摘椿芽的好时节，那时，邻家爷爷就会采摘一些送给左邻右舍，家母就会下厨来个香椿煎鸡蛋，美美的地吃上一餐。到了秋冬季节，也只有它在那里孤单的站立着，有时会有几只鸟落在枝头，看着不免凄凉心酸，它也只有在静等到春来，绽放属于它自己的美。 由于房屋建造，不得不把老香椿树除掉，还好它的根又衍生出几株新的香椿树，现在在采摘时节，邻家除了即时食用和送人外，还会把一些装袋放在冰箱里冷藏起来，或者放在坛子里腌制起来，等到农忙或过节，拿出了再品尝其香醇可口。 现在嘴馋了就跑到饭馆，“服务员，有没有香椿煎鸡蛋？来上一盘！”“好嘞！”","link":"/posts/36d4e875.html"},{"title":"MySQL 性能优化方案","text":"mysql的优化同sql server相比，更为麻烦与复杂，同样的设置，在不同的环境下 ，由于内存，访问量，读写频率，数据差异等等情况，可能会出现不同的结果，因此简单地根据某个给出方案来配置mysql是行不通的，最好能使用 status信息对mysql进行具体的优化。 12345mysql&gt; show global status; 可以列出mysql服务器运行各种状态值，另外，查询mysql服务器配置信息语句：mysql&gt; show variables; 慢查询 连接数 key_buffer_size 临时表 open table情况 进程使用情况 查询缓存(query cache) 排序使用情况 文件打开数(open_files) 表锁情况 表扫描情况 以下数据均是本站点初始数据，系统设置都是默认值，目前看来可能对有些默认数值偏大，仅供参考。 一、慢查询 123456789101112131415161718mysql&gt; show variables like ‘slow%’;+———————+———————————+| Variable_name | Value |+———————+———————————+| slow_launch_time | 2 || slow_query_log | ON || slow_query_log_file | /www/server/data/mysql-slow.log |+———————+———————————+3 rows in set (0.00 sec)mysql&gt; show global status like ‘slow%’;+———————+——-+| Variable_name | Value |+———————+——-+| Slow_launch_threads | 0 || Slow_queries | 134 |+———————+——-+2 rows in set (0.00 sec) 配 置中打开了记录慢查询，执行时间超过2秒的即为慢查询，系统显示有134个慢查询，你可以分析慢查询日志，找出有问题的sql语句，慢查询时间不宜设置过长，否则意义不大，最好在5秒以内，如果你需要微秒级别的慢查询，可以考虑给mysql打补丁：http://www.percona.com /docs/wiki/release:start，记得找对应的版本。 打开慢查询日志可能会对系统性能有一点点影响，如果你的mysql是主－从结构，可以考虑打开其中一台从服务器的慢查询日志，这样既可以监控慢查询，对系统性能影响又小。 二、连接数 经 常会遇见”mysql: error 1040: too many connections”的情况，一种是访问量确实很高，mysql服务器抗不住，这个时候就要考虑增加从服务器分散读压力，另外一种情况是mysql配 置文件中max_connections值过小： 1234567mysql&gt; show variables like ‘max_connections’;+—————–+——-+| Variable_name | Value |+—————–+——-+| max_connections | 500 |+—————–+——-+1 row in set (0.00 sec) 这台mysql服务器最大连接数是500，然后查询一下服务器响应的最大连接数： 1234567mysql&gt; show global status like ‘max_used_connections’;+———————-+——-+| Variable_name | Value |+———————-+——-+| Max_used_connections | 8 |+———————-+——-+1 row in set (0.00 sec) mysql服务器过去的最大连接数是8，没有达到服务器连接数上限500，应该没有出现1040错误，比较理想的设置是 max_used_connections / max_connections * 100% ≈ 85% 最大连接数占上限连接数的85％左右，如果发现比例在10%以下，mysql服务器连接数上限设置的过高了。目前本数据库的连接数上限就过高了。 三、key_buffer_size key_buffer_size是对MyISAM表性能影响最大的一个参数，下面一台以MyISAM为主要存储引擎服务器的配置： 1234567show variables like ‘key_buffer_size’;+—————–+———-+| Variable_name | Value |+—————–+———-+| key_buffer_size | 33554432 |+—————–+———-+1 row in set (0.00 sec) 分配了300MB内存给key_buffer_size，我们再看一下key_buffer_size的使用情况： 12345678mysql&gt; show global status like ‘key_read%’;+——————-+——-+| Variable_name | Value |+——————-+——-+| Key_read_requests | 54081 || Key_reads | 4 |+——————-+——-+2 rows in set (0.00 sec) 一共有54081个索引读取请求，有4个请求在内存中没有找到直接从硬盘读取索引，计算索引未命中缓存的概率： key_cache_miss_rate ＝ key_reads / key_read_requests * 100% 比 如上面的数据，key_cache_miss_rate为0.007396%，13000个索引读取请求才有一个直接读硬盘，已经很好 了，key_cache_miss_rate在0.1%以下都很好（每1000个请求有一个直接读硬盘），如果key_cache_miss_rate在 0.01%以下的话，key_buffer_size分配的过多，可以适当减少。目前本数据库的key_buffer_size分配的过多。 mysql服务器还提供了key_blocks_*参数： 12345678mysql&gt; show global status like ‘key_blocks_u%’;+——————-+——-+| Variable_name | Value |+——————-+——-+| Key_blocks_unused | 26720 || Key_blocks_used | 72 |+——————-+——-+2 rows in set (0.00 sec) key_blocks_unused 表示未使用的缓存簇(blocks)数，key_blocks_used表示曾经用到的最大的blocks数，当所有缓存都用到s3hi，要么 增加key_buffer_size，要么就是过渡索引了，把缓存占满了。比较理想的设置： key_blocks_used / (key_blocks_unused + key_blocks_used) * 100% ≈ 80% 四、临时表 123456789show global status like ‘created_tmp%’;+————————-+——-+| Variable_name | Value |+————————-+——-+| Created_tmp_disk_tables | 576 || Created_tmp_files | 5 || Created_tmp_tables | 770 |+————————-+——-+3 rows in set (0.00 sec) 每次创建临时表，created_tmp_tables增加，如果是在磁盘上创建临时表，created_tmp_disk_tables也增加,created_tmp_files表示mysql服务创建的临时文件文件数，比较理想的配置是： created_tmp_disk_tables/created_tmp_tables * 100% &lt;= 25%比如上面的服务器created_tmp_disk_tables / created_tmp_tables * 100% ＝ 74.8%，在这一点上本数据库需要优化。我们再看一下mysql服务器对临时表的配置： 12345678mysql&gt; show variables where variable_name in (‘tmp_table_size’, ‘max_heap_table_size’);+———————+———-+| Variable_name | Value |+———————+———-+| max_heap_table_size | 16777216 || tmp_table_size | 33554432 |+———————+———-+2 rows in set (0.00 sec) 只有16MB以下的临时表才能全部放内存，超过的就会用到硬盘临时表。 五、open table情况 12345678show global status like ‘open%tables%’;+—————+——-+| Variable_name | Value |+—————+——-+| Open_tables | 36 || Opened_tables | 90 |+—————+——-+2 rows in set (0.00 sec) open_tables 表示打开表的数量，opened_tables表示打开过的表数量，如果opened_tables数量过大，说明配置中 table_open_cache(5.1.3之前这个值叫做table_cache)值可能太小，我们查询一下服务器table_cache值： 1234567mysql&gt; show variables like ‘table_open_cache’;+——————+——-+| Variable_name | Value |+——————+——-+| table_open_cache | 128 |+——————+——-+1 row in set (0.00 sec) 比较合适的值为： open_tables/opened_tables * 100% &gt;= 85% open_tables/table_cache * 100% &lt;= 95% 六、进程使用情况 12345678910mysql&gt; show global status like ‘thread%’;+——————-+——-+| Variable_name | Value |+——————-+——-+| Threads_cached | 4 || Threads_connected | 4 || Threads_created | 8 || Threads_running | 1 |+——————-+——-+4 rows in set (0.00 sec) 如 果我们在MySQL服务器配置文件中设置了thread_cache_size，当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁（前提是缓存数未达上限）。threads_created表示创建过的线程数，如果发现threads_created值过大的话，表明 MySQL服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中thread_cache_size值，查询服务器 thread_cache_size配置： 1234567mysql&gt; show variables like ‘thread_cache_size’;+——————-+——-+| Variable_name | Value |+——————-+——-+| thread_cache_size | 16 |+——————-+——-+1 row in set (0.00 sec) 本服务器还是挺健康的。 七、查询缓存(query cache) 1234567891011121314mysql&gt; show global status like ‘qcache%’;+————————-+———-+| Variable_name | Value |+————————-+———-+| Qcache_free_blocks | 31 || Qcache_free_memory | 16500528 || Qcache_hits | 19957 || Qcache_inserts | 5633 || Qcache_lowmem_prunes | 0 || Qcache_not_cached | 1263 || Qcache_queries_in_cache | 52 || Qcache_total_blocks | 151 |+————————-+———-+8 rows in set (0.00 sec) mysql查询缓存变量解释： qcache_free_blocks：缓存中相邻内存块的个数。数目大说明可能有碎片。flush query cache会对缓存中的碎片进行整理，从而得到一个空闲块。 qcache_free_memory：缓存中的空闲内存。 qcache_hits：每次查询在缓存中命中时就增大 qcache_inserts：每次插入一个查询时就增大。命中次数除以插入次数就是不中比率。 qcache_lowmem_prunes： 缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数。这个数字最好长时间来看；如果这个数字在不断增长，就表示可能碎片非常严重，或者内存 很少。（上面的 free_blocks和free_memory可以告诉您属于哪种情况） qcache_not_cached：不适合进行缓存的查询的数量，通常是由于这些查询不是 select 语句或者用了now()之类的函数。 qcache_queries_in_cache：当前缓存的查询（和响应）的数量。 qcache_total_blocks：缓存中块的数量。 我们再查询一下服务器关于query_cache的配置： 1234567891011mysql&gt; show variables like ‘query_cache%’;+——————————+———-+| Variable_name | Value |+——————————+———-+| query_cache_limit | 1048576 || query_cache_min_res_unit | 4096 || query_cache_size | 16777216 || query_cache_type | ON || query_cache_wlock_invalidate | OFF |+——————————+———-+5 rows in set (0.00 sec) 各字段的解释： query_cache_limit：超过此大小的查询将不缓存 query_cache_min_res_unit：缓存块的最小大小 query_cache_size：查询缓存大小 query_cache_type：缓存类型，决定缓存什么样的查询，示例中表示缓存 select sql_no_cache 查询 query_cache_wlock_invalidate：当有其他客户端正在对MYISAM表进行写操作时，如果查询在query cache中，是否返回cache结果还是等写操作完成再读表获取结果。 query_cache_min_res_unit的配置是一柄”双刃剑”，默认是4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费。 查询缓存碎片率 = qcache_free_blocks / qcache_total_blocks * 100% 如果查询缓存碎片率超过20%，可以用flush query cache整理缓存碎片，或者试试减小query_cache_min_res_unit，如果你的查询都是小数据量的话。 查询缓存利用率 = (query_cache_size – qcache_free_memory) / query_cache_size * 100% 查询缓存利用率在25%以下的话说明query_cache_size设置的过大，可适当减小；查询缓存利用率在80％以上而且qcache_lowmem_prunes &gt; 50的话说明query_cache_size可能有点小，要不就是碎片太多。 查询缓存命中率 = (qcache_hits – qcache_inserts) / qcache_hits * 100% 示例服务器 查询缓存碎片率 ＝ 20.46％，查询缓存利用率 ＝ 62.26％，查询缓存命中率 ＝ 1.94％，命中率很差，可能写操作比较频繁吧，而且可能有些碎片。 八、排序使用情况 12345678910mysql&gt; show global status like ‘sort%’;+——————-+——-+| Variable_name | Value |+——————-+——-+| Sort_merge_passes | 0 || Sort_range | 1654 || Sort_rows | 8293 || Sort_scan | 273 |+——————-+——-+4 rows in set (0.00 sec) sort_merge_passes 包括两步。MySQL 首先会尝试在内存中做排序，使用的内存大小由系统变量 sort_buffer_size 决定，如果它的大小不够把所有的记录都读到内存中，mysql 就会把每次在内存中排序的结果存到临时文件中，等 MySQL 找到所有记录之后，再把临时文件中的记录做一次排序。这再次排序就会增加 sort_merge_passes。实际上，mysql 会用另一个临时文件来存再次排序的结果，所以通常会看到 sort_merge_passes 增加的数值是建临时文件数的两倍。因为用到了临时文件，所以速度可能会比较慢，增加 sort_buffer_size 会减少 sort_merge_passes 和 创建临时文件的次数。但盲目的增加 sort_buffer_size 并不一定能提高速度。 另外，增加read_rnd_buffer_size(3.2.3是record_rnd_buffer_size)的值对排序的操作也有一点的好处，参见：http://www.mysqlperformanceblog.com/2007/07/24/what-exactly-is-read_rnd_buffer_size/ 九、文件打开数(open_files) 1234567mysql&gt; show global status like ‘open_files’;+—————+——-+| Variable_name | Value |+—————+——-+| Open_files | 74 |+—————+——-+1 row in set (0.00 sec) 1234567mysql&gt; show variables like ‘open_files_limit’;+——————+——-+| Variable_name | Value |+——————+——-+| open_files_limit | 65535 |+——————+——-+1 row in set (0.00 sec) 比较合适的设置：open_files / open_files_limit * 100% &lt;= 75％ 十、表锁情况 12345678mysql&gt; show global status like ‘table_locks%’;+———————–+——-+| Variable_name | Value |+———————–+——-+| Table_locks_immediate | 7929 || Table_locks_waited | 0 |+———————–+——-+2 rows in set (0.00 sec) table_locks_immediate表示立即释放表锁数，table_locks_waited表示需要等待的表锁数，如果 table_locks_immediate / table_locks_waited &gt; 5000，最好采用innodb引擎，因为innodb是行锁而myisam是表锁，对于高并发写入的应用innodb效果会好些。 十一、表扫描情况 123456789101112mysql&gt; show global status like ‘handler_read%’;+———————–+——-+| Variable_name | Value |+———————–+——-+| Handler_read_first | 142 || Handler_read_key | 8120 || Handler_read_next | 8273 || Handler_read_prev | 227 || Handler_read_rnd | 8149 || Handler_read_rnd_next | 38681 |+———————–+——-+6 rows in set (0.00 sec) 分析这几个值，我们可以查看当前索引的使用情况： Handler_read_first：索引中第一条被读的次数。如果较高，它表示服务器正执行大量全索引扫描；例如，SELECT col1 FROM foo，假定col1有索引（这个值越低越好）。 Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）。 Handler_read_next ：按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。 Handler_read_prev：按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY … DESC。 Handler_read_rnd ：根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救。 Handler_read_rnd_next：在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。 调出服务器完成的查询请求次数： 1234567mysql&gt; show global status like ‘com_select’;+—————+——-+| Variable_name | Value |+—————+——-+| Com_select | 7298 |+—————+——-+1 row in set (0.00 sec) 计算表扫描率： 表扫描率 ＝ handler_read_rnd_next/com_select 如果表扫描率超过4000，说明进行了太多表扫描，很有可能索引没有建好，增加read_buffer_size值会有一些好处，但最好不要超过8MB。","link":"/posts/c6c49214.html"},{"title":"golang - 包管理go modules","text":"包管理go modules 项目在不同服务器上运行，需要把需要的包一个一个的重新下载，这一节就来详细说明一下，如何更好的管理第三方安装包： 1、go modules 介绍 自从 Go 官方推出 1.11 之后，增加新的依赖管理模块并且更加易于管理项目中所需要的模块。模块是存储在文件树中的 Go 包的集合，其根目录中包含 go.mod 文件。 go.mod 文件定义了模块的模块路径，它也是用于根目录的导入路径，以及它的依赖性要求。每个依赖性要求都被写为模块路径和特定语义版本。 从 Go 1.11 开始，Go 允许在 $GOPATH/src外的任何目录下使用 go.mod 创建项目。在 $GOPATH/src 中，为了兼容性，Go 命令仍然在旧的 GOPATH 模式下运行。从 Go 1.13 开始，模块模式将成为默认模式。 建议：为了体验go 更多的功能和解决版本问题，请升级go 到最新版 模块是相关Go包的集合。modules是源代码交换和版本控制的单元。 go命令直接支持使用modules，包括记录和解析对其他模块的依赖性。modules替换旧的基于GOPATH的方法来指定在给定构建中使用哪些源文件。 如果你想直接使用modules而不需要从GOPATH过度，那么把“GO111MODULE”设置为on。 设置命令如下： 1go env -w GO111MODULE=on 为了防止下载包出现超时（需要翻墙的包），请设置环境变量 GOPROXY 1go env -w GOPROXY=https://goproxy.cn,direct 初始化 （1）使用命令初始化go.mod 1go mod init *** 说明：其中 *** 可以是自己项目的名字，以便区分。 现在我就是 使用项目名字来初始化，命令为：go mod init github.com/ms （2） 运行或编译 123go run main.go或go build main.go 运行以上代码后，会自动下载项目引用的包 （3）查看 文件 go.mod和 go.sum 以下是目前项目的文件内容 go.mod 文件： 1234567891011121314151617181920212223242526272829303132333435363738394041module github.com/msgo 1.13require (github.com/aaudis/GoRedisSession v0.0.0-20130613090635-98d82649209bgithub.com/anerg2046/snowflake v0.0.0-20190129041452-77ad75fdcc23github.com/asaskevich/govalidator v0.0.0-20200108200545-475eaeb16496github.com/buger/jsonparser v0.0.0-20191204142016-1a29609e0929github.com/fatih/structs v1.1.0github.com/gin-contrib/sessions v0.0.3github.com/gin-gonic/gin v1.5.0github.com/go-acme/lego/v3 v3.2.0github.com/go-ego/gpy v0.0.0-20200107145826-02f541a0f91cgithub.com/go-log/log v0.1.0github.com/gogo/protobuf v1.3.0github.com/goinggo/mapstructure v0.0.0-20140717182941-194205d9b4a9github.com/golang/protobuf v1.3.2github.com/google/uuid v1.1.1github.com/hashicorp/serf v0.8.2github.com/jinzhu/copier v0.0.0-20190924061706-b57f9002281agithub.com/jinzhu/gorm v1.9.11github.com/micro/cli v0.2.0github.com/micro/go-micro v1.17.1github.com/micro/go-plugins v1.5.1github.com/micro/micro v1.17.1 // indirectgithub.com/mwitkow/go-proto-validators v0.3.0github.com/pkg/errors v0.8.1github.com/satori/go.uuid v1.2.0github.com/spf13/cobra v0.0.5 // indirectgithub.com/valyala/fastjson v1.4.1golang.org/x/tools v0.0.0-20191029190741-b9c20aec41a5google.golang.org/genproto v0.0.0-20191108220845-16a3f7862a1agoogle.golang.org/grpc v1.25.1gopkg.in/cheggaaa/pb.v1 v1.0.28 // indirectgopkg.in/go-playground/validator.v9 v9.30.0gopkg.in/square/go-jose.v2 v2.3.1gopkg.in/yaml.v2 v2.2.4) 前面部分是包的名字，也就是import时需要写的部分，而空格之后的是版本号，版本号遵循如下规律： 12345X.Y.Z-pre.0.yyyymmddhhmmss-abcdefabcdefvX.0.0-yyyymmddhhmmss-abcdefabcdefvX.Y.(Z+1)-0.yyyymmddhhmmss-abcdefabcdefvX.Y.Z 版本号+时间戳+hash，我们自己指定版本时只需要制定版本号即可，没有版本tag的则需要找到对应commit的时间和hash值。默认使用最新版本的package。 go.sum 文件cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=cloud.google.com/go v0.37.4/go.mod h1:NHPJ89PdicEuT9hdPXMROBD91xc5uRDxsMtSB16k7hw=cloud.google.com/go v0.38.0/go.mod h1:990N+gfupTy94rShfmMCWGDn0LpTmnzTp2qbd1dvSRU=cloud.google.com/go v0.39.0/go.mod h1:rVLT6fkc8chs9sfPtFc1SBH6em7n+ZoXaG+87tDISts=cloud.google.com/go v0.44.1/go.mod h1:iSa0KzasP4Uvy3f1mN/7PiObzGgflwredwwASm/v6AU=cloud.google.com/go v0.44.2/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=cloud.google.com/go v0.45.1 h1:lRi0CHyU+ytlvylOlFKKq0af6JncuyoRh1J+QJBqQx0=cloud.google.com/go v0.45.1/go.mod h1:RpBamKRgapWJb87xiFSdk4g1CME7QZg3uwTez+TSTjc=cloud.google.com/go/bigquery v1.0.1/go.mod h1:i/xbL2UlR5RvWAURpBYZTtm/cXjCha9lbfbpx4poX+o=cloud.google.com/go/datastore v1.0.0/go.mod h1:LXYbyblFSglQ5pkeyhO+Qmw7ukd3C+pD7TKLgZqpHYE=cloud.google.com/go/pubsub v1.0.1/go.mod h1:R0Gpsv3s54REJCy4fxDixWD93lHJMoZTyQ2kNxGRt3I=contrib.go.opencensus.io/exporter/aws v0.0.0-20181029163544-2befc13012d0/go.mod h1:uu1P0UCM/6RbsMrgPa98ll8ZcHM858i/AD06a9aLRCA=contrib.go.opencensus.io/exporter/ocagent v0.4.12/go.mod h1:450APlNTSR6FrvC3CTRqYosuDstRB9un7SOx2k/9ckA=contrib.go.opencensus.io/exporter/ocagent v0.5.0/go.mod h1:ImxhfLRpxoYiSq891pBrLVhN+qmP8BTVvdH2YLs7Gl0=contrib.go.opencensus.io/exporter/stackdriver v0.12.1/go.mod h1:iwB6wGarfphGGe/e5CWqyUk/cLzKnWsOKPVW3no6OTw=contrib.go.opencensus.io/integrations/ocsql v0.1.4/go.mod h1:8DsSdjz3F+APR+0z0WkU1aRorQCFfRxvqjUUPMbF3fE=contrib.go.opencensus.io/resource v0.1.1/go.mod h1:F361eGI91LCmW1I/Saf+rX0+OFcigGlFvXwEGEnkRLA=github.com/Azure/azure-amqp-common-go/v2 v2.1.0/go.mod h1:R8rea+gJRuJR6QxTir/XuEd+YuKoUiazDC/N96FiDEU=github.com/Azure/azure-pipeline-go v0.1.8/go.mod h1:XA1kFWRVhSK+KNFiOhfv83Fv8L9achrP7OxIzeTn1Yg=github.com/Azure/azure-pipeline-go v0.1.9/go.mod h1:XA1kFWRVhSK+KNFiOhfv83Fv8L9achrP7OxIzeTn1Yg=github.com/Azure/azure-sdk-for-go v29.0.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=github.com/Azure/azure-sdk-for-go v30.1.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=github.com/Azure/azure-sdk-for-go v32.4.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=github.com/Azure/azure-service-bus-go v0.9.1/go.mod h1:yzBx6/BUGfjfeqbRZny9AQIbIe3AcV9WZbAdpkoXOa0=github.com/Azure/azure-storage-blob-go v0.6.0/go.mod h1:oGfmITT1V6x//CswqY2gtAHND+xIP64/qL7a5QJix0Y=github.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78/go.mod h1:LmzpDX56iTiv29bbRTIsUNlaFfuhWRQBWjQdVyAevI8=github.com/Azure/go-autorest v12.0.0+incompatible/go.mod h1:r+4oMnoxhatjLLJ6zxSWATqVooLgysK6ZNox3g/xq24=github.com/Azure/go-autorest/autorest v0.1.0/go.mod h1:AKyIcETwSUFxIcs/Wnq/C+kwCtlEYGUVd7FPNb2slmg=github.com/Azure/go-autorest/autorest v0.5.0/go.mod h1:9HLKlQjVBH6U3oDfsXOeVc56THsLPw1L03yban4xThw=github.com/Azure/go-autorest/autorest/adal v0.1.0/go.mod h1:MeS4XhScH55IST095THyTxElntu7WqB7pNbZo8Q5G3E=github.com/Azure/go-autorest/autorest/adal v0.2.0/go.mod h1:MeS4XhScH55IST095THyTxElntu7WqB7pNbZo8Q5G3E=github.com/Azure/go-autorest/autorest/azure/auth v0.1.0/go.mod h1:Gf7/i2FUpyb/sGBLIFxTBzrNzBo7aPXXE3ZVeDRwdpM=github.com/Azure/go-autorest/autorest/azure/cli v0.1.0/go.mod h1:Dk8CUAt/b/PzkfeRsWzVG9Yj3ps8mS8ECztu43rdU8U=github.com/Azure/go-autorest/autorest/date v0.1.0/go.mod h1:plvfp3oPSKwf2DNjlBjWF/7vwR+cUD/ELuzDCXwHUVA=github.com/Azure/go-autorest/autorest/mocks v0.1.0/go.mod h1:OTyCOPRA2IgIlWxVYxBee2F5Gr4kF2zd2J5cFRaIDN0=github.com/Azure/go-autorest/autorest/to v0.2.0/go.mod h1:GunWKJp1AEqgMaGLV+iocmRAJWqST1wQYhyyjXJ3SJc=github.com/Azure/go-autorest/autorest/validation v0.1.0/go.mod h1:Ha3z/SqBeaalWQvokg3NZAlQTalVMtOIAs1aGK7G6u8=github.com/Azure/go-autorest/logger v0.1.0/go.mod h1:oExouG+K6PryycPJfVSxi/koC6LSNgds39diKLz7Vrc=github.com/Azure/go-autorest/tracing v0.1.0/go.mod h1:ROEEAFwXycQw7Sn3DXNtEedEvdeRAgDr0izn4z5Ij88=github.com/BurntSushi/toml v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=github.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=github.com/DataDog/datadog-go v3.2.0+incompatible/go.mod h1:LButxg5PwREeZtORoXG3tL4fMGNddJ+vMq1mwgfaqoQ=github.com/GoogleCloudPlatform/cloudsql-proxy v0.0.0-20190605020000-c4ba1fdf4d36/go.mod h1:aJ4qN3TfrelA6NZ6AXsXRfmEVaYin3EDbSPJrKS8OXo=github.com/Microsoft/go-winio v0.4.14/go.mod h1:qXqCSQ3Xa7+6tgxaGTIe4Kpcdsi+P8jBhyzoq1bpyYA=github.com/Microsoft/go-winio v0.4.15-0.20190919025122-fc70bd9a86b5/go.mod h1:tTuCMEN+UleMWgg9dVx4Hu52b1bJo+59jBh3ajtinzw=github.com/Microsoft/hcsshim v0.8.6/go.mod h1:Op3hHsoHPAvb6lceZHDtd9OkTew38wNoXnJs8iY7rUg=github.com/Microsoft/hcsshim v0.8.7-0.20191101173118-65519b62243c/go.mod h1:7xhjOwRV2+0HXGmM0jxaEu+ZiXJFoVZOTfL/dmqbrD8=github.com/NYTimes/gziphandler v0.0.0-20170623195520-56545f4a5d46/go.mod h1:3wb06e3pkSAbeQ52E9H9iFoQsEEwGN64994WTCIhntQ=github.com/OpenDNS/vegadns2client v0.0.0-20180418235048-a3fa4a771d87/go.mod h1:iGLljf5n9GjT6kc0HBvyI1nOKnGQbNB66VzSNbK5iks=github.com/PuerkitoBio/purell v1.0.0/go.mod h1:c11w/QuzBsJSee3cPx9rAFu61PvFxuPbtSwDGJws/X0=github.com/PuerkitoBio/urlesc v0.0.0-20160726150825-5bd2802263f2/go.mod h1:uGdkoq3SwY9Y+13GIhn11/XLaGBb4BfwItxLd5jeuXE=github.com/RoaringBitmap/roaring v0.4.7/go.mod h1:8khRDP4HmeXns4xIj9oGrKSz7XTQiJx2zgh7AcNke4w=github.com/Shopify/sarama v1.19.0/go.mod h1:FVkBWblsNy7DGZRfXLU0O9RCGt5g3g3yEuWXgklEdEo=github.com/Shopify/sarama v1.24.1/go.mod h1:fGP8eQ6PugKEI0iUETYYtnP6d1pH/bdDMTel1X5ajsU=github.com/Shopify/toxiproxy v2.1.4+incompatible/go.mod h1:OXgGpZ6Cli1/URJOF1DMxUHB2q5Ap20/P/eIdh4G0pI=github.com/aaudis/GoRedisSession v0.0.0-20130613090635-98d82649209b h1:a4faxboXbaHiGw2DB21UkMsqmV/KqBrPYB7A20JinVs=github.com/aaudis/GoRedisSession v0.0.0-20130613090635-98d82649209b/go.mod h1:uiBI40qoHjROfdIP7lr1D6d/99Q8i/cOZIf8HHcWi6A=github.com/abbot/go-http-auth v0.4.1-0.20181019201920-860ed7f246ff/go.mod h1:Cz6ARTIzApMJDzh5bRMSUou6UMSp0IEXg9km/ci7TJM=github.com/afex/hystrix-go v0.0.0-20180502004556-fa1af6a1f4f5/go.mod h1:SkGFH1ia65gfNATL8TAiHDNxPzPdmEL5uirI2Uyuz6c=github.com/akamai/AkamaiOPEN-edgegrid-golang v0.9.0/go.mod h1:zpDJeKyp9ScW4NNrbdr+Eyxvry3ilGPewKoXw3XGN1k=github.com/alangpierce/go-forceexport v0.0.0-20160317203124-8f1d6941cd75/go.mod h1:uAXEEpARkRhCZfEvy/y0Jcc888f9tHCc1W7/UeEtreE=github.com/alcortesm/tgz v0.0.0-20161220082320-9c5fe88206d7/go.mod h1:6zEj6s6u/ghQa61ZWa/C2Aw3RkjiTBOix7dkqa1VLIs=github.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=github.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=github.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=github.com/aliyun/alibaba-cloud-sdk-go v0.0.0-20190808125512-07798873deee/go.mod h1:myCDvQSzCW+wB1WAlocEru4wMGJxy+vlxHdhegi1CDQ=github.com/aliyun/aliyun-oss-go-sdk v0.0.0-20190307165228-86c17b95fcd5/go.mod h1:T/Aws4fEfogEE9v+HPhhw+CntffsBHJ8nXQCwKr0/g8=github.com/anacrolix/envpprof v0.0.0-20180404065416-323002cec2fa/go.mod h1:KgHhUaQMc8cC0+cEflSgCFNFbKwi5h54gqtVn8yhP7c=github.com/anacrolix/envpprof v1.0.0/go.mod h1:KgHhUaQMc8cC0+cEflSgCFNFbKwi5h54gqtVn8yhP7c=github.com/anacrolix/missinggo v1.1.2-0.20190815015349-b888af804467/go.mod h1:MBJu3Sk/k3ZfGYcS7z18gwfu72Ey/xopPFJJbTi5yIo=github.com/anacrolix/missinggo v1.2.1/go.mod h1:J5cMhif8jPmFoC3+Uvob3OXXNIhOUikzMt+uUjeM21Y=github.com/anacrolix/missinggo/perf v1.0.0/go.mod h1:ljAFWkBuzkO12MQclXzZrosP5urunoLS0Cbvb4V0uMQ=github.com/anacrolix/sync v0.2.0/go.mod h1:BbecHL6jDSExojhNtgTFSBcdGerzNc64tz3DCOj/I0g=github.com/anacrolix/tagflag v0.0.0-20180109131632-2146c8d41bf0/go.mod h1:1m2U/K6ZT+JZG0+bdMK6qauP49QT4wE5pmhJXOKKCHw=github.com/anacrolix/utp v0.0.0-20180219060659-9e0e1d1d0572/go.mod h1:MDwc+vsGEq7RMw6lr2GKOEqjWny5hO5OZXRVNaBJ2Dk=github.com/anerg2046/snowflake v0.0.0-20190129041452-77ad75fdcc23 h1:aNu/FAJSUT9oAULFAMNDZnVq/+rNABZ+1Md5V1LV48s=github.com/anerg2046/snowflake v0.0.0-20190129041452-77ad75fdcc23/go.mod h1:mvrPrvBzZNQ3ZLEmli/o0wWBqu9yzWROczm6SfZJ7Fo=github.com/anmitsu/go-shlex v0.0.0-20161002113705-648efa622239/go.mod h1:2FmKhYUyUczH0OGQWaF5ceTx0UBShxjsH6f8oGKYe2c=github.com/apache/thrift v0.12.0/go.mod h1:cp2SuWMxlEZw2r+iP2GNCdIi4C1qmUzdZFSVb+bacwQ=github.com/armon/circbuf v0.0.0-20150827004946-bbbad097214e h1:QEF07wC0T1rKkctt1RINW/+RMTVmiwxETico2l3gxJA=github.com/armon/circbuf v0.0.0-20150827004946-bbbad097214e/go.mod h1:3U/XgcO3hCbHZ8TKRvWD2dDTCfh9M9ya+I9JpbB7O8o=github.com/armon/consul-api v0.0.0-20180202201655-eb2c6b5be1b6/go.mod h1:grANhF5doyWs3UAsr3K4I6qtAmlQcZDesFNEHPZAzj8=github.com/armon/go-metrics v0.0.0-20180917152333-f0300d1749da h1:8GUt8eRujhVEGZFFEjBj46YV4rDjvGrNxb0KMWYkL2I=github.com/armon/go-metrics v0.0.0-20180917152333-f0300d1749da/go.mod h1:Q73ZrmVTwzkszR9V5SSuryQ31EELlFMUz1kKyl939pY=github.com/armon/go-radix v0.0.0-20180808171621-7fddfc383310 h1:BUAU3CGlLvorLI26FmByPp2eC2qla6E1Tw+scpcg/to=github.com/armon/go-radix v0.0.0-20180808171621-7fddfc383310/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=github.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5/go.mod h1:wHh0iHkYZB8zMSxRWpUBQtwG5a7fFgvEO+odwuTv2gs=github.com/asaskevich/govalidator v0.0.0-20190424111038-f61b66f89f4a h1:idn718Q4B6AGu/h5Sxe66HYVdqdGu2l9Iebqhi/AEoA=github.com/asaskevich/govalidator v0.0.0-20190424111038-f61b66f89f4a/go.mod h1:lB+ZfQJz7igIIfQNfa7Ml4HSf2uFQQRzpGGRXenZAgY=github.com/asaskevich/govalidator v0.0.0-20200108200545-475eaeb16496 h1:zV3ejI06GQ59hwDQAvmK1qxOQGB3WuVTRoY0okPTAv0=github.com/asaskevich/govalidator v0.0.0-20200108200545-475eaeb16496/go.mod h1:oGkLhpf+kjZl6xBf758TQhh5XrAeiJv/7FRz/2spLIg=github.com/asim/go-awsxray v0.0.0-20161209120537-0d8a60b6e205/go.mod h1:frVmN4PtXUuL1EbZn0uL4PHSTKNKFnbMpBIhngqMuNQ=github.com/asim/go-bson v0.0.0-20160318195205-84522947cabd/go.mod h1:L59ZX7HuzTbNzFBt8g3SJkRraj+GBOgvLAfJYJUcQ5w=github.com/aws/aws-sdk-go v1.15.27/go.mod h1:mFuSZ37Z9YOHbQEwBWztmVzqXrEkub65tZoCYDt7FT0=github.com/aws/aws-sdk-go v1.19.18/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=github.com/aws/aws-sdk-go v1.19.45/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=github.com/aws/aws-sdk-go v1.23.0/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=github.com/aws/aws-sdk-go v1.25.31/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=github.com/baiyubin/aliyun-sts-go-sdk v0.0.0-20180326062324-cfa1a18b161f/go.mod h1:AuiFmCCPBSrqvVMvuqFuk0qogytodnVFVSN5CeJB8Gc=github.com/beevik/ntp v0.2.0/go.mod h1:hIHWr+l3+/clUnF44zdK+CWW7fO8dR5cIylAQ76NRpg=github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=github.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=github.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=github.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=github.com/bgentry/speakeasy v0.1.0 h1:ByYyxL9InA1OWqxJqqp2A5pYHUrCiAL6K3J+LKSsQkY=github.com/bgentry/speakeasy v0.1.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=github.com/bitly/go-simplejson v0.5.0 h1:6IH+V8/tVMab511d5bn4M7EwGXZf9Hj6i2xSwkNEM+Y=github.com/bitly/go-simplejson v0.5.0/go.mod h1:cXHtHw4XUPsvGaxgjIAn8PhEWG9NfngEKAMDJEczWVA=github.com/blang/semver v3.1.0+incompatible/go.mod h1:kRBLl5iJ+tD4TcOOxsy/0fnwebNt5EWlYSAyrTnjyyk=github.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869/go.mod h1:Ekp36dRnpXw/yCqJaO+ZrUyxD+3VXMFFr56k5XYrpB4=github.com/boj/redistore v0.0.0-20180917114910-cd5dcc76aeff h1:RmdPFa+slIr4SCBg4st/l/vZWVe9QJKMXGO60Bxbe04=github.com/boj/redistore v0.0.0-20180917114910-cd5dcc76aeff/go.mod h1:+RTT1BOk5P97fT2CiHkbFQwkK3mjsFAP6zCYV2aXtjw=github.com/boltdb/bolt v1.3.1/go.mod h1:clJnj/oiGkjum5o1McbSZDSLxVThjynRyGBgiAx27Ps=github.com/boombuler/barcode v1.0.1-0.20190219062509-6c824513bacc/go.mod h1:paBWMcWSl3LHKBqUq+rly7CNSldXjb2rDl3JlRe0mD8=github.com/bradfitz/gomemcache v0.0.0-20190329173943-551aad21a668/go.mod h1:H0wQNHz2YrLsuXOZozoeDmnHXkNCRmMW0gwFWDfEZDA=github.com/bradfitz/gomemcache v0.0.0-20190913173617-a41fca850d0b/go.mod h1:H0wQNHz2YrLsuXOZozoeDmnHXkNCRmMW0gwFWDfEZDA=github.com/bradfitz/iter v0.0.0-20140124041915-454541ec3da2/go.mod h1:PyRFw1Lt2wKX4ZVSQ2mk+PeDa1rxyObEDlApuIsUKuo=github.com/bradfitz/iter v0.0.0-20190303215204-33e6a9893b0c/go.mod h1:PyRFw1Lt2wKX4ZVSQ2mk+PeDa1rxyObEDlApuIsUKuo=github.com/bradleypeabody/gorilla-sessions-memcache v0.0.0-20181103040241-659414f458e1/go.mod h1:dkChI7Tbtx7H1Tj7TqGSZMOeGpMP5gLHtjroHd4agiI=github.com/buger/jsonparser v0.0.0-20191204142016-1a29609e0929 h1:MW/JDk68Rny52yI0M0N+P8lySNgB+NhpI/uAmhgOhUM=github.com/buger/jsonparser v0.0.0-20191204142016-1a29609e0929/go.mod h1:tgcrVJ81GPSF0mz+0nu1Xaz0fazGPrmmJfJtxjbHhUQ=github.com/bwmarrin/discordgo v0.19.0/go.mod h1:O9S4p+ofTFwB02em7jkpkV8M3R0/PUVOwN61zSZ0r4Q=github.com/bwmarrin/discordgo v0.20.1/go.mod h1:O9S4p+ofTFwB02em7jkpkV8M3R0/PUVOwN61zSZ0r4Q=github.com/cenkalti/backoff v2.2.1+incompatible/go.mod h1:90ReRw6GdpyfrHakVjL/QHaoyV4aDUVVkXQJJJ3NXXM=github.com/cenkalti/backoff/v3 v3.0.0/go.mod h1:cIeZDE3IrqwwJl6VUwCN6trj1oXrTS4rc0ij+ULvLYs=github.com/census-instrumentation/opencensus-proto v0.2.0/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=github.com/cespare/xxhash/v2 v2.1.0 h1:yTUvW7Vhb89inJ+8irsUqiWjh8iT6sQPZiQzI6ReGkA=github.com/cespare/xxhash/v2 v2.1.0/go.mod h1:dgIUBU3pDso/gPgZ1osOZ0iQf77oPR28Tjxl5dIMyVM=github.com/cheekybits/genny v1.0.0 h1:uGGa4nei+j20rOSeDeP5Of12XVm7TGUd4dJA9RDitfE=github.com/cheekybits/genny v1.0.0/go.mod h1:+tQajlRqAUrPI7DOSpB0XAqZYtQakVtB7wXkRAgjxjQ=github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=github.com/clbanning/x2j v0.0.0-20191024224557-825249438eec/go.mod h1:jMjuTZXRI4dUb/I5gc9Hdhagfvm9+RyrPryS/auMzxE=github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=github.com/cloudflare/cloudflare-go v0.10.2/go.mod h1:qhVI5MKwBGhdNU89ZRz2plgYutcJ5PCekLxXn56w6SY=github.com/cloudflare/cloudflare-go v0.10.6/go.mod h1:dcRl7AXBH5Bf7QFTBVc3TRzwvotSeO4AlnMhuxORAX8=github.com/cloudflare/cloudflare-go v0.10.8/go.mod h1:+LCrBrz3ssRmKHnlTwQOUmi3tMcNi0H5UqpMUgKkwcg=github.com/containerd/cgroups v0.0.0-20190919134610-bf292b21730f/go.mod h1:OApqhQ4XNSNC13gXIwDjhOQxjWa/NxkwZXJ1EvqT0ko=github.com/containerd/console v0.0.0-20180822173158-c12b1e7919c1/go.mod h1:Tj/on1eG8kiEhd0+fhSDzsPAFESxzBBvdyEgyryXffw=github.com/containerd/containerd v1.3.0-beta.2.0.20190828155532-0293cbd26c69/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=github.com/containerd/containerd v1.3.0/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=github.com/containerd/continuity v0.0.0-20181203112020-004b46473808/go.mod h1:GL3xCUCBDV3CZiTSEKksMWbLE66hEyuu9qyDOOqM47Y=github.com/containerd/continuity v0.0.0-20190426062206-aaeac12a7ffc/go.mod h1:GL3xCUCBDV3CZiTSEKksMWbLE66hEyuu9qyDOOqM47Y=github.com/containerd/fifo v0.0.0-20190226154929-a9fb20d87448/go.mod h1:ODA38xgv3Kuk8dQz2ZQXpnv/UZZUHUCL7pnLehbXgQI=github.com/containerd/go-runc v0.0.0-20180907222934-5a6d9f37cfa3/go.mod h1:IV7qH3hrUgRmyYrtgEeGWJfWbgcHL9CSRruz2Vqcph0=github.com/containerd/ttrpc v0.0.0-20190828154514-0e0f228740de/go.mod h1:PvCDdDGpgqzQIzDW1TphrGLssLDZp2GuS+X5DkEJB8o=github.com/containerd/typeurl v0.0.0-20180627222232-a93fcdb778cd/go.mod h1:Cm3kwCdlkCfMSHURc+r6fwoGH6/F1hH3S4sg0rLFWPc=github.com/coreos/bbolt v1.3.3 h1:n6AiVyVRKQFNb6mJlwESEvvLoDyiTzXX7ORAUlkeBdY=github.com/coreos/bbolt v1.3.3/go.mod h1:iRUV2dpdMOn7Bo10OQBFzIJO9kkE559Wcmn+qkEiiKk=github.com/coreos/etcd v3.3.10+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=github.com/coreos/etcd v3.3.17+incompatible h1:f/Z3EoDSx1yjaIjLQGo1diYUlQYSBrrAQ5vP8NjwXwo=github.com/coreos/etcd v3.3.17+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=github.com/coreos/go-etcd v2.0.0+incompatible/go.mod h1:Jez6KQU2B/sWsbdaef3ED8NzMklzPG4d5KIOhIy30Tk=github.com/coreos/go-semver v0.2.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=github.com/coreos/go-semver v0.3.0 h1:wkHLiw0WNATZnSG7epLsujiMCgPAc9xhjJ4tgnAxmfM=github.com/coreos/go-semver v0.3.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=github.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=github.com/coreos/go-systemd v0.0.0-20190719114852-fd7a80b32e1f h1:JOrtw2xFKzlg+cbHpyrpLDmnN1HqhBfnX7WDiW7eG2c=github.com/coreos/go-systemd v0.0.0-20190719114852-fd7a80b32e1f/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=github.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f h1:lBNOc5arjvs8E5mO2tbpBpLoyyu8B6e44T7hJy6potg=github.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=github.com/cpu/goacmedns v0.0.1/go.mod h1:sesf/pNnCYwUevQEQfEwY0Y3DydlQWSGZbaMElOWxok=github.com/cpuguy83/go-md2man v1.0.10/go.mod h1:SmD6nW6nTyfqj6ABTjUi3V3JVMnlJmwcJI5acqYI6dE=github.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=github.com/creack/pty v1.1.7/go.mod h1:lj5s0c3V2DBrqTV7llrYr5NG6My20zk30Fl46Y7DoTY=github.com/davecgh/go-spew v0.0.0-20151105211317-5215b55f46b2/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=github.com/decker502/dnspod-go v0.2.0/go.mod h1:qsurYu1FgxcDwfSwXJdLt4kRsBLZeosEb9uq4Sy+08g=github.com/denisenkom/go-mssqldb v0.0.0-20190515213511-eb9f6a1743f3 h1:tkum0XDgfR0jcVVXuTsYv/erY2NnEDqwRojbxR1rBYA=github.com/denisenkom/go-mssqldb v0.0.0-20190515213511-eb9f6a1743f3/go.mod h1:zAg7JM8CkOJ43xKXIj7eRO9kmWm/TW578qo+oDO6tuM=github.com/devigned/tab v0.1.1/go.mod h1:XG9mPq0dFghrYvoBF3xdRrJzSTX1b7IQrvaL9mzjeJY=github.com/dgrijalva/jwt-go v3.2.0+incompatible h1:7qlOGliEKZXTDg6OTjfoBKDXWrumCAMpl/TFQ4/5kLM=github.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=github.com/dimchansky/utfbom v1.1.0/go.mod h1:rO41eb7gLfo8SF1jd9F8HplJm1Fewwi4mQvIirEdv+8=github.com/dnaeon/go-vcr v0.0.0-20180814043457-aafff18a5cc2/go.mod h1:aBB1+wY4s93YsC3HHjMBMrwTj2R9FHDzUr9KyGc8n1E=github.com/dnsimple/dnsimple-go v0.30.0/go.mod h1:O5TJ0/U6r7AfT8niYNlmohpLbCSG+c71tQlGr9SeGrg=github.com/docker/distribution v2.7.1+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=github.com/docker/docker v1.4.2-0.20190710153559-aa8249ae1b8b/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=github.com/docker/docker v1.4.2-0.20191101170500-ac7306503d23/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=github.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=github.com/docker/go-units v0.4.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=github.com/docker/spdystream v0.0.0-20160310174837-449fdfce4d96/go.mod h1:Qh8CwZgvJUkLughtfhJv5dyTYa91l1fOUCrgjqmcifM=github.com/docopt/docopt-go v0.0.0-20180111231733-ee0de3bc6815/go.mod h1:WwZ+bS3ebgob9U8Nd0kOddGdZWjyMGR8Wziv+TBNwSE=github.com/dustin/go-humanize v0.0.0-20180421182945-02af3965c54e h1:Fw7ZmgiklsLh5EQWyHh1sumKSCG1+yjEctIpGKib87s=github.com/dustin/go-humanize v0.0.0-20180421182945-02af3965c54e/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=github.com/eapache/go-resiliency v1.1.0/go.mod h1:kFI+JgMyC7bLPUVY133qvEBtVayf5mFgVsvEsIPBvNs=github.com/eapache/go-xerial-snappy v0.0.0-20180814174437-776d5712da21/go.mod h1:+020luEh2TKB4/GOp8oxxtq0Daoen/Cii55CzbTV6DU=github.com/eapache/queue v1.1.0/go.mod h1:6eCeP0CKFpHLu8blIFXhExK/dRa7WDZfr6jVFPTqq+I=github.com/eclipse/paho.mqtt.golang v1.2.0/go.mod h1:H9keYFcgq3Qr5OUJm/JZI/i6U7joQ8SYLhZwfeOo6Ts=github.com/eknkc/basex v1.0.0/go.mod h1:k/F/exNEHFdbs3ZHuasoP2E7zeWwZblG84Y7Z59vQRo=github.com/elazarl/goproxy v0.0.0-20170405201442-c4fc26588b6e/go.mod h1:/Zj4wYkgs4iZTTu3o/KG3Itv/qCCa8VVMlb3i9OVuzc=github.com/emicklei/go-restful v0.0.0-20170410110728-ff4f55a20633/go.mod h1:otzb+WCGbkyDHkqmQmT5YD2WR4BBwUdeQoFo8l/7tVs=github.com/emirpasic/gods v1.12.0/go.mod h1:YfzfFFoVP/catgzJb4IKIqXjX78Ha8FMSDh3ymbK86o=github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=github.com/erikstmartin/go-testdb v0.0.0-20160219214506-8d10e4a1bae5 h1:Yzb9+7DPaBjB8zlTR87/ElzFsnQfuHnVUVqpZZIcV5Y=github.com/erikstmartin/go-testdb v0.0.0-20160219214506-8d10e4a1bae5/go.mod h1:a2zkGnVExMxdzMo3M0Hi/3sEU+cWnZpSni0O6/Yb/P0=github.com/evanphx/json-patch v4.2.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=github.com/exoscale/egoscale v0.18.1/go.mod h1:Z7OOdzzTOz1Q1PjQXumlz9Wn/CddH0zSYdCF3rnBKXE=github.com/fatih/color v1.7.0 h1:DkWD4oS2D8LGGgTQ6IvwJJXSL5Vp2ffcQg58nFV38Ys=github.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=github.com/fatih/structs v1.1.0 h1:Q7juDM0QtcnhCpeyLGQKyg4TOIghuNXrkL32pHAUMxo=github.com/fatih/structs v1.1.0/go.mod h1:9NiDSp5zOcgEDl+j00MP/WkGVPOlPRLejGD8Ga6PJ7M=github.com/flynn/go-shlex v0.0.0-20150515145356-3f9db97f8568/go.mod h1:xEzjJPgXI435gkrCt3MPfRiAkVrwSbHsst4LCFVfpJc=github.com/forestgiant/sliceutil v0.0.0-20160425183142-94783f95db6c/go.mod h1:pFdJbAhRf7rh6YYMUdIQGyzne6zYL1tCUW8QV2B3UfY=github.com/fortytw2/leaktest v1.2.0/go.mod h1:jDsjWgpAGjm2CA7WthBh/CdZYEPF31XHquHwclZch5g=github.com/fortytw2/leaktest v1.3.0/go.mod h1:jDsjWgpAGjm2CA7WthBh/CdZYEPF31XHquHwclZch5g=github.com/franela/goreq v0.0.0-20171204163338-bcd34c9993f8/go.mod h1:ZhphrRTfi2rbfLwlschooIH4+wKKDR4Pdxhh+TRoA20=github.com/frankban/quicktest v1.4.1/go.mod h1:36zfPVQyHxymz4cH7wlDmVwDrJuljRB60qkgn7rorfQ=github.com/fsnotify/fsnotify v1.4.7 h1:IXs+QLmnXW2CcXuY+8Mzv/fWEsPGWxqefPtCP5CnV9I=github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=github.com/fsouza/go-dockerclient v1.4.4/go.mod h1:PrwszSL5fbmsESocROrOGq/NULMXRw+bajY0ltzD6MA=github.com/fsouza/go-dockerclient v1.6.0/go.mod h1:YWwtNPuL4XTX1SKJQk86cWPmmqwx+4np9qfPbb+znGc=github.com/ghodss/yaml v0.0.0-20150909031657-73d445a93680/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=github.com/ghodss/yaml v1.0.0 h1:wQHKEahhL6wmXdzwWG11gIVCkOv05bNOh+Rxn0yngAk=github.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=github.com/gin-contrib/sessions v0.0.3 h1:PoBXki+44XdJdlgDqDrY5nDVe3Wk7wDV/UCOuLP6fBI=github.com/gin-contrib/sessions v0.0.3/go.mod h1:8C/J6cad3Il1mWYYgtw0w+hqasmpvy25mPkXdOgeB9I=github.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=github.com/gin-gonic/gin v1.5.0 h1:fi+bqFAx/oLK54somfCtEZs9HeH1LHVoEPUgARpTqyc=github.com/gin-gonic/gin v1.5.0/go.mod h1:Nd6IXA8m5kNZdNEHMBd93KT+mdY3+bewLgRvmCsR2Do=github.com/gliderlabs/ssh v0.2.2/go.mod h1:U7qILu1NlMHj9FlMhZLlkCdDnU1DBEAqr0aevW3Awn0=github.com/globalsign/mgo v0.0.0-20181015135952-eeefdecb41b8/go.mod h1:xkRDCp4j0OGD1HRkm4kmhM+pmpv3AKq5SU7GMg4oO/Q=github.com/glycerine/go-unsnap-stream v0.0.0-20180323001048-9f0cb55181dd/go.mod h1:/20jfyN9Y5QPEAprSgKAUr+glWDY39ZiUEAYOEv5dsE=github.com/glycerine/goconvey v0.0.0-20180728074245-46e3a41ad493/go.mod h1:Ogl1Tioa0aV7gstGFO7KhffUsb9M4ydbEbbxpcEDc24=github.com/go-acme/lego/v3 v3.1.0/go.mod h1:074uqt+JS6plx+c9Xaiz6+L+GBb+7itGtzfcDM2AhEE=github.com/go-acme/lego/v3 v3.2.0 h1:z0zvNlL1niv/1qA06V5X1BRC5PeLoGKAlVaWthXQz9c=github.com/go-acme/lego/v3 v3.2.0/go.mod h1:074uqt+JS6plx+c9Xaiz6+L+GBb+7itGtzfcDM2AhEE=github.com/go-cmd/cmd v1.0.5/go.mod h1:y8q8qlK5wQibcw63djSl/ntiHUHXHGdCkPk0j4QeW4s=github.com/go-ego/gpy v0.0.0-20200107145826-02f541a0f91c h1:nBnQM3ht4PVAruEDEIVs3v6Xl2pCwOZwWuuBK4CXAUk=github.com/go-ego/gpy v0.0.0-20200107145826-02f541a0f91c/go.mod h1:XHtccmBUOwbRnjkNY/vOijl/XnNIvBH8d6gTUKWYwhA=github.com/go-errors/errors v1.0.1/go.mod h1:f4zRHt4oKfwPJE5k8C9vpYG+aDHdBFUsgrm6/TyX73Q=github.com/go-ini/ini v1.25.4/go.mod h1:ByCAeIL28uOIIG0E3PJtZPDL8WnHpFKFOtgjp+3Ies8=github.com/go-ini/ini v1.44.0/go.mod h1:ByCAeIL28uOIIG0E3PJtZPDL8WnHpFKFOtgjp+3Ies8=github.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=github.com/go-kit/kit v0.9.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=github.com/go-ldap/ldap v3.0.2+incompatible/go.mod h1:qfd9rJvER9Q0/D/Sqn1DfHRoBp40uXYvFoEVrNEPqRc=github.com/go-log/log v0.1.0 h1:wudGTNsiGzrD5ZjgIkVZ517ugi2XRe9Q/xRCzwEO4/U=github.com/go-log/log v0.1.0/go.mod h1:4mBwpdRMFLiuXZDCwU2lKQFsoSCo72j3HqBK9d81N2M=github.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=github.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=github.com/go-logr/logr v0.1.0/go.mod h1:ixOQHD9gLJUVQQ2ZOR7zLEifBX6tGkNJF4QyIY7sIas=github.com/go-openapi/jsonpointer v0.0.0-20160704185906-46af16f9f7b1/go.mod h1:+35s3my2LFTysnkMfxsJBAMHj/DoqoB9knIWoYG/Vk0=github.com/go-openapi/jsonreference v0.0.0-20160704190145-13c6e3589ad9/go.mod h1:W3Z9FmVs9qj+KR4zFKmDPGiLdk1D9Rlm7cyMvf57TTg=github.com/go-openapi/spec v0.0.0-20160808142527-6aced65f8501/go.mod h1:J8+jY1nAiCcj+friV/PDoE1/3eeccG9LYBs0tYvLOWc=github.com/go-openapi/swag v0.0.0-20160704191624-1d0bd113de87/go.mod h1:DXUve3Dpr1UfpPtxFw+EFuQ41HhCWZfha5jSVRG7C7I=github.com/go-playground/locales v0.12.1/go.mod h1:IUMDtCfWo/w/mtMfIE/IG2K+Ey3ygWanZIBtBW0W2TM=github.com/go-playground/locales v0.13.0 h1:HyWk6mgj5qFqCT5fjGBuRArbVDfE4hi8+e8ceBS/t7Q=github.com/go-playground/locales v0.13.0/go.mod h1:taPMhCMXrRLJO55olJkUXHZBHCxTMfnGwq/HNwmWNS8=github.com/go-playground/universal-translator v0.16.0 h1:X++omBR/4cE2MNg91AoC3rmGrCjJ8eAeUP/K/EKx4DM=github.com/go-playground/universal-translator v0.16.0/go.mod h1:1AnU7NaIRDWWzGEKwgtJRd2xk99HeFyHw3yid4rvQIY=github.com/go-redsync/redsync v1.3.1/go.mod h1:qxZwM5JOimfq8y98Wk2+c8dKtxJgG5/yIl2ODz2E5Dk=github.com/go-sql-driver/mysql v1.4.1 h1:g24URVg0OFbNUTx9qqY1IRZ9D9z3iPyi5zKhQZpNwpA=github.com/go-sql-driver/mysql v1.4.1/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=github.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=github.com/go-stomp/stomp v2.0.3+incompatible/go.mod h1:VqCtqNZv1226A1/79yh+rMiFUcfY3R109np+7ke4n0c=github.com/go-telegram-bot-api/telegram-bot-api v4.6.4+incompatible/go.mod h1:qf9acutJ8cwBUhm1bqgz6Bei9/C/c93FPDljKWwsOgM=github.com/go-test/deep v1.0.2-0.20181118220953-042da051cf31/go.mod h1:wGDj63lr65AM2AQyKZd/NYHGb0R+1RLqB8NKt3aSFNA=github.com/godbus/dbus v0.0.0-20190422162347-ade71ed3457e/go.mod h1:bBOAhwG1umN6/6ZUMtDFBMQR8jRg9O75tm9K00oMsK4=github.com/gofrs/uuid v3.2.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=github.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=github.com/gogo/protobuf v1.2.0/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=github.com/gogo/protobuf v1.2.1/go.mod h1:hp+jE20tsWTFYpLwKvXlhS1hjn+gTNwPg2I6zVXpSg4=github.com/gogo/protobuf v1.2.2-0.20190723190241-65acae22fc9d h1:3PaI8p3seN09VjbTYC/QWlUZdZ1qS1zGjy7LH2Wt07I=github.com/gogo/protobuf v1.2.2-0.20190723190241-65acae22fc9d/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=github.com/gogo/protobuf v1.3.0 h1:G8O7TerXerS4F6sx9OV7/nRfJdnXgHZu/S/7F2SN+UE=github.com/gogo/protobuf v1.3.0/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=github.com/goinggo/mapstructure v0.0.0-20140717182941-194205d9b4a9 h1:wqckanyE9qc/XnvnybC6SHOb8Nyd62QXAZOzA8twFig=github.com/goinggo/mapstructure v0.0.0-20140717182941-194205d9b4a9/go.mod h1:64ikIrMv84B+raz7akXOqbF7cK3/OQQ/6cClY10oy7A=github.com/goji/httpauth v0.0.0-20160601135302-2da839ab0f4d/go.mod h1:nnjvkQ9ptGaCkuDUx6wNykzzlUixGxvkme+H/lnzb+A=github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=github.com/golang/groupcache v0.0.0-20160516000752-02826c3e7903/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=github.com/golang/groupcache v0.0.0-20190702054246-869f871628b6/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=github.com/golang/groupcache v0.0.0-20191002201903-404acd9df4cc/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=github.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=github.com/golang/mock v1.3.1/go.mod h1:sBzyDLLjw3U8JLTeZvSv8jJB+tU5PVekmnlKIyFUx0Y=github.com/golang/protobuf v0.0.0-20161109072736-4bd1920723d7/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=github.com/golang/protobuf v1.3.0/go.mod h1:Qd/q+1AKNOZr9uGQzbzCmRO6sUih6GTPZv6a1/R87v0=github.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=github.com/golang/protobuf v1.3.2 h1:6nsPYzhq5kReh6QImI3k5qWzO4PEbvbIW2cwSfR/6xs=github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=github.com/golang/snappy v0.0.0-20180518054509-2e65f85255db/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=github.com/golang/snappy v0.0.1/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=github.com/gomodule/redigo v2.0.0+incompatible h1:K/R+8tc58AaqLkqG2Ol3Qk+DR/TlNuhuh457pBFPtt0=github.com/gomodule/redigo v2.0.0+incompatible/go.mod h1:B4C85qUVwatsJoIUNIfCRsp7qO0iAmpGFZ4EELWSbC4=github.com/google/btree v0.0.0-20180124185431-e89373fe6b4a/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=github.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=github.com/google/btree v1.0.0 h1:0udJVsspx3VBr5FwtLhQQtuAsVc79tTq0ocGIPAU6qo=github.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=github.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=github.com/google/go-github v17.0.0+incompatible/go.mod h1:zLgOLi98H3fifZn+44m+umXrS52loVEgC2AApnigrVQ=github.com/google/go-querystring v1.0.0/go.mod h1:odCYkC5MyYFN7vkCjXpyrEuKhc/BUO6wN/zVPAxq5ck=github.com/google/go-replayers/grpcreplay v0.1.0/go.mod h1:8Ig2Idjpr6gifRd6pNVggX6TC1Zw6Jx74AKp7QNH2QE=github.com/google/go-replayers/httpreplay v0.1.0/go.mod h1:YKZViNhiGgqdBlUbI2MwGpq4pXxNmhJLPHQ7cv2b5no=github.com/google/gofuzz v0.0.0-20161122191042-44d81051d367/go.mod h1:HP5RmnzzSNb993RKQDq4+1A4ia9nllfqcQFTQJedwGI=github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=github.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=github.com/google/martian v2.1.1-0.20190517191504-25dcb96d9e51+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=github.com/google/pprof v0.0.0-20181206194817-3ea8567a2e57/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=github.com/google/pprof v0.0.0-20190515194954-54271f7e092f/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=github.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=github.com/google/subcommands v1.0.1/go.mod h1:ZjhPrFU+Olkh9WazFPsl27BQ4UPiG37m3yTrtFlrHVk=github.com/google/uuid v1.0.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=github.com/google/uuid v1.1.1 h1:Gkbcsh/GbpXz7lPftLA3P6TYMwjCLYm83jiFQZF/3gY=github.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=github.com/google/wire v0.3.0/go.mod h1:i1DMg/Lu8Sz5yYl25iOdmc5CT5qusaa+zmRWs16741s=github.com/googleapis/gax-go v2.0.2+incompatible/go.mod h1:SFVmujtThgffbyetf+mdk2eWhX2bMyUtNHzFKcPA9HY=github.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=github.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=github.com/googleapis/gnostic v0.0.0-20170729233727-0c5108395e2d/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=github.com/googleapis/gnostic v0.3.1/go.mod h1:on+2t9HRStVgn95RSsFWFz+6Q0Snyqv1awfrALZdbtU=github.com/gophercloud/gophercloud v0.3.0/go.mod h1:vxM41WHh5uqHVBMZHzuwNOHh8XEoIEcSTewFxm1c5g8=github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=github.com/gopherjs/gopherjs v0.0.0-20181103185306-d547d1d9531e/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=github.com/gorilla/context v1.1.1 h1:AWwleXJkX/nhcU9bZSnZoi3h/qGYqQAGhq6zZe/aQW8=github.com/gorilla/context v1.1.1/go.mod h1:kBGZzfjB9CEq2AlWe17Uuf7NDRt0dE0s8S51q0aT7Yg=github.com/gorilla/handlers v1.4.2/go.mod h1:Qkdc/uu4tH4g6mTK6auzZ766c4CA0Ng8+o/OAirnOIQ=github.com/gorilla/mux v1.6.2/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=github.com/gorilla/mux v1.7.3/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=github.com/gorilla/securecookie v1.1.1 h1:miw7JPhV+b/lAHSXz4qd/nN9jRiAFV5FwjeKyCS8BvQ=github.com/gorilla/securecookie v1.1.1/go.mod h1:ra0sb63/xPlUeL+yeDciTfxMRAA+MP+HVt/4epWDjd4=github.com/gorilla/sessions v1.1.1/go.mod h1:8KCfur6+4Mqcc6S0FEfKuN15Vl5MgXW92AE8ovaJD0w=github.com/gorilla/sessions v1.1.3 h1:uXoZdcdA5XdXF3QzuSlheVRUvjl+1rKY7zBXL68L9RU=github.com/gorilla/sessions v1.1.3/go.mod h1:8KCfur6+4Mqcc6S0FEfKuN15Vl5MgXW92AE8ovaJD0w=github.com/gorilla/websocket v1.2.0/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=github.com/gorilla/websocket v1.4.0/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=github.com/gorilla/websocket v1.4.1/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=github.com/grpc-ecosystem/go-grpc-middleware v1.1.0/go.mod h1:f5nM7jw/oeRSadq3xCzHAvxcr8HZnzsqU6ILg/0NiiE=github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0/go.mod h1:8NvIoxWQoOIhqOTXgfV/d3M/q6VIi02HzZEHgUlZvzk=github.com/grpc-ecosystem/grpc-gateway v1.8.5/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=github.com/grpc-ecosystem/grpc-gateway v1.9.2 h1:S+ef0492XaIknb8LMjcwgW2i3cNTzDYMmDrOThOJNWc=github.com/grpc-ecosystem/grpc-gateway v1.9.2/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=github.com/h2non/parth v0.0.0-20190131123155-b4df798d6542/go.mod h1:Ow0tF8D4Kplbc8s8sSb3V2oUCygFHVp8gC3Dn6U4MNI=github.com/hako/branca v0.0.0-20180808000428-10b799466ada/go.mod h1:tOPn4gvKEUWqIJNE+zpTeTALaRAXnrRqqSnPlO3VpEo=github.com/hashicorp/consul/api v1.2.0/go.mod h1:1SIkFYi2ZTXUE5Kgt179+4hH33djo11+0Eo2XgTAtkw=github.com/hashicorp/consul/sdk v0.2.0/go.mod h1:VKf9jXwCTEY1QZP2MOLRhb5i/I/ssyNV1vwHyQBF0x8=github.com/hashicorp/errwrap v0.0.0-20141028054710-7554cd9344ce/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=github.com/hashicorp/errwrap v1.0.0 h1:hLrqtEDnRye3+sgx6z4qVLNuviH3MR5aQ0ykNJa/UYA=github.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=github.com/hashicorp/go-cleanhttp v0.5.0/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=github.com/hashicorp/go-cleanhttp v0.5.1/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=github.com/hashicorp/go-hclog v0.0.0-20180709165350-ff2cf002a8dd/go.mod h1:9bjs9uLqI8l75knNv3lV1kA55veR+WUPSiKIWcQHudI=github.com/hashicorp/go-hclog v0.8.0/go.mod h1:5CU+agLiy3J7N7QjHK5d05KxGsuXiQLrjA0H7acj2lQ=github.com/hashicorp/go-immutable-radix v1.0.0 h1:AKDB1HM5PWEA7i4nhcpwOrO2byshxBjXVn/J/3+z5/0=github.com/hashicorp/go-immutable-radix v1.0.0/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=github.com/hashicorp/go-msgpack v0.5.3 h1:zKjpN5BK/P5lMYrLmBHdBULWbJ0XpYR+7NGzqkZzoD4=github.com/hashicorp/go-msgpack v0.5.3/go.mod h1:ahLV/dePpqEmjfWmKiqvPkv/twdG7iPBM1vqhUKIvfM=github.com/hashicorp/go-multierror v0.0.0-20161216184304-ed905158d874/go.mod h1:JMRHfdO9jKNzS/+BTlxCjKNQHg/jZAft8U7LloJvN7I=github.com/hashicorp/go-multierror v1.0.0 h1:iVjPR7a6H0tWELX5NxNe7bYopibicUzc7uPribsnS6o=github.com/hashicorp/go-multierror v1.0.0/go.mod h1:dHtQlpGsu+cZNNAkkCN/P3hoUDHhCYQXV3UM06sGGrk=github.com/hashicorp/go-plugin v1.0.1/go.mod h1:++UyYGoz3o5w9ZzAdZxtQKrWWP+iqPBn3cQptSMzBuY=github.com/hashicorp/go-retryablehttp v0.5.4/go.mod h1:9B5zBasrRhHXnJnui7y6sL7es7NDiJgTc6Er0maI1Xs=github.com/hashicorp/go-rootcerts v1.0.0/go.mod h1:K6zTfqpRlCUIjkwsN4Z+hiSfzSTQa6eBIzfwKfwNnHU=github.com/hashicorp/go-rootcerts v1.0.1/go.mod h1:pqUvnprVnM5bf7AOirdbb01K4ccR319Vf4pU3K5EGc8=github.com/hashicorp/go-sockaddr v1.0.0/go.mod h1:7Xibr9yA9JjQq1JpNB2Vw7kxv8xerXegt+ozgdvDeDU=github.com/hashicorp/go-sockaddr v1.0.2 h1:ztczhD1jLxIRjVejw8gFomI1BQZOe2WoVOu0SyteCQc=github.com/hashicorp/go-sockaddr v1.0.2/go.mod h1:rB4wwRAUzs07qva3c5SdrY/NEtAUjGlgmH/UkBUC97A=github.com/hashicorp/go-syslog v1.0.0 h1:KaodqZuhUoZereWVIYmpUgZysurB1kBLX2j0MwMrUAE=github.com/hashicorp/go-syslog v1.0.0/go.mod h1:qPfqrKkXGihmCqbJM2mZgkZGvKG1dFdvsLplgctolz4=github.com/hashicorp/go-uuid v1.0.0/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=github.com/hashicorp/go-uuid v1.0.1/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=github.com/hashicorp/go-version v1.1.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=github.com/hashicorp/go.net v0.0.1 h1:sNCoNyDEvN1xa+X0baata4RdcpKwcMS6DH+xwfqPgjw=github.com/hashicorp/go.net v0.0.1/go.mod h1:hjKkEWcCURg++eb33jQU7oqQcI9XDCnUzHA0oac0k90=github.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=github.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=github.com/hashicorp/golang-lru v0.5.3 h1:YPkqC67at8FYaadspW/6uE0COsBxS2656RLEr8Bppgk=github.com/hashicorp/golang-lru v0.5.3/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=github.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=github.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=github.com/hashicorp/logutils v1.0.0 h1:dLEQVugN8vlakKOUE3ihGLTZJRB4j+M2cdTm/ORI65Y=github.com/hashicorp/logutils v1.0.0/go.mod h1:QIAnNjmIWmVIIkWDTG1z5v++HQmx9WQRO+LraFDTW64=github.com/hashicorp/mdns v1.0.0 h1:WhIgCr5a7AaVH6jPUwjtRuuE7/RDufnUvzIr48smyxs=github.com/hashicorp/mdns v1.0.0/go.mod h1:tL+uN++7HEJ6SQLQ2/p+z2pH24WQKWjBPkE0mNTz8vQ=github.com/hashicorp/memberlist v0.1.3/go.mod h1:ajVTdAv/9Im8oMAAj5G31PhhMCZJV2pPBoIllUwCN7I=github.com/hashicorp/memberlist v0.1.5 h1:AYBsgJOW9gab/toO5tEB8lWetVgDKZycqkebJ8xxpqM=github.com/hashicorp/memberlist v0.1.5/go.mod h1:ajVTdAv/9Im8oMAAj5G31PhhMCZJV2pPBoIllUwCN7I=github.com/hashicorp/serf v0.8.2 h1:YZ7UKsJv+hKjqGVUUbtE3HNj79Eln2oQ75tniF6iPt0=github.com/hashicorp/serf v0.8.2/go.mod h1:6hOLApaqBFA1NXqRQAsxw9QxuDEvNxSQRwA/JwenrHc=github.com/hashicorp/vault/api v1.0.4/go.mod h1:gDcqh3WGcR1cpF5AJz/B1UFheUEneMoIospckxBxk6Q=github.com/hashicorp/vault/sdk v0.1.13/go.mod h1:B+hVj7TpuQY1Y/GPbCpffmgd+tSEwvhkWnjtSYCaS2M=github.com/hashicorp/yamux v0.0.0-20180604194846-3520598351bb/go.mod h1:+NfK9FKeTrX5uv1uIXGdwYDTeHna2qgaIlx54MXqjAM=github.com/hashicorp/yamux v0.0.0-20181012175058-2f1d1f20f75d/go.mod h1:+NfK9FKeTrX5uv1uIXGdwYDTeHna2qgaIlx54MXqjAM=github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=github.com/huandu/xstrings v1.0.0/go.mod h1:4qWG/gcEcfX4z/mBDHJ++3ReCw9ibxbsNJbcucJdbSo=github.com/huandu/xstrings v1.2.0/go.mod h1:DvyZB1rfVYsBIigL8HwpZgxHwXozlTgGqn63UyNX5k4=github.com/hudl/fargo v1.3.0/go.mod h1:y3CKSmjA+wD2gak7sUSXTAoopbhU08POFhmITJgmKTg=github.com/iij/doapi v0.0.0-20190504054126-0bbf12d6d7df/go.mod h1:QMZY7/J/KSQEhKWFeDesPjMj+wCHReeknARU3wqlyN4=github.com/ijc/Gotty v0.0.0-20170406111628-a8b993ba6abd/go.mod h1:3LVOLeyx9XVvwPgrt2be44XgSqndprz1G18rSk8KD84=github.com/imdario/mergo v0.3.8 h1:CGgOkSJeqMRmt0D9XLWExdT4m4F1vd3FV3VPt+0VxkQ=github.com/imdario/mergo v0.3.8/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=github.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=github.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99/go.mod h1:1lJo3i6rXxKeerYnT8Nvf0QmHCRC1n8sfWVwXF2Frvo=github.com/jcmturner/gofork v0.0.0-20190328161633-dc7c13fece03/go.mod h1:MK8+TM0La+2rjBD4jE12Kj1pCCxK7d2LK/UM3ncEo0o=github.com/jessevdk/go-flags v1.4.0/go.mod h1:4FA24M0QyGHXBuZZK/XkWh8h0e1EYbRYJSGM75WSRxI=github.com/jinzhu/copier v0.0.0-20190924061706-b57f9002281a h1:zPPuIq2jAWWPTrGt70eK/BSch+gFAGrNzecsoENgu2o=github.com/jinzhu/copier v0.0.0-20190924061706-b57f9002281a/go.mod h1:yL958EeXv8Ylng6IfnvG4oflryUi3vgA3xPs9hmII1s=github.com/jinzhu/gorm v1.9.11 h1:gaHGvE+UnWGlbWG4Y3FUwY1EcZ5n6S9WtqBA/uySMLE=github.com/jinzhu/gorm v1.9.11/go.mod h1:bu/pK8szGZ2puuErfU0RwyeNdsf3e6nCX/noXaVxkfw=github.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=github.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=github.com/jinzhu/now v1.0.1 h1:HjfetcXq097iXP0uoPCdnM4Efp5/9MsM0/M+XOTeR3M=github.com/jinzhu/now v1.0.1/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=github.com/jmespath/go-jmespath v0.0.0-20160202185014-0b12d6b521d8/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=github.com/jmespath/go-jmespath v0.0.0-20180206201540-c2b33e8439af/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=github.com/joho/godotenv v1.3.0/go.mod h1:7hK45KPybAkOC6peb+G5yklZfMxEjkZhHbwpqxOKXbg=github.com/jonboulle/clockwork v0.1.0 h1:VKV+ZcuP6l3yW9doeqz6ziZGgcynBVQO+obU0+0hcPo=github.com/jonboulle/clockwork v0.1.0/go.mod h1:Ii8DK3G1RaLaWxj9trq07+26W01tbo22gdxWY5EU2bo=github.com/joncalhoun/qson v0.0.0-20170526102502-8a9cab3a62b1/go.mod h1:DFXrEwSRX0p/aSvxE21319menCBFeQO0jXpRj7LEZUA=github.com/json-iterator/go v0.0.0-20180612202835-f2b4162afba3/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=github.com/json-iterator/go v1.1.5/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=github.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=github.com/json-iterator/go v1.1.7/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=github.com/json-iterator/go v1.1.8 h1:QiWkFLKq0T7mpzwOTu6BzNDbfTE8OLrYhVKYMLF46Ok=github.com/json-iterator/go v1.1.8/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=github.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=github.com/jtolds/gls v4.2.1+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=github.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=github.com/juju/ratelimit v1.0.1/go.mod h1:qapgC/Gy+xNh9UxzV13HGGl/6UXNN+ct+vwSgWNm/qk=github.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=github.com/kevinburke/ssh_config v0.0.0-20190725054713-01f96b0aa0cd/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=github.com/kidstuff/mongostore v0.0.0-20181113001930-e650cd85ee4b/go.mod h1:g2nVr8KZVXJSS97Jo8pJ0jgq29P6H7dG0oplUA86MQw=github.com/kisielk/errcheck v1.1.0/go.mod h1:EZBBE59ingxPouuu3KfxchcWSUPOHkagtvWXihfKN4Q=github.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB+zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ+jE2L00=github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=github.com/klauspost/compress v1.8.2/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=github.com/klauspost/cpuid v1.2.0/go.mod h1:Pj4uuM528wm8OyEC2QMXAi2YiTZ96dNQPGgoMS4s3ek=github.com/kolo/xmlrpc v0.0.0-20190717152603-07c4ee3fd181/go.mod h1:o03bZfuBwAXHetKXuInt4S7omeXUu62/A845kiycsSQ=github.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=github.com/konsorten/go-windows-terminal-sequences v1.0.2/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=github.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=github.com/kr/pty v1.1.8/go.mod h1:O1sed60cT9XZ5uDucP5qwvh+TE3NnUj51EiZO/lmSfw=github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=github.com/labbsr0x/bindman-dns-webhook v1.0.2/go.mod h1:p6b+VCXIR8NYKpDr8/dg1HKfQoRHCdcsROXKvmoehKA=github.com/labbsr0x/goh v1.0.1/go.mod h1:8K2UhVoaWXcCU7Lxoa2omWnC8gyW8px7/lmO61c027w=github.com/leodido/go-urn v1.1.0/go.mod h1:+cyI34gQWZcE1eQU7NVgKkkzdXDQHr1dBMtdAPozLkw=github.com/leodido/go-urn v1.2.0 h1:hpXL4XnriNwQ/ABnpepYM/1vCLWNDfUNts8dX3xTG6Y=github.com/leodido/go-urn v1.2.0/go.mod h1:+8+nEpDfqqsY+g338gtMEUOtuK+4dEMhiQEgxpxOKII=github.com/lib/pq v1.1.1/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=github.com/lib/pq v1.2.0 h1:LXpIM/LZ5xGFhOpXAQUIMM1HdyqzVYM13zNdjCEEcA0=github.com/lib/pq v1.2.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=github.com/linode/linodego v0.10.0/go.mod h1:cziNP7pbvE3mXIPneHj0oRY8L1WtGEIKlZ8LANE4eXA=github.com/liquidweb/liquidweb-go v1.6.0/go.mod h1:UDcVnAMDkZxpw4Y7NOHkqoeiGacVLEIG/i5J9cyixzQ=github.com/lucas-clemente/quic-go v0.12.1/go.mod h1:UXJJPE4RfFef/xPO5wQm0tITK8gNfqwTxjbE7s3Vb8s=github.com/lucas-clemente/quic-go v0.13.1 h1:CxtJTXQIh2aboCPk0M6vf530XOov6DZjVBiSE3nSj8s=github.com/lucas-clemente/quic-go v0.13.1/go.mod h1:Vn3/Fb0/77b02SGhQk36KzOUmXgVpFfizUfW5WMaqyU=github.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=github.com/mailru/easyjson v0.0.0-20160728113105-d5b7844b561a/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=github.com/mailru/easyjson v0.0.0-20180730094502-03f2033d19d5/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=github.com/marten-seemann/chacha20 v0.2.0 h1:f40vqzzx+3GdOmzQoItkLX5WLvHgPgyYqFFIO5Gh4hQ=github.com/marten-seemann/chacha20 v0.2.0/go.mod h1:HSdjFau7GzYRj+ahFNwsO3ouVJr1HFkWoEwNDb4TMtE=github.com/marten-seemann/qpack v0.1.0/go.mod h1:LFt1NU/Ptjip0C2CPkhimBz5CGE3WGDAUWqna+CNTrI=github.com/marten-seemann/qtls v0.3.2/go.mod h1:xzjG7avBwGGbdZ8dTGxlBnLArsVKLvwmjgmPuiQEcYk=github.com/marten-seemann/qtls v0.4.1 h1:YlT8QP3WCCvvok7MGEZkMldXbyqgr8oFg5/n8Gtbkks=github.com/marten-seemann/qtls v0.4.1/go.mod h1:pxVXcHHw1pNIt8Qo0pwSYQEoZ8yYOOPXTCZLQQunvRc=github.com/mattn/go-colorable v0.0.9/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=github.com/mattn/go-colorable v0.1.2 h1:/bC9yWikZXAL9uJdulbSfyVNIR3n3trXl+v8+1sx8mU=github.com/mattn/go-colorable v0.1.2/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=github.com/mattn/go-isatty v0.0.3/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=github.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=github.com/mattn/go-isatty v0.0.9 h1:d5US/mDsogSGW37IV293h//ZFaeajb69h+EHFsv2xGg=github.com/mattn/go-isatty v0.0.9/go.mod h1:YNRxwqDuOph6SZLI9vUUz6OYw3QyUt7WiY2yME+cCiQ=github.com/mattn/go-isatty v0.0.10 h1:qxFzApOv4WsAL965uUPIsXzAKCZxN2p9UqdhFS4ZW10=github.com/mattn/go-isatty v0.0.10/go.mod h1:qgIWMr58cqv1PHHyhnkY9lrL7etaEgOFcMEpPG5Rm84=github.com/mattn/go-runewidth v0.0.2/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=github.com/mattn/go-runewidth v0.0.4 h1:2BvfKmzob6Bmd4YsL0zygOqfdFnK7GR4QL06Do4/p7Y=github.com/mattn/go-runewidth v0.0.4/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=github.com/mattn/go-sqlite3 v1.11.0 h1:LDdKkqtYlom37fkvqs8rMPFKAMe8+SgjbwZ6ex1/A/Q=github.com/mattn/go-sqlite3 v1.11.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=github.com/mattn/go-tty v0.0.0-20180219170247-931426f7535a/go.mod h1:XPvLUNfbS4fJH25nqRHfWLMa1ONC8Amw+mIA639KxkE=github.com/matttproud/golang_protobuf_extensions v1.0.1 h1:4hp9jkHxhMHkqkrB3Ix0jegS5sx/RkqARlsWZ6pIwiU=github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=github.com/memcachier/mc v2.0.1+incompatible/go.mod h1:7bkvFE61leUBvXz+yxsOnGBQSZpBSPIMUQSmmSHvuXc=github.com/mholt/certmagic v0.7.5/go.mod h1:91uJzK5K8IWtYQqTi5R2tsxV1pCde+wdGfaRaOZi6aQ=github.com/mholt/certmagic v0.8.3/go.mod h1:91uJzK5K8IWtYQqTi5R2tsxV1pCde+wdGfaRaOZi6aQ=github.com/micro/cli v0.2.0 h1:ut3rV5JWqZjsXIa2MvGF+qMUP8DAUTvHX9Br5gO4afA=github.com/micro/cli v0.2.0/go.mod h1:jRT9gmfVKWSS6pkKcXQ8YhUyj6bzwxK8Fp5b0Y7qNnk=github.com/micro/go-micro v1.16.0/go.mod h1:A0F58bHLh2m0LAI9QyhvmbN8c1cxhAZo3cM6s+iDsrM=github.com/micro/go-micro v1.17.1 h1:BhwC4Lnwr3hdci9T8kN5MEabKS+CT0QT0YH4hinTdNs=github.com/micro/go-micro v1.17.1/go.mod h1:klwUJL1gkdY1MHFyz+fFJXn52dKcty4hoe95Mp571AA=github.com/micro/go-plugins v1.5.1 h1:swcFD7ynCTUo98APqIEIbPu2XMd6yVGTnI8PqdnCwOQ=github.com/micro/go-plugins v1.5.1/go.mod h1:jcxejzJCAMH731cQHbS/hncyKe0rxAbzKkibj8glad4=github.com/micro/mdns v0.3.0 h1:bYycYe+98AXR3s8Nq5qvt6C573uFTDPIYzJemWON0QE=github.com/micro/mdns v0.3.0/go.mod h1:KJ0dW7KmicXU2BV++qkLlmHYcVv7/hHnbtguSWt9Aoc=github.com/micro/micro v1.16.0/go.mod h1:TO5Ng0KidbfRYIxVM4Q3deZ0A+qwRyP9WeXp+k2fWNA=github.com/micro/micro v1.17.1/go.mod h1:vFR/j5d3OyVLaWBSVMHfm1EBl4fO3mPUzhYzUZ/7ixo=github.com/micro/protoc-gen-micro v1.0.0 h1:qKh5S3I1RfenhIs5mqDFJLwRlRDlgin7XWiUKZbpwLM=github.com/micro/protoc-gen-micro v1.0.0/go.mod h1:C8ij4DJhapBmypcT00AXdb0cZ675/3PqUO02buWWqbE=github.com/miekg/dns v1.0.14/go.mod h1:W1PPwlIAgtquWBMBEV9nkV9Cazfe8ScdGz/Lj7v3Nrg=github.com/miekg/dns v1.1.3/go.mod h1:W1PPwlIAgtquWBMBEV9nkV9Cazfe8ScdGz/Lj7v3Nrg=github.com/miekg/dns v1.1.15/go.mod h1:W1PPwlIAgtquWBMBEV9nkV9Cazfe8ScdGz/Lj7v3Nrg=github.com/miekg/dns v1.1.22 h1:Jm64b3bO9kP43ddLjL2EY3Io6bmy1qGb9Xxz6TqS6rc=github.com/miekg/dns v1.1.22/go.mod h1:bPDLeHnStXmXAq1m/Ch/hvfNHr14JKNPMBo3VZKjuso=github.com/minio/highwayhash v1.0.0/go.mod h1:xQboMTeM9nY9v/LlAOxFctujiv5+Aq2hR5dxBpaMbdc=github.com/mitchellh/cli v1.0.0 h1:iGBIsUe3+HZ/AD/Vd7DErOt5sU9fa8Uj7A2s1aggv1Y=github.com/mitchellh/cli v1.0.0/go.mod h1:hNIlj7HEI86fIcpObd7a0FcrxTWetlwJDGcceTlRvqc=github.com/mitchellh/copystructure v1.0.0/go.mod h1:SNtv71yrdKgLRyLFxmLdkAbkKEFWgYaq1OVrnRcwhnw=github.com/mitchellh/go-homedir v1.0.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=github.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=github.com/mitchellh/go-testing-interface v0.0.0-20171004221916-a61a99592b77/go.mod h1:kRemZodwjscx+RGhAo8eIhFbs2+BFgRtFPeD/KE+zxI=github.com/mitchellh/go-testing-interface v1.0.0/go.mod h1:kRemZodwjscx+RGhAo8eIhFbs2+BFgRtFPeD/KE+zxI=github.com/mitchellh/go-vnc v0.0.0-20150629162542-723ed9867aed/go.mod h1:3rdaFaCv4AyBgu5ALFM0+tSuHrBh6v692nyQe3ikrq0=github.com/mitchellh/go-wordwrap v1.0.0/go.mod h1:ZXFpozHsX6DPmq2I0TCekCxypsnAUbP2oI0UX1GXzOo=github.com/mitchellh/gox v0.4.0/go.mod h1:Sd9lOJ0+aimLBi73mGofS1ycjY8lL3uZM3JPS42BGNg=github.com/mitchellh/hashstructure v1.0.0 h1:ZkRJX1CyOoTkar7p/mLS5TZU4nJ1Rn/F8u9dGS02Q3Y=github.com/mitchellh/hashstructure v1.0.0/go.mod h1:QjSHrPWS+BGUVBYkbTZWEnOh3G1DutKwClXU/ABz6AQ=github.com/mitchellh/iochan v1.0.0/go.mod h1:JwYml1nuB7xOzsp52dPpHFffvOCDupsG0QubkSMEySY=github.com/mitchellh/mapstructure v0.0.0-20160808181253-ca63d7c062ee/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=github.com/mitchellh/mapstructure v1.1.2 h1:fmNYVwqnSfB9mZU6OS2O6GsXM+wcskZDuKQzvN1EDeE=github.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=github.com/mitchellh/reflectwalk v1.0.0/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=github.com/modern-go/reflect2 v0.0.0-20180320133207-05fbef0ca5da/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=github.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=github.com/modern-go/reflect2 v1.0.1 h1:9f412s+6RmYXLWZSEzVVgPGK7C2PphHj5RJrvfx9AWI=github.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=github.com/morikuni/aec v0.0.0-20170113033406-39771216ff4c/go.mod h1:BbKIizmSmc5MMPqRYbxO4ZU0S0+P200+tUnFx7PXmsc=github.com/mschoch/smat v0.0.0-20160514031455-90eadee771ae/go.mod h1:qAyveg+e4CE+eKJXWVjKXM4ck2QobLqTDytGJbLLhJg=github.com/munnerz/goautoneg v0.0.0-20120707110453-a547fc61f48d/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=github.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=github.com/mwitkow/go-proto-validators v0.3.0 h1:2WkInbIheqmDevK9h0S/K6f0Os/HlTPGJeRwDAeQE1w=github.com/mwitkow/go-proto-validators v0.3.0/go.mod h1:ej0Qp0qMgHN/KtDyUt+Q1/tA7a5VarXUOUxD+oeD30w=github.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f/go.mod h1:ZdcZmHo+o7JKHSa8/e818NopupXU1YMK5fe1lsApnBw=github.com/namedotcom/go v0.0.0-20180403034216-08470befbe04/go.mod h1:5sN+Lt1CaY4wsPvgQH/jsuJi4XO2ssZbdsIizr4CVC8=github.com/nats-io/jwt v0.3.0 h1:xdnzwFETV++jNc4W1mw//qFyJGb2ABOombmZJQS4+Qo=github.com/nats-io/jwt v0.3.0/go.mod h1:fRYCDE99xlTsqUzISS1Bi75UBJ6ljOJQOAAu5VglpSg=github.com/nats-io/nats-server/v2 v2.1.0/go.mod h1:r5y0WgCag0dTj/qiHkHrXAcKQ/f5GMOZaEGdoxxnJ4I=github.com/nats-io/nats.go v1.8.1/go.mod h1:BrFz9vVn0fU3AcH9Vn4Kd7W0NpJ651tD5omQ3M8LwxM=github.com/nats-io/nats.go v1.9.1 h1:ik3HbLhZ0YABLto7iX80pZLPw/6dx3T+++MZJwLnMrQ=github.com/nats-io/nats.go v1.9.1/go.mod h1:ZjDU1L/7fJ09jvUSRVBR2e7+RnLiiIQyqyzEE/Zbp4w=github.com/nats-io/nkeys v0.0.2/go.mod h1:dab7URMsZm6Z/jp9Z5UGa87Uutgc2mVpXLC4B7TDb/4=github.com/nats-io/nkeys v0.1.0 h1:qMd4+pRHgdr1nAClu+2h/2a5F2TmKcCzjCDazVgRoX4=github.com/nats-io/nkeys v0.1.0/go.mod h1:xpnFELMwJABBLVhffcfd1MZx6VsNRFpEugbxziKVo7w=github.com/nats-io/nuid v1.0.1 h1:5iA8DT8V7q8WK2EScv2padNa/rTESc1KdnPw4TC2paw=github.com/nats-io/nuid v1.0.1/go.mod h1:19wcPz3Ph3q0Jbyiqsd0kePYG7A95tJPxeL+1OSON2c=github.com/nats-io/stan.go v0.5.0/go.mod h1:dYqB+vMN3C2F9pT1FRQpg9eHbjPj6mP0yYuyBNuXHZE=github.com/nbio/st v0.0.0-20140626010706-e9e8d9816f32/go.mod h1:9wM+0iRr9ahx58uYLpLIr5fm8diHn0JbqRycJi6w0Ms=github.com/nlopes/slack v0.6.0/go.mod h1:JzQ9m3PMAqcpeCam7UaHSuBuupz7CmpjehYMayT6YOk=github.com/nrdcg/auroradns v1.0.0/go.mod h1:6JPXKzIRzZzMqtTDgueIhTi6rFf1QvYE/HzqidhOhjw=github.com/nrdcg/goinwx v0.6.1/go.mod h1:XPiut7enlbEdntAqalBIqcYcTEVhpv/dKWgDCX2SwKQ=github.com/nrdcg/namesilo v0.2.1/go.mod h1:lwMvfQTyYq+BbjJd30ylEG4GPSS6PII0Tia4rRpRiyw=github.com/nsqio/go-nsq v1.0.7/go.mod h1:XP5zaUs3pqf+Q71EqUJs3HYfBIqfK6G83WQMdNN+Ito=github.com/oklog/run v1.0.0/go.mod h1:dlhp/R75TPv97u0XWUtDeV/lRKWPKSdTuV0TZvrmrQA=github.com/olekukonko/tablewriter v0.0.1/go.mod h1:vsDQFd/mU46D+Z4whnwzcISnGGzXWMclvtLoiIKAKIo=github.com/olekukonko/tablewriter v0.0.2 h1:sq53g+DWf0J6/ceFUHpQ0nAEb6WgM++fq16MZ91cS6o=github.com/olekukonko/tablewriter v0.0.2/go.mod h1:rSAaSIOAGT9odnlyGlUfAJaoc5w2fSBUmeGDbRWPxyQ=github.com/onsi/ginkgo v0.0.0-20170829012221-11459a886d9c/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=github.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=github.com/onsi/ginkgo v1.7.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=github.com/onsi/ginkgo v1.10.1/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=github.com/onsi/gomega v0.0.0-20170829124025-dcabb60a477c/go.mod h1:C1qb7wdrVGGVU+Z6iS04AVkA3Q65CEZX59MT0QO5uiA=github.com/onsi/gomega v1.4.3/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=github.com/onsi/gomega v1.7.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=github.com/op/go-logging v0.0.0-20160315200505-970db520ece7/go.mod h1:HzydrMdWErDVzsI23lYNej1Htcns9BCg93Dk0bBINWk=github.com/opencontainers/go-digest v0.0.0-20180430190053-c9281466c8b2/go.mod h1:cMLVZDEM3+U2I4VmLI6N8jQYUd2OVphdqWwCJHrFt2s=github.com/opencontainers/go-digest v1.0.0-rc1/go.mod h1:cMLVZDEM3+U2I4VmLI6N8jQYUd2OVphdqWwCJHrFt2s=github.com/opencontainers/image-spec v1.0.1/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=github.com/opencontainers/runc v0.0.0-20190115041553-12f6a991201f/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=github.com/opencontainers/runc v0.1.1/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=github.com/opencontainers/runtime-spec v0.1.2-0.20190507144316-5b71a03e2700/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=github.com/opencontainers/runtime-tools v0.0.0-20181011054405-1d69bd0f9c39/go.mod h1:r3f7wjNzSs2extwzU3Y+6pKfobzPh+kKFJ3ofN+3nfs=github.com/opentracing/opentracing-go v1.1.0/go.mod h1:UkNAQd3GIcIGf0SeVgPpRdFStlNbqXla1AfSYxPUl2o=github.com/openzipkin/zipkin-go v0.1.6/go.mod h1:QgAqvLzwWbR/WpD4A3cGpPtJrZXNIiJc5AZX7/PBEpw=github.com/oracle/oci-go-sdk v7.0.0+incompatible/go.mod h1:VQb79nF8Z2cwLkLS35ukwStZIg5F66tcBccjip/j888=github.com/ovh/go-ovh v0.0.0-20181109152953-ba5adb4cf014/go.mod h1:joRatxRJaZBsY3JAOEMcoOp05CnZzsx4scTxi95DHyQ=github.com/oxtoacart/bpool v0.0.0-20190530202638-03653db5a59c h1:rp5dCmg/yLR3mgFuSOe4oEnDDmGLROTvMragMUXpTQw=github.com/oxtoacart/bpool v0.0.0-20190530202638-03653db5a59c/go.mod h1:X07ZCGwUbLaax7L0S3Tw4hpejzu63ZrrQiUe6W0hcy0=github.com/pascaldekloe/goe v0.0.0-20180627143212-57f6aae5913c/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=github.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=github.com/patrickmn/go-cache v2.1.0+incompatible/go.mod h1:3Qf8kWWT7OJRJbdiICTKqZju1ZixQ/KpMGzzAfe6+WQ=github.com/pborman/uuid v1.2.0/go.mod h1:X/NO0urCmaxf9VXbdlT7C2Yzkj2IKimNn4k+gtPdI/k=github.com/pelletier/go-buffruneio v0.2.0/go.mod h1:JkE26KsDizTr40EUHkXVtNPvgGtbSNq5BcowyYOWdKo=github.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=github.com/philhofer/fwd v1.0.0/go.mod h1:gk3iGcWd9+svBvR0sR+KPcfE+RNWozjowpeBVG3ZVNU=github.com/pierrec/lz4 v2.0.5+incompatible/go.mod h1:pdkljMzZIN41W+lC3N2tnIh5sFi+IEE17M5jbnwPHcY=github.com/pierrec/lz4 v2.2.6+incompatible/go.mod h1:pdkljMzZIN41W+lC3N2tnIh5sFi+IEE17M5jbnwPHcY=github.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=github.com/pkg/errors v0.8.1 h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=github.com/pmezard/go-difflib v0.0.0-20151028094244-d8ed2627bdf0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=github.com/posener/complete v1.1.1 h1:ccV59UEOTzVDnDUEFdT95ZzHVZ+5+158q8+SJb2QV5w=github.com/posener/complete v1.1.1/go.mod h1:em0nMJCgc9GFtwrmVmEMR/ZL6WyhyjMBndrE9hABlRI=github.com/pquerna/otp v1.2.0/go.mod h1:dkJfzwRKNiegxyNb54X/3fLwhCynbMspSyWKnvi1AEg=github.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=github.com/prometheus/client_golang v0.9.3-0.20190127221311-3c4408c8b829/go.mod h1:p2iRAGwDERtqlqzRXnrOVns+ignqQo//hLXqYxZYVNs=github.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=github.com/prometheus/client_golang v1.1.0/go.mod h1:I1FGZT9+L76gKKOs5djB6ezCbFQP1xR9D75/vuwEF3g=github.com/prometheus/client_golang v1.2.1 h1:JnMpQc6ppsNgw9QPAGF6Dod479itz7lvlsMzzNayLOI=github.com/prometheus/client_golang v1.2.1/go.mod h1:XMU6Z2MjaRKVu/dC1qupJI9SiNkDYzz3xecMgSW/F+U=github.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=github.com/prometheus/client_model v0.0.0-20190115171406-56726106282f/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=github.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4 h1:gQz4mCbXsO+nc9n1hCxHcGA3Zx3Eo+UHZoInFGUIXNM=github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=github.com/prometheus/common v0.2.0/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=github.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=github.com/prometheus/common v0.6.0/go.mod h1:eBmuwkDJBwy6iBfxCBob6t6dR6ENT/y+J+Zk0j9GMYc=github.com/prometheus/common v0.7.0 h1:L+1lyG48J1zAQXA3RBX/nG/B3gjlHq0zTt2tlbJLyCY=github.com/prometheus/common v0.7.0/go.mod h1:DjGbpBbp5NYNiECxcL/VnbXCCaQpKd3tt26CguLLsqA=github.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=github.com/prometheus/procfs v0.0.0-20190117184657-bf6a532e95b1/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=github.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=github.com/prometheus/procfs v0.0.3/go.mod h1:4A/X28fw3Fc593LaREMrKMqOKvUAntwMDaekg4FpcdQ=github.com/prometheus/procfs v0.0.5 h1:3+auTFlqw+ZaQYJARz6ArODtkaIwtvBTx3N2NehQlL8=github.com/prometheus/procfs v0.0.5/go.mod h1:4A/X28fw3Fc593LaREMrKMqOKvUAntwMDaekg4FpcdQ=github.com/quasoft/memstore v0.0.0-20180925164028-84a050167438/go.mod h1:wTPjTepVu7uJBYgZ0SdWHQlIas582j6cn2jgk4DDdlg=github.com/rainycape/memcache v0.0.0-20150622160815-1031fa0ce2f2/go.mod h1:7tZKcyumwBO6qip7RNQ5r77yrssm9bfCowcLEBcU5IA=github.com/rcrowley/go-metrics v0.0.0-20181016184325-3113b8401b8a/go.mod h1:bCqnVzQkZxMG4s8nGwiZ5l3QUCyqpo9Y+/ZMZ9VjZe4=github.com/rogpeppe/fastuuid v0.0.0-20150106093220-6724a57986af/go.mod h1:XWv6SoW27p1b0cqNHllgS5HIMJraePCO15w5zCzIWYg=github.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=github.com/rs/cors v1.7.0/go.mod h1:gFx+x8UowdsKA9AchylcLynDq+nNFfI8FkUZdN/jGCU=github.com/russross/blackfriday v1.5.2/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=github.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=github.com/ryanuber/columnize v0.0.0-20160712163229-9b3edd62028f/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=github.com/ryanuber/columnize v2.1.0+incompatible/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=github.com/ryanuber/go-glob v1.0.0/go.mod h1:807d1WSdnB0XRJzKNil9Om6lcp/3a0v4qIHxIXzX/Yc=github.com/ryszard/goskiplist v0.0.0-20150312221310-2dfbae5fcf46/go.mod h1:uAQ5PCi+MFsC7HjREoAz1BU+Mq60+05gifQSsHSDG/8=github.com/sacloud/libsacloud v1.26.1/go.mod h1:79ZwATmHLIFZIMd7sxA3LwzVy/B77uj3LDoToVTxDoQ=github.com/samuel/go-zookeeper v0.0.0-20190923202752-2cc03de413da/go.mod h1:gi+0XIa01GRL2eRQVjQkKGqKF3SF9vZR/HnPullcV2E=github.com/satori/go.uuid v1.2.0 h1:0uYX9dsZ2yD7q2RtLRtPSdGDWzjeM3TbMJP9utgA0ww=github.com/satori/go.uuid v1.2.0/go.mod h1:dA0hQrYB0VpLJoorglMZABFdXlWrHn1NEOzdhQKdks0=github.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529 h1:nn5Wsu0esKSJiIVhscUtVbo7ada43DJhG55ua/hjS5I=github.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529/go.mod h1:DxrIzT+xaE7yg65j358z/aeFdxmN0P9QXhEzd20vsDc=github.com/serenize/snaker v0.0.0-20171204205717-a683aaf2d516/go.mod h1:Yow6lPLSAXx2ifx470yD/nUe22Dv5vBvxK/UK9UUTVs=github.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=github.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=github.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=github.com/sirupsen/logrus v1.4.1/go.mod h1:ni0Sbl8bgC9z8RoU9G6nDWqqs/fq4eDPysMBDgk/93Q=github.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=github.com/skratchdot/open-golang v0.0.0-20160302144031-75fb7ed4208c/go.mod h1:sUM3LWHvSMaG192sy56D9F7CNvL7jUJVXoqM1QKLnog=github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=github.com/smartystreets/go-aws-auth v0.0.0-20180515143844-0c1422d1fdb9/go.mod h1:SnhjPscd9TpLiy1LpzGSKh3bXCfxxXuqd9xmQJy3slM=github.com/smartystreets/goconvey v0.0.0-20181108003508-044398e4856c/go.mod h1:XDJAKZRPZ1CvBcN2aX5YOUTYGHki24fSF0Iv48Ibg0s=github.com/smartystreets/goconvey v0.0.0-20190330032615-68dc04aab96a/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=github.com/soheilhy/cmux v0.1.4/go.mod h1:IM3LyeVVIOuxMH7sFAkER9+bJ4dT7Ms6E4xg4kGIyLM=github.com/sony/gobreaker v0.4.1/go.mod h1:ZKptC7FHNvhBz7dN2LGjPVBz2sZJmc0/PkyDJOjmxWY=github.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=github.com/spf13/afero v1.2.2/go.mod h1:9ZxEEn6pIJ8Rxe320qSDBk6AsU0r9pR7Q4OcevTdifk=github.com/spf13/cast v1.3.0/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=github.com/spf13/cobra v0.0.5 h1:f0B+LkLX6DtmRH1isoNA9VTtNUK9K8xYd28JNNfOv/s=github.com/spf13/cobra v0.0.5/go.mod h1:3K3wKZymM7VvHMDS9+Akkh4K60UwM26emMESw8tLCHU=github.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=github.com/spf13/pflag v0.0.0-20170130214245-9ff6c6923cff/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=github.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=github.com/spf13/viper v1.3.2/go.mod h1:ZiWeW+zYFKm7srdB9IoDzzZXaJaI5eL9QjNiN/DMA2s=github.com/src-d/gcfg v1.4.0/go.mod h1:p/UMsR43ujA89BJY9duynAwIpvqEujIH/jFlfL7jWoI=github.com/streadway/amqp v0.0.0-20190827072141-edfb9018d271/go.mod h1:AZpEONHx3DKn8O/DFsRAY58/XVQiIPMTMB1SddzLXVw=github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=github.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=github.com/stretchr/objx v0.2.0/go.mod h1:qt09Ya8vawLte6SNmTgCsAVtYtaKzEcn8ATUoHMkEqE=github.com/stretchr/testify v0.0.0-20151208002404-e3a8ff8ce365/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=github.com/stretchr/testify v1.2.1/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=github.com/struCoder/Go-pinyin v1.0.3 h1:HGZBl2ckK6igMD7791d4f6WwwrNKA+Hul5A+eKCEns0=github.com/struCoder/Go-pinyin v1.0.3/go.mod h1:De04nwrK2CascoG1JhUK5WfrieKw1CmHT5glsGDPBjg=github.com/stvp/tempredis v0.0.0-20181119212430-b82af8480203/go.mod h1:oqN97ltKNihBbwlX8dLpwxCl3+HnXKV/R0e+sRLd9C8=github.com/syndtr/gocapability v0.0.0-20170704070218-db04d3cc01c8/go.mod h1:hkRG7XYTFWNJGYcbNJQlaLq0fg1yr4J4t/NcTQtrfww=github.com/technoweenie/multipartstreamer v1.0.1/go.mod h1:jNVxdtShOxzAsukZwTSw6MDx5eUJoiEBsSvzDU9uzog=github.com/timewasted/linode v0.0.0-20160829202747-37e84520dcf7/go.mod h1:imsgLplxEC/etjIhdr3dNzV3JeT27LbVu5pYWm0JCBY=github.com/tinylib/msgp v1.0.2/go.mod h1:+d+yLhGm8mzTaHzB+wgMYrodPfmZrzkirds8fDWklFE=github.com/tinylib/msgp v1.1.0/go.mod h1:+d+yLhGm8mzTaHzB+wgMYrodPfmZrzkirds8fDWklFE=github.com/tmc/grpc-websocket-proxy v0.0.0-20190109142713-0ad062ec5ee5/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=github.com/transip/gotransip v0.0.0-20190812104329-6d8d9179b66f/go.mod h1:i0f4R4o2HM0m3DZYQWsj6/MEowD57VzoH0v3d7igeFY=github.com/uber-go/atomic v1.3.2/go.mod h1:/Ct5t2lcmbJ4OSe/waGBoaVvVqtO0bmtfVNex1PFV8g=github.com/ugorji/go v1.1.7 h1:/68gy2h+1mWMrwZFeD1kQialdSzAb432dtpeJ42ovdo=github.com/ugorji/go v1.1.7/go.mod h1:kZn38zHttfInRq0xu/PH0az30d+z6vm202qpg1oXVMw=github.com/ugorji/go/codec v0.0.0-20181204163529-d75b2dcb6bc8/go.mod h1:VFNgLljTbGfSG7qAOspJ7OScBnGdDN/yBr0sguwnwf0=github.com/ugorji/go/codec v1.1.7 h1:2SvQaVZ1ouYrrKKwoSk2pzd4A9evlKJb9oTL+OaLUSs=github.com/ugorji/go/codec v1.1.7/go.mod h1:Ax+UKWsSmolVDwsd+7N3ZtXu+yMGCf907BLYF3GoBXY=github.com/urfave/cli v0.0.0-20171014202726-7bc6a0acffa5/go.mod h1:70zkFmudgCuE/ngEzBv17Jvp/497gISqfk5gWijbERA=github.com/urfave/cli v1.22.1/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=github.com/valyala/fastjson v1.4.1 h1:hrltpHpIpkaxll8QltMU8c3QZ5+qIiCL8yKqPFJI/yE=github.com/valyala/fastjson v1.4.1/go.mod h1:nV6MsjxL2IMJQUoHDIrjEI7oLyeqK6aBD7EFWPsvP8o=github.com/vultr/govultr v0.1.4/go.mod h1:9H008Uxr/C4vFNGLqKx232C206GL0PBHzOP0809bGNA=github.com/willf/bitset v1.1.9/go.mod h1:RjeCKbqT1RxIR/KWY6phxZiaY1IyutSBfGjNPySAYV4=github.com/xanzy/ssh-agent v0.2.1/go.mod h1:mLlQY/MoOhWBj+gOGMQkOeiEvkx+8pJSI+0Bx9h2kr4=github.com/xdg/scram v0.0.0-20180814205039-7eeb5667e42c/go.mod h1:lB8K/P019DLNhemzwFU4jHLhdvlE6uDZjXFejJXr49I=github.com/xdg/stringprep v1.0.0/go.mod h1:Jhud4/sHMO4oL310DaZAKk9ZaJ08SJfe+sJh0HrGL1Y=github.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415/go.mod h1:GwrjFmJcFw6At/Gs6z4yjiIwzuJ1/+UwLxMQDVQXShQ=github.com/xeipuuv/gojsonschema v0.0.0-20180618132009-1d523034197f/go.mod h1:5yf86TLmAcydyeJq5YvxkGPE2fm/u4myDekKRoLuqhs=github.com/xeipuuv/gojsonschema v1.1.0/go.mod h1:5yf86TLmAcydyeJq5YvxkGPE2fm/u4myDekKRoLuqhs=github.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2 h1:eY9dn8+vbi4tKz5Qo6v2eYzo7kUS51QINcR5jNpbZS8=github.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2/go.mod h1:UETIi67q53MR2AWcXfiuqkDkRtnGDLqkBTpCHuJHxtU=github.com/xlab/treeprint v0.0.0-20181112141820-a009c3971eca/go.mod h1:ce1O1j6UtZfjr22oyGxGLbauSBp2YVXpARAosm7dHBg=github.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=go.etcd.io/bbolt v1.3.3/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=go.opencensus.io v0.15.0/go.mod h1:UffZAU+4sDEINUGP/B7UfBBkq4fqLu9zXAX7ke6CHW0=go.opencensus.io v0.20.1/go.mod h1:6WKK9ahsWS3RSO+PY9ZHZUfv2irvY6gN279GOPZjmmk=go.opencensus.io v0.20.2/go.mod h1:6WKK9ahsWS3RSO+PY9ZHZUfv2irvY6gN279GOPZjmmk=go.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=go.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=go.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=go.uber.org/atomic v1.3.2/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=go.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=go.uber.org/atomic v1.5.0 h1:OI5t8sDa1Or+q8AeE+yKeB/SDYioSHAgcVljj9JIETY=go.uber.org/atomic v1.5.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=go.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=go.uber.org/multierr v1.2.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=go.uber.org/multierr v1.3.0 h1:sFPn2GLc3poCkfrpIXGhBD2X0CMIo4Q/zSULXrj/+uc=go.uber.org/multierr v1.3.0/go.mod h1:VgVr7evmIr6uPjLBxg28wmKNXyqE9akIJ5XnfpiKl+4=go.uber.org/ratelimit v0.0.0-20180316092928-c15da0234277/go.mod h1:2X8KaoNd1J0lZV+PxJk/5+DGbO/tpwLR1m++a7FnB/Y=go.uber.org/ratelimit v0.1.0/go.mod h1:2X8KaoNd1J0lZV+PxJk/5+DGbO/tpwLR1m++a7FnB/Y=go.uber.org/tools v0.0.0-20190618225709-2cfd321de3ee/go.mod h1:vJERXedbb3MVM5f9Ejo0C68/HhF8uaILCdgjnY+goOA=go.uber.org/zap v1.10.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=go.uber.org/zap v1.12.0 h1:dySoUQPFBGj6xwjmBzageVL8jGi8uxc6bEmJQjA06bw=go.uber.org/zap v1.12.0/go.mod h1:zwrFLgMcdUuIBviXEYEH1YKNaOBnKXsx2IPda5bBwHM=gocloud.dev v0.17.0/go.mod h1:tIHTRdR1V5dlD8sTkzYdTGizBJ314BDykJ8KmadEXwo=gocloud.dev/pubsub/rabbitpubsub v0.17.0/go.mod h1:7o1XYDiIC+b0mmcwJuofsDg08t0DtU2ubfn7C/Uz7Y0=golang.org/x/crypto v0.0.0-20180621125126-a49355c7e3f8/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=golang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=golang.org/x/crypto v0.0.0-20181029021203-45a5f77698d3/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=golang.org/x/crypto v0.0.0-20181030102418-4d3f4d9ffa16/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=golang.org/x/crypto v0.0.0-20181203042331-505ab145d0a9/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=golang.org/x/crypto v0.0.0-20190130090550-b01c7a725664/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=golang.org/x/crypto v0.0.0-20190211182817-74369b46fc67/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=golang.org/x/crypto v0.0.0-20190219172222-a4c6cb3142f2/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=golang.org/x/crypto v0.0.0-20190228161510-8dd112bcdc25/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=golang.org/x/crypto v0.0.0-20190325154230-a5d413f7728c/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=golang.org/x/crypto v0.0.0-20190404164418-38d8ce5564a5/go.mod h1:WFFai1msRO1wXaEeE5yQxYXgSfI8pQAWXbQop6sCtWE=golang.org/x/crypto v0.0.0-20190418165655-df01cb2cc480/go.mod h1:WFFai1msRO1wXaEeE5yQxYXgSfI8pQAWXbQop6sCtWE=golang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=golang.org/x/crypto v0.0.0-20190605123033-f99c8df09eb5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=golang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=golang.org/x/crypto v0.0.0-20190829043050-9756ffdc2472/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=golang.org/x/crypto v0.0.0-20190911031432-227b76d455e7/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=golang.org/x/crypto v0.0.0-20190923035154-9ee001bba392/go.mod h1:/lpIB1dKB+9EgE3H3cr1v9wB50oz8l4C4h62xy7jSTY=golang.org/x/crypto v0.0.0-20190927123631-a832865fa7ad/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=golang.org/x/crypto v0.0.0-20191108234033-bd318be0434a h1:R/qVym5WAxsZWQqZCwDY/8sdVKV1m1WgU4/S5IRQAzc=golang.org/x/crypto v0.0.0-20191108234033-bd318be0434a/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=golang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=golang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=golang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=golang.org/x/lint v0.0.0-20190409202823-959b441ac422/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=golang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=golang.org/x/mobile v0.0.0-20190312151609-d3739f865fa6/go.mod h1:z+o9i4GpDbdi3rU15maQ/Ox0txvL9dWGYEHz965HBQE=golang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=golang.org/x/net v0.0.0-20170114055629-f2499483f923/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=golang.org/x/net v0.0.0-20180611182652-db08ff08e862/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=golang.org/x/net v0.0.0-20181023162649-9b4f9f5ad519/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=golang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=golang.org/x/net v0.0.0-20181201002055-351d144fa1fc/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=golang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=golang.org/x/net v0.0.0-20190125091013-d26f9f9a57f3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=golang.org/x/net v0.0.0-20190228165749-92fc7df08ae7/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=golang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=golang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=golang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=golang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=golang.org/x/net v0.0.0-20190619014844-b5b0513f8c1b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=golang.org/x/net v0.0.0-20190724013045-ca1201d0de80/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=golang.org/x/net v0.0.0-20190923162816-aa69164e4478/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=golang.org/x/net v0.0.0-20190930134127-c5a3c61f89f3/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=golang.org/x/net v0.0.0-20191004110552-13f9640d40b9/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=golang.org/x/net v0.0.0-20191011234655-491137f69257/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=golang.org/x/net v0.0.0-20191014212845-da9a3fd4c582/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=golang.org/x/net v0.0.0-20191028085509-fe3aa8a45271/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=golang.org/x/net v0.0.0-20191109021931-daa7c04131f5/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=golang.org/x/net v0.0.0-20191112182307-2180aed22343 h1:00ohfJ4K98s3m6BGUoBd8nyfp4Yl0GoIKvw5abItTjI=golang.org/x/net v0.0.0-20191112182307-2180aed22343/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=golang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=golang.org/x/oauth2 v0.0.0-20190402181905-9f3314589c9a/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=golang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=golang.org/x/sys v0.0.0-20170830134202-bb24a47a89ea/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20180622082034-63fc586f45fe/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20180823144017-11551d06cbcc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20181026203630-95b1ffbd15a5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20181107165924-66b7b1311ac8/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20181122145206-62eef0e2fa9b/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20181205085412-a5c9d58dba9a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20190129075346-302c3dd5f1cc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20190130150945-aca44879d564/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20190209173611-3b5209105503/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20190221075227-b4e8571b14e0/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20190228124157-a34e9553db1e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190403152447-81d4e9dc473e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190507160741-ecd444e8653b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190514135907-3a4b5fb9f71f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190606165138-5da285871e9c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190620070143-6f217b454f45/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190710143415-6ec70d6a5542/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190726091711-fc99dfbffb4e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190801041406-cbf593c0f2f3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190813064441-fde4db37ae7a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190826190057-c7b8b68b1456/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190922100055-0a153f010e69/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190924154521-2837fb4f24fe/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20191008105621-543471e840be/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20191010194322-b09406accb47/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20191110163157-d32e6e3b99c4 h1:Hynbrlo6LbYI3H1IqXpkVDOcX/3HiPdhVEuyj5a59RM=golang.org/x/sys v0.0.0-20191110163157-d32e6e3b99c4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/text v0.0.0-20160726164857-2910a502d2bf/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=golang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=golang.org/x/text v0.3.1-0.20181227161524-e6919f6577db/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=golang.org/x/text v0.3.2 h1:tW2bmiBqwgJj/UpqtC8EpXEZVYOwU0yG4iWbprSVAcs=golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=golang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=golang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=golang.org/x/time v0.0.0-20190921001708-c4c64cad1fd0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=golang.org/x/time v0.0.0-20191024005414-555d28b269f0 h1:/5xXl8Y5W96D+TtHSlonuFqGHIWVuyCkGJLwGh9JJFs=golang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=golang.org/x/tools v0.0.0-20180221164845-07fd8470d635/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=golang.org/x/tools v0.0.0-20180828015842-6cd1fcedba52/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=golang.org/x/tools v0.0.0-20181011042414-1f849cf54d09/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=golang.org/x/tools v0.0.0-20181030221726-6c7e314b6563/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=golang.org/x/tools v0.0.0-20190312151545-0bb0c0a6e846/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=golang.org/x/tools v0.0.0-20190312170243-e65039ee4138/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=golang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=golang.org/x/tools v0.0.0-20190422233926-fe54fb35175b/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=golang.org/x/tools v0.0.0-20190425150028-36563e24a262/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=golang.org/x/tools v0.0.0-20190506145303-2d16b83fe98c/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=golang.org/x/tools v0.0.0-20190606124116-d0a3d012864b/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=golang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=golang.org/x/tools v0.0.0-20190628153133-6cdbf07be9d0/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=golang.org/x/tools v0.0.0-20190729092621-ff9f1409240a/go.mod h1:jcCCGcm9btYwXyDqrUWc6MKQKKGJCWEQ3AfLSRIbEuI=golang.org/x/tools v0.0.0-20190907020128-2ca718005c18/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=golang.org/x/tools v0.0.0-20191029041327-9cc4af7d6b2c/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=golang.org/x/tools v0.0.0-20191029190741-b9c20aec41a5 h1:hKsoRgsbwY1NafxrwTs+k64bikrLBkAgPir1TNCj3Zs=golang.org/x/tools v0.0.0-20191029190741-b9c20aec41a5/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=google.golang.org/api v0.3.1/go.mod h1:6wY9I6uQWHQ8EM57III9mq/AjF+i8G65rmVagqKMtkk=google.golang.org/api v0.4.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=google.golang.org/api v0.5.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=google.golang.org/api v0.6.0/go.mod h1:btoxGiFvQNVUZQ8W08zLtrVS08CNpINPEfxXxgJL1Q4=google.golang.org/api v0.7.0/go.mod h1:WtwebWUNSVBH/HAw79HIFXZNqEvBhG+Ra+ax0hx3E3M=google.golang.org/api v0.8.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=google.golang.org/api v0.9.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=google.golang.org/api v0.13.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=google.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=google.golang.org/appengine v1.6.1/go.mod h1:i06prIuMbXzDqacNJfV5OdTW448YApPu5ww/cMBSeb0=google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=google.golang.org/genproto v0.0.0-20180831171423-11092d34479b/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=google.golang.org/genproto v0.0.0-20190307195333-5fe7a883aa19/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=google.golang.org/genproto v0.0.0-20190404172233-64821d5d2107/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=google.golang.org/genproto v0.0.0-20190418145605-e7d98fc518a7/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=google.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=google.golang.org/genproto v0.0.0-20190502173448-54afdca5d873/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=google.golang.org/genproto v0.0.0-20190508193815-b515fa19cec8/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=google.golang.org/genproto v0.0.0-20190530194941-fb225487d101/go.mod h1:z3L6/3dTEVtUr6QSP8miRzeRqwQOioJ9I66odjN4I7s=google.golang.org/genproto v0.0.0-20190620144150-6af8c5fc6601/go.mod h1:z3L6/3dTEVtUr6QSP8miRzeRqwQOioJ9I66odjN4I7s=google.golang.org/genproto v0.0.0-20190801165951-fa694d86fc64/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=google.golang.org/genproto v0.0.0-20191108220845-16a3f7862a1a h1:Ob5/580gVHBJZgXnff1cZDbG+xLtMVE5mDRTe+nIsX4=google.golang.org/genproto v0.0.0-20191108220845-16a3f7862a1a/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=google.golang.org/grpc v1.14.0/go.mod h1:yo6s7OP7yaDglbqo1J04qKzAhqBH6lvTonzMVmEdcZw=google.golang.org/grpc v1.17.0/go.mod h1:6QZJwpn2B+Zp71q/5VxRsJ6NXXVCE5NRUHRo+f3cWCs=google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=google.golang.org/grpc v1.19.1/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=google.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=google.golang.org/grpc v1.21.0/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=google.golang.org/grpc v1.21.1/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=google.golang.org/grpc v1.22.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=google.golang.org/grpc v1.24.0/go.mod h1:XDChyiUovWa60DnaeDeZmSW86xtLtjtZbwvSiRnRtcA=google.golang.org/grpc v1.25.1 h1:wdKvqQk7IttEw92GoRyKG2IDrUIpgpj6H6m81yfeMW0=google.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=gopkg.in/DataDog/dd-trace-go.v1 v1.19.0/go.mod h1:DVp8HmDh8PuTu2Z0fVVlBsyWaC++fzwVCaGWylTe3tg=gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=gopkg.in/alexcesaro/quotedprintable.v3 v3.0.0-20150716171945-2caba252f4dc/go.mod h1:m7x9LTH6d71AHyAX77c9yqWCCa3UKHcVEj9y7hAtKDk=gopkg.in/asn1-ber.v1 v1.0.0-20181015200546-f715ec2f112d/go.mod h1:cuepJuh7vyXfUyUwEgHQXw849cJrilpS5NeIjOWESAw=gopkg.in/bsm/ratelimit.v1 v1.0.0-20160220154919-db14e161995a/go.mod h1:KF9sEfUPAXdG8Oev9e99iLGnl2uJMjc5B+4y3O7x610=gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=gopkg.in/check.v1 v1.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=gopkg.in/cheggaaa/pb.v1 v1.0.28 h1:n1tBJnnK2r7g9OW2btFH91V92STTUevLXYFb8gy9EMk=gopkg.in/cheggaaa/pb.v1 v1.0.28/go.mod h1:V/YB90LKu/1FcN3WVnfiiE5oMCibMjukxqG/qStrOgw=gopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=gopkg.in/gcfg.v1 v1.2.3/go.mod h1:yesOnuUOFQAhST5vPY4nbZsb/huCgGGXlipJsBn0b3o=gopkg.in/go-playground/assert.v1 v1.2.1/go.mod h1:9RXL0bg/zibRAgZUYszZSwO/z8Y/a8bDuhia5mkpMnE=gopkg.in/go-playground/validator.v9 v9.29.1/go.mod h1:+c9/zcJMFNgbLvly1L1V+PpxWdVbfP1avr/N00E2vyQ=gopkg.in/go-playground/validator.v9 v9.30.0 h1:Wk0Z37oBmKj9/n+tPyBHZmeL19LaCoK3Qq48VwYENss=gopkg.in/go-playground/validator.v9 v9.30.0/go.mod h1:+c9/zcJMFNgbLvly1L1V+PpxWdVbfP1avr/N00E2vyQ=gopkg.in/gomail.v2 v2.0.0-20160411212932-81ebce5c23df/go.mod h1:LRQQ+SO6ZHR7tOkpBDuZnXENFzX8qRjMDMyPD6BRkCw=gopkg.in/h2non/gock.v1 v1.0.15/go.mod h1:sX4zAkdYX1TRGJ2JY156cFspQn4yRWn6p9EMdODlynE=gopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=gopkg.in/ini.v1 v1.42.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=gopkg.in/ini.v1 v1.44.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=gopkg.in/jcmturner/aescts.v1 v1.0.1/go.mod h1:nsR8qBOg+OucoIW+WMhB3GspUQXq9XorLnQb9XtvcOo=gopkg.in/jcmturner/dnsutils.v1 v1.0.1/go.mod h1:m3v+5svpVOhtFAP/wSz+yzh4Mc0Fg7eRhxkJMWSIz9Q=gopkg.in/jcmturner/goidentity.v3 v3.0.0/go.mod h1:oG2kH0IvSYNIu80dVAyu/yoefjq1mNfM5bm88whjWx4=gopkg.in/jcmturner/gokrb5.v7 v7.2.3/go.mod h1:l8VISx+WGYp+Fp7KRbsiUuXTTOnxIc3Tuvyavf11/WM=gopkg.in/jcmturner/rpc.v1 v1.1.0/go.mod h1:YIdkC4XfD6GXbzje11McwsDuOlZQSb9W4vfLvuNnlv8=gopkg.in/ldap.v3 v3.1.0/go.mod h1:dQjCc0R0kfyFjIlWNMH1DORwUASZyDxo2Ry1B51dXaQ=gopkg.in/ns1/ns1-go.v2 v2.0.0-20190730140822-b51389932cbc/go.mod h1:VV+3haRsgDiVLxyifmMBrBIuCWFBPYKbRssXB9z67Hw=gopkg.in/olivere/elastic.v5 v5.0.82/go.mod h1:uhHoB4o3bvX5sorxBU29rPcmBQdV2Qfg0FBrx5D6pV0=gopkg.in/redis.v3 v3.6.4/go.mod h1:6XeGv/CrsUFDU9aVbUdNykN7k1zVmoeg83KC9RbQfiU=gopkg.in/resty.v1 v1.9.1/go.mod h1:vo52Hzryw9PnPHcJfPsBiFW62XhNx5OczbV9y+IMpgc=gopkg.in/resty.v1 v1.12.0/go.mod h1:mDo4pnntr5jdWRML875a/NmxYqAlA73dVijT2AXvQQo=gopkg.in/square/go-jose.v2 v2.3.1 h1:SK5KegNXmKmqE342YYN2qPHEnUYeoMiXXl1poUlI+o4=gopkg.in/square/go-jose.v2 v2.3.1/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=gopkg.in/src-d/go-billy.v4 v4.3.2/go.mod h1:nDjArDMp+XMs1aFAESLRjfGSgfvoYN0hDfzEk0GjC98=gopkg.in/src-d/go-git-fixtures.v3 v3.5.0/go.mod h1:dLBcvytrw/TYZsNTWCnkNF2DSIlzWYqTe3rJR56Ac7g=gopkg.in/src-d/go-git.v4 v4.13.1/go.mod h1:nx5NYcxdKxq5fpltdHnPa2Exj4Sx0EclMWZQbYDu2z8=gopkg.in/telegram-bot-api.v4 v4.6.4/go.mod h1:5DpGO5dbumb40px+dXcwCpcjmeHNYLpk0bp3XRNvWDM=gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=gopkg.in/warnings.v0 v0.1.2/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=gopkg.in/yaml.v2 v2.0.0-20170812160011-eb3733d160e7/go.mod h1:JAlM8MvJe8wmxCU4Bli9HhUf9+ttbYbLASfIpnQbh74=gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=gopkg.in/yaml.v2 v2.2.4 h1:/eiJrUcujPVeJ3xlSWaiNi3uSVmDGBK1pDHUHAnao1I=gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=gotest.tools v2.2.0+incompatible/go.mod h1:DsYFclhRJ6vuDpmuTbkuFWG+y2sxOXAzmJt81HFBacw=honnef.co/go/tools v0.0.0-20180728063816-88497007e858/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=honnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=honnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=honnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=k8s.io/api v0.0.0-20191109101513-0171b7c15da1/go.mod h1:VJq7+38rpM4TSUbRiZX4P5UVAKK2UQpNQLZClkFQkpE=k8s.io/apimachinery v0.0.0-20191109100837-dffb012825f2/go.mod h1:+6CX7hP4aLfX2sb91JYDMIp0VqDSog2kZu0BHe+lP+s=k8s.io/apimachinery v0.0.0-20191111054156-6eb29fdf75dc/go.mod h1:+6CX7hP4aLfX2sb91JYDMIp0VqDSog2kZu0BHe+lP+s=k8s.io/client-go v11.0.0+incompatible/go.mod h1:7vJpHMYJwNQCWgzmNV+VYUl1zCObLyodBc8nIyt8L5s=k8s.io/gengo v0.0.0-20190128074634-0689ccc1d7d6/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=k8s.io/klog v0.0.0-20181102134211-b9b56d5dfc92/go.mod h1:Gq+BEi5rUBO/HRz0bTSXDUcqjScdoY3a9IHpCEIOOfk=k8s.io/klog v0.3.0/go.mod h1:Gq+BEi5rUBO/HRz0bTSXDUcqjScdoY3a9IHpCEIOOfk=k8s.io/klog v1.0.0/go.mod h1:4Bi6QPql/J/LkTDqv7R/cd3hPo4k2DG6Ptcz060Ez5I=k8s.io/kube-openapi v0.0.0-20191107075043-30be4d16710a/go.mod h1:1TqjTSzOxsLGIKfj0lK8EeCP7K1iUG65v09OM0/WG5E=k8s.io/kubernetes v1.13.0/go.mod h1:ocZa8+6APFNC2tX1DZASIbocyYT5jHzqFVsY5aoB7Jk=k8s.io/utils v0.0.0-20191030222137-2b95a09bc58d/go.mod h1:sZAwmy6armz5eXlNoLmJcl4F1QuKu7sr+mFQ0byX7Ew=pack.ag/amqp v0.11.2/go.mod h1:4/cbmt4EJXSKlG6LCfWHoqmN0uFdy5i/+YFz+fTfhV4=rsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=sigs.k8s.io/structured-merge-diff v0.0.0-20190525122527-15d366b2352e/go.mod h1:wWxsB5ozmmv/SG7nM11ayaAW51xMvak/t1r0CSlcokI=sigs.k8s.io/yaml v1.1.0/go.mod h1:UJmg0vDUVViEyp3mgSv9WPwZCDxu4rQW1olrI1uml+o= go.sum文件是我们直接引用的package和它自身需要的以来的版本记录，go modules就是根据这些去找到需要的packages的。 如果我们不做任何修改，默认会使用最新的包版本，如果包打过tag，那么就会使用最新的那个tag对应的版本。 更多的mod命令可使用： 1go help mod","link":"/posts/f96a60a3.html"},{"title":"使用HEXO与Github.io搭建个人博客","text":"HEXO是基于Node.JS的一款简单快速的博客框架，能够支持多线程，支持markdown，可以将生成的静态网页发布到github.io以及coding上。 一、安装Node.js 关于Node.js的安装，在此就不再多费笔墨，没有安装的可以从官网和网上查找。下面只列举mac上安装。 Mac OS 上安装 你可以通过以下两种方式在 Mac OS 上来安装 node： 1、在官方下载网站下载 pkg 安装包，直接点击安装即可。 2、使用 brew 命令来安装： 1brew install node 二、安装hexo 运行以下命令 1npm install -g hexo-cli 或者 1npm install hexo-deployer-git –save 安装完之后检测一下： 1hexo version 我的运行结果如下，可能和你的有些偏差： 123456789101112131415161718hexo: 4.2.0hexo-cli: 3.1.0os: Darwin 18.7.0 darwin x64http_parser: 2.8.0node: 10.15.3v8: 6.8.275.32-node.51uv: 1.23.2zlib: 1.2.11ares: 1.15.0modules: 64nghttp2: 1.34.0napi: 3openssl: 1.1.0jicu: 62.1unicode: 11.0cldr: 33.1tz: 2018e 三、配置 hexo本地文件在安装插件的时候，最好都是用root身份执行，不然经常遇到一些问题 初始化本地路径 在本地创建一个文件夹hexo（名字自己定义），并初始化 1cd /hexo &amp;&amp; hexo init 生成node_modules 1npm install 生成本地博客 12hexo ghexo server 项目目录如下： 终端显示如下： 12INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 在浏览器下输入http://localhost:4000，成功的话就生成hexo的标准界面。 四、更换主题 只需在项目 themes 文件下，加入自己想要的主题即可。 现在我从网上找了一个，地址：https://github.com/litten/hexo-theme-yilia，可根据博主的说明进行设置。 主题的里配置在 /themes/yilia/_config.yml里设置。 在根目录下找到 _config.yml 文件，大约在96行，更换主题即可。 12theme: yilia ##主题，主要修改这个地方 更改完主题，再重新构建一下，运行以下命令即可： 12hexo ghexo server 五、部署到github 首先，在github中建立一个仓库（没有账户的先创建一个吧！ O(∩_∩)O哈哈~），仓库名字为 XXX.github.io,其中 XXX 是自定义的名字，后缀必须是.github.io。 创建完仓库，点击 Setting 然后进行一些设置。往下滚动，在GitHub Pages条目下，会显示可访问的地址。 根据以上配置完，只有把public文件下的代码就可以传到 刚才创建的 github仓库就可以了。 12345678cd /publicgit initgit add .git commit -m “填写注释信息”git remote add origin git@github.com:sunct/sunct.github.io.git #写自己的仓库地址git push -u origin master 如果出现这个错误： 1234567To github.com:sunct/sunct.github.io.git ! [rejected] master -&gt; master (non-fast-forward)error: failed to push some refs to 'git@github.com:sunct/sunct.github.io.git'hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes (e.g.hint: 'git pull ...') before pushing again.hint: See the 'Note about fast-forwards' in 'git push --help' for details. 是本地和github上有历史冲突，运行： 1git pull origin master --allow-unrelated-histories 六、写博客 在 /source/_posts/目录下写自己的博客就可以了。 写完后再构建即可，可现在本地预览一下 http://localhost:4000。把构建完的public文件夹上传到github就可以了。 也可以使用命令把 pubic 文件夹下的文件 同步到 远端gh-pages分支，以便维护使用。 1git subtree push --prefix public origin gh-pages","link":"/posts/4081f3d5.html"},{"title":"2021年阴阳师式神统计一览表","text":"网易自研，唯美空灵的和风写意，经典的半即时回合制RPG，卡牌收集、养成，基于LBS地理技术的社交PK …… 阴阳师是一款策划一点都不狗，以及其全家也挺好，所有问题都是我的问题的游戏。 月份 新出式神 获取SP/SSR个数 式神名称 升六星的式神 一月 夜溟彼岸花 9 彼岸花(日抽），辉夜姬，两面佛（碎片），小鹿男，妖刀姬，骁浪荒川之主(活动)初翎山风（碎片），鬼切（日抽）一目连 御馔津，初翎山风，少羽大天狗，山兔 二月 联动鬼灭灶门炭治郎+灶门祢豆子 9 天剑韧心鬼切(碎片),骁浪荒川之主(日抽),夜溟彼岸花，不知火，御怨般若，不知火，灶门祢豆子，灶门炭治郎，两面佛 夜溟彼岸花 三月 蝉冰雪女 1 酒吞童子(日抽) 骨女，骁浪荒川之主 var ctx = document.getElementById('chart4189').getContext('2d'); var options = { type: 'line', data: { labels: ['一月', '二月', '三月', '四月', '五月', '六月', '七月','八月','九月','十月','十一月','十二月'], datasets: [ { label: '召唤', backgroundColor: 'rgb(255, 255, 255,0)', borderColor: 'rgb(255, 99, 132)', data: [9,9,1,0,0,0,0,0,0,0,0,0] }, { label: '升6星', backgroundColor: 'rgb(255, 255, 255,0)', borderColor: 'rgb(26,211,100)', data: [4,1,2,0,0,0,0,0,0,0,0,0] } ] }, options: { responsive: true, title: { display: true, text: '2021年每月召唤以及升6星的SP/SSR阶式神数量折线图' } } }; new Chart(ctx, options); 统计 &gt; 获取最多的式神前三：骁浪荒川之主，不知火，两面佛（2） var ctx = document.getElementById('chart4235').getContext('2d'); var options = { type: \"bar\", data:{ datasets: [{ label: '式神数量', backgroundColor: [ '#f44336','#e91e63','#9c27b0','#673ab7','#3f51b5','#2196f3','#00bcd4','#009688','#4caf50','#8bc34a','#ffeb3b','#ffc107','#ff9800','#795548','#9e9e9e','#607d8b', '#f44336','#e91e63','#9c27b0','#673ab7','#3f51b5','#2196f3','#00bcd4','#009688','#4caf50','#8bc34a','#ffeb3b','#ffc107','#ff9800','#795548','#9e9e9e','#607d8b', '#f44336','#e91e63','#9c27b0','#673ab7','#3f51b5','#2196f3','#00bcd4','#009688','#4caf50','#8bc34a','#ffeb3b','#ffc107','#ff9800','#795548','#9e9e9e','#607d8b', ], data: [ 2,1,1,1,1, 1,1,1,1,2, 1,1,2,1,1, 1 ] }], labels: [ '骁浪荒川之主','初翎山风','天剑韧心鬼切','夜溟彼岸花','御怨般若', '彼岸花','辉夜姬','小鹿男','妖刀姬','两面佛', '鬼切','一目连','不知火','灶门祢豆子','灶门炭治郎', '酒吞童子' ] }, options: { responsive: true, title: { display: true, text: '2020年召唤各式神数量柱状图' }, scales: { yAxes: [{ stacked: true, ticks: { min: 0, stepSize: 1, } }] } } } ; new Chart(ctx, options);","link":"/posts/84082f1e.html"},{"title":"2020年阴阳师式神统计一览表","text":"网易自研，唯美空灵的和风写意，经典的半即时回合制RPG，卡牌收集、养成，基于LBS地理技术的社交PK …… 月份 新出式神 获取SP/SSR个数 式神名称 升六星的式神 一月 鬼童丸、聆海金鱼姬 7 烬天玉藻前、云外镜、鬼王酒吞童子、荒川之主、泷夜叉姬、山风、聆海金鱼姬（活动） 烬天玉藻前、云外镜、鬼王酒吞童子 二月 7 御馔津、妖刀姬、辉夜姬、大岳丸、辉夜姬、阎魔（活动）、酒吞童子 日和坊、酒吞童子 三月 缘结神 4 缘结神、泷夜叉姬、辉夜姬、鬼童丸（碎片） 缘结神、鬼童丸 四月 浮世青行灯 7 花鸟卷、缘结神、聆海金鱼姬、小鹿男、浮世青行灯、辉夜姬（活动）、御怨般若（碎片） 聆海金鱼姬、孟婆、御怨般若 五月 铃鹿御前 5 稻荷神御馔津（活动）、御馔津、鬼童丸、云外镜、铃鹿御前 星熊童子、铃鹿御前 六月 缚骨清姬 8 山风（活动）、大岳丸、荒川之主、青行灯、鬼童丸、聆海金鱼姬、缚骨清姬、稻荷神御馔津（活动） 蝎女、苍风一目连 七月 紧那罗 3 铃鹿御前、大天狗、紧那罗 青行灯、紧那罗 八月 8 聆海金鱼姬、两面佛（碎片）、荒、酒吞童子、泷夜叉姬、缚骨清姬、骁浪荒川之主（碎片）、泷夜叉姬 丑时之女、独眼小僧、缚骨清姬、阎魔 九月 麓铭大岳丸、待宵姑获鸟 10 云外镜、两面佛（碎片）、御馔津（活动）、少羽大天狗（活动）、待宵姑获鸟、少羽大天狗、青行灯、鬼王酒吞童子、辉夜姬、麓铭大岳丸 两面佛、麓铭大岳丸、蟹姬 十月 千姬 7 两面佛（碎片），泷夜叉姬，鬼切，云外镜，辉夜姬，御馔津一目连 彼岸花 十一月 5 苍风一目连（活动），千姬，御馔津，苍风一目连，两面佛（碎片） 千姬，云外镜，鬼使黑，姑获鸟 十二月 初翎山风 9 云外镜，不知火，荒，山风（活动），大岳丸，彼岸花，鬼王酒吞童子，麓铭大岳丸，云外镜 万年竹 var ctx = document.getElementById('chart3295').getContext('2d'); var options = { type: 'line', data: { labels: ['一月', '二月', '三月', '四月', '五月', '六月', '七月','八月','九月','十月','十一月','十二月'], datasets: [ { label: '召唤', backgroundColor: 'rgb(255, 255, 255,0)', borderColor: 'rgb(255, 99, 132)', data: [7, 7, 4, 7, 5, 8, 3,8,10,7,5,9] }, { label: '升6星', backgroundColor: 'rgb(255, 255, 255,0)', borderColor: 'rgb(26,211,100)', data: [3, 2, 2, 3, 2, 2, 2,4,3,1,4,1] } ] }, options: { responsive: true, title: { display: true, text: '2020年每月召唤以及升6星的SP/SSR阶式神数量折线图' } } }; new Chart(ctx, options); 统计 &gt; 获取最多的式神前三：辉夜姬，云外镜（6只）、御馔津，泷夜叉姬（5只）、聆海金鱼姬，两面佛（4只） var ctx = document.getElementById('chart1658').getContext('2d'); var options = { type: \"bar\", data:{ datasets: [{ label: '式神数量', backgroundColor: [ '#f44336','#e91e63','#9c27b0','#673ab7','#3f51b5','#2196f3','#00bcd4','#009688','#4caf50','#8bc34a','#ffeb3b','#ffc107','#ff9800','#795548','#9e9e9e','#607d8b', '#f44336','#e91e63','#9c27b0','#673ab7','#3f51b5','#2196f3','#00bcd4','#009688','#4caf50','#8bc34a','#ffeb3b','#ffc107','#ff9800','#795548','#9e9e9e','#607d8b', '#f44336','#e91e63','#9c27b0','#673ab7','#3f51b5','#2196f3','#00bcd4','#009688','#4caf50','#8bc34a','#ffeb3b','#ffc107','#ff9800','#795548','#9e9e9e','#607d8b', ], data: [1, 2, 4, 2,1, 1,2,1,2,1, 2,2, 6,3,5,3,5, 1,6,3,1,2, 2,3,1,1,2, 2,1,1,4,2, 1,1,1,1,1, ] }], labels: [ '烬天玉藻前','鬼王酒吞童子','聆海金鱼姬','稻荷神御馔津','浮世青行灯', '御怨般若','缚骨清姬','骁浪荒川之主','少羽大天狗','待宵姑获鸟', '麓铭大岳丸','苍风一目连', '云外镜','荒川之主','泷夜叉姬','山风','御馔津', '妖刀姬','辉夜姬','大岳丸','阎魔','酒吞童子', '缘结神','鬼童丸','花鸟卷','小鹿男','铃鹿御前', '青行灯','大天狗','紧那罗','两面佛','荒', '鬼切','一目连','千姬','不知火','彼岸花', ] }, options: { responsive: true, title: { display: true, text: '2020年召唤各式神数量柱状图' }, scales: { yAxes: [{ stacked: true, ticks: { min: 0, stepSize: 1, } }] } } } ; new Chart(ctx, options);","link":"/posts/a08a7e28.html"},{"title":"PHP的目录结构、设计理念以及核心架构","text":"前一节：使用ext_skel,实现一个PHP扩展，试着使用 ext_skel 写了一个扩展，通过上一节可以大体了解自己如何写一个扩展。这一节主要介绍一下PHP的目录结构、设计理念以及核心架构。 一、PHP的目录结构 PHP源代码还包括在开发过程中生成的几个文件，以及在上游各自位置进行维护的几个部分。（注：PHP版本7.4.13） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091&lt;php-src&gt;/ ├─ .git/ # Git configuration and source directory ├─ TSRM/ # Thread Safe Resource Manager └─ Zend/ # Zend Engine ├─ zend_vm_execute.h # Generated by `Zend/zend_vm_gen.php` ├─ zend_vm_opcodes.c # Generated by `Zend/zend_vm_gen.php` ├─ zend_vm_opcodes.h # Generated by `Zend/zend_vm_gen.php` └─ ... ├─ appveyor/ # Appveyor CI service files └─ build/ # *nix build system files ├─ ax_*.m4 # https://github.com/autoconf-archive/autoconf-archive ├─ config.guess # https://git.savannah.gnu.org/cgit/config.git ├─ config.sub # https://git.savannah.gnu.org/cgit/config.git ├─ libtool.m4 # https://git.savannah.gnu.org/cgit/libtool.git ├─ ltmain.sh # https://git.savannah.gnu.org/cgit/libtool.git ├─ shtool # https://www.gnu.org/software/shtool/ └─ ... ├─ docs/ # PHP internals and repository documentation └─ ext/ # PHP core extensions └─ bcmath/ ├─ libbcmath/ # Forked and maintained in php-src └─ ... └─ curl/ ├─ sync-constants.php # The curl symbols checker └─ ... └─ date/ └─ lib/ # Bundled datetime library https://github.com/derickr/timelib ├─ parse_date.c # Generated by re2c 0.15.3 ├─ parse_iso_intervals.c # Generated by re2c 0.15.3 └─ ... └─ ... └─ ffi/ ├─ ffi_parser.c # Generated by https://github.com/dstogov/llk └─ ... └─ fileinfo/ ├─ libmagic/ # Modified libmagic https://github.com/file/file ├─ data_file.c # Generated by `ext/fileinfo/create_data_file.php` ├─ libmagic.patch # Modifications patch from upstream libmagic ├─ magicdata.patch # Modifications patch from upstream libmagic └─ ... └─ gd/ ├─ libgd/ # Bundled and modified GD library https://github.com/libgd/libgd └─ ... └─ mbstring/ ├─ libmbfl/ # Forked and maintained in php-src ├─ unicode_data.h # Generated by `ext/mbstring/ucgendat/ucgendat.php` └─ ... └─ pcre/ ├─ pcre2lib/ # https://www.pcre.org/ └─ ... └─ pdo_mysql/ ├─ php_pdo_mysql_sqlstate.h # Generated by `ext/pdo_mysql/get_error_codes.php` └─ ... └─ skeleton/ # Skeleton for developing new extensions with `ext/ext_skel.php` └─ ... └─ standard/ └─ html_tables/ ├─ mappings/ # https://www.unicode.org/Public/MAPPINGS/ └─ ... ├─ credits_ext.h # Generated by `scripts/dev/credits` ├─ credits_sapi.h # Generated by `scripts/dev/credits` ├─ html_tables.h # Generated by `ext/standard/html_tables/html_table_gen.php` └─ ... └─ tokenizer/ ├─ tokenizer_data.c # Generated by `ext/tokenizer/tokenizer_data_gen.sh` └─ ... └─ xmlrpc/ ├─ libxmlrpc/ # Forked and maintained in php-src └─ ... └─ zend_test # For testing internal APIs. Not needed for regular builds. └─ ... └─ zip/ # Bundled https://github.com/pierrejoye/php_zip └─ ... └─ ... └─ main/ # Binding that ties extensions, SAPIs, and engine together ├─ streams/ # Streams layer subsystem ├─ php_version.h # Generated by release managers using `configure` └─ ... ├─ pear/ # PEAR installation └─ sapi/ # PHP SAPI modules └─ cli/ ├─ mime_type_map.h # Generated by `sapi/cli/generate_mime_type_map.php` └─ ... └─ ... ├─ scripts/ # php-config, phpize and internal development scripts ├─ tests/ # Core features tests ├─ travis/ # Travis CI service files └─ win32/ # Windows build system files ├─ cp_enc_map.c # Generated by `win32/cp_enc_map_gen.exe` └─ ... └─ ... 目录 说明 TSRM 线程相关安全的实现，PHP的线程安全是构建在TSRM库之上的，PHP实现中常见的*G宏通常是对TSRM的封装，TSRM(Thread Safe Resource Manager)线程安全资源管理器。 Zend PHP解析器的核心实现，比如脚本的词法语法解析，opcode的执行以及扩展机制的实现等 build linux下编译相关的目录 ext PHP的扩展，包括了绝大多数PHP的函数的定义和实现，如array系列，pdo系列，spl系列等函数的实现，都在这个目录中。个人写的扩展在测试时也可以放到这个目录，方便测试和调试。 main PHP的主要代码，这里存放PHP最为核心的文件，主要实现PHP的基本设施，这里和Zend引擎不一样，Zend引擎主要实现语言最核心的语言运行环境。 netware 网络目录，socket的定义与实现 pear PHP扩展及应用的代码仓库，包含PEAR的核心文件。PEAR是PHP扩展与应用库(the PHP Extension and Application Repository)的缩写。它是一个PHP扩展及应用的一个代码仓库，简单地说，PEAR之于PHP就像是CPAN(Comprehensive Perl Archive Network)之于Perl。 sapi PHP的应用层接口，包含了各种服务器抽象层的代码，例如apache的mod_php，cli,cgi,embed以及fpm等接口。 scripts Linux下的脚本目录 tests 测试脚本目录，包含PHP各项功能的测试文件 travis 用于构建，非PHP特有目录 win32 Windows下编译PHP的相关脚本，比如sokcet的实现在Windows下和*Nix平台就不太一样，同时也包括了Windows下编译PHP相关的脚本。 虽然源码目录众多，但是核心目录却只有sapi、main、zend、ext、TSRM。 1、SAPI PHP程序的输入可以是来自于命令行的标准输入，也可以是来自基于cgi/fastcgi协议的网络请求。甚至可以嵌入到单片机供C、C++程序调用。它们分别对应cli模式、fpm/cgi模式、embed模式，除了这些还有apache2handler、litespeed模式。 sapi目录是对输入和输出层的抽象，是PHP提供对外服务的规范。 同理，输出可以写到命令行的标准输出，也可以作为基于cgi/fastcgi协议的网络响应返回给客户端。 SAPI全称Server API，负责PHP对外提供服务规范，它定义了结构体sapi_module_struct，该结构体定义了模式启动、关闭、激活、失效等多个钩子函数指针，每个模式将这些函数指针指向自己的函数，就可以轻松扩展PHP对外服务的方式。以上几种模式也正是实现了sapi_module_strcut才完成了PHP的多场景应用。 几种常用的SAPI： （1）、apache2handler：Apache扩展，编译后生成动态链接库，配置到Apache下，当有http请求到Apache时，根据配置会调用此动态链接库，执行PHP代码，完成与PHP的交互。 （2）、cgi-fcgi：编译后生成支持CGI协议的可执行程序，webserver（通常为Apache或Nginx）通过CGI协议把请求传给CGI进程，执行代码将结果返回给webserver，退出进程。 （3）、fpm-fcgi：fpm全称为FastCGI Process Manager，PHP官方提供的FastCGI进程管理器。以Nginx服务器为例，当有http协议请求发送到Nginx服务器，Nginx按照FastCGI协议把请求交给php-fpm进程处理。 （4）、cli：Command Line Interface的简称，PHP的命令行交互接口。 2、main main目录是SAPI层和Zend层的黏合剂。 main目录的作用是承接SAPI的请求，分析出要执行的脚本文件和参数，并对环境和配置进行初始化，比如初始化变量和常量、注册函数、解析配置文件、加载扩展等等。 3、Zend Zend目录就是大家所熟知的Zend引擎，是PHP最核心的部分，主要负责PHP的语法实现、内存管理及脚本的编译运行环境等，它由编译器、执行器两部分组成。 编译器负责将PHP代码进行词法、语法分析，并生成抽象语法树，然后进一步编译为opcode，opcode是Zend虚拟机可识别的指令，php7一共有173个opcode，所有的语法都是由这些opcode组成的。执行器负责执行编译器输出的opcode。 4、ext ext（extension），它是扩展PHP内核功能的一种方式，分为PHP扩展与zend扩展，都支持用户自定义开发，这两种都比较常见，PHP扩展有gd、json、date、array等，而我们熟知的opcache就是Zend扩展。 上一节使用ext_skel,实现一个PHP扩展 写的自定义扩展就放在此目录下。 5、TSRM TSRM(Thread Safe Resource Manager)线程安全资源管理器。 全局变量就是定义在函数外的变量，它属于公共资源，在多线程的环境下，访问公共资源就可能会引起冲突，TSRM就是为解决该问题而诞生的。 线程安全机制主要为了保证共享资源的安全。PHP的线程安全机制简洁直观——在多线程环境下，为每个线程提供独立的全局变量副本。具体实施是通过TSRM为每个线程分配（分配前加锁）一个独立ID（自增）作为当前线程的全局变量内存区索引，在以后的全局变量访问中，实现线程之间的完全独立。 PHP大部分SAPI都是单线程的，所以并不需要过多关注线程安全，但是在Apache或者用户自己实现的PHP环境下，就需要考虑线程安全问题了。 二、PHP的设计理念及特点 （1）、多进程模型：由于PHP是多进程模型，不同请求间互不干涉，这样保证了一个请求挂掉不会对全盘服务造成影响，目前PHP也早支持多线程模型。 （2）、弱类型语言：和C/C++、JAVA、C#等语言不同，PHP是一种弱类型的语言。一个变量的类型并不是一开始就确定不变的，运行中才会确定并可能发生隐式或显示的类型转换，这种机制的灵活性在web开发中非常方便、高效，具体会在后面PHP变量中详述。 （3）、引擎（Zend）+组件（ext）的模式降低内部耦合。 （4）、中间层（sapi ）Sapi全称是Server Application Programming Interface 隔绝web server和PHP。 （5）、语法简单灵活，没有太多规范。缺点导致风格混杂。 三、PHP核心架构 Zend引擎中包含了编译器和解释器，从PHP代码到opcode的执行，均由Zend引擎完成。 Zend引擎除了实现了PHP的核心功能，还提供了一套接口，让PHP可以在更多的场景中使用，如命令行环境、Web环境等。 该架构图大致分为四大部分。 1、Zend引擎：前文介绍的词法/语法分析、AST编译和opcodes的执行均在Zend引擎中实现。此外，PHP的变量设计、内存管理、进程管理等也在引擎层实现。引擎为PHP提供了基础服务，PHP的可靠性和高性能都依赖引擎的基础支撑。同时，Zend引擎的可扩展性，还是PHP得以大规模应用的重要原因之一。 2、PHP层：Zend引擎为PHP提供基础能力（如内存分配和回收），而来自外部的交互则需要通过PHP层来处理。 3、SAPI：SAPI是Server API的缩写，其中包含了常见的cli SAPI和fpm SAPI。PHP定义好输入/输出规范，依据此规范与PHP交互的一方都可以称为Server。 4、扩展部分：Zend引擎提供了核心能力和接口规范。在此基础上开发的扩展，为PHP代码的性能和功能的多样性提供了更丰富的选项。","link":"/posts/67d3d9f2.html"},{"title":"基于github手动同步fork过的项目","text":"在 github中，发现好的项目然后fork放到自己的项目下。当发现原项目有更新时，自己也难免需要同步，此时就需要合并代码，接下来就介绍在github中，不需要命令来合并fork过的项目。 1、Pull request 打开自己的仓库，在【code】菜单下选择 Pull request，或者直接选择 菜单中的 Pull request 2、switching the base 点击下方的switching the base，改变同步方向。 3、Create pull request 创建拉取请求。 然后根据自己需求填写标题和内容说明，提交。 4、Merge pull request 把页面拉到最后，点击 Merge pull request 合并从源fork来的代码。 完成。 另外，如果不想如此麻烦操作，也可以把自己fork的项目先删除掉，然后再重新fork。","link":"/posts/14ebfabe.html"},{"title":"PHP判断两个数字是否是同符号","text":"问题：写一个函数，判断给定的两个数字是否是符号相同的，不可以使用比较运算符或与0比较。 例如 is_same_symbol(-1, 10) == false; is_same_symbol(10,20)=true; is_same_symbol(-1,-10)=true; 同时，规定0属于正数。 在二进制表示中，最高位是1的话，就是负数。最高位为0则为正数。因此我可以想办法通过位运算来判断。1 ^0 = 1。所以 负数^正数=负数。其实就是类似于乘法了。 12345678910111213function is_same_symbol($a,$b){ return (($a ^ $b) &gt; 0);}$a=12;$b=-10;if (is_same_symbol($a, $b) == true){ printf (&quot;same symbol&quot;);}else{ printf (&quot;not same symbol&quot;);} 上面的例子 输出：not same symbol 这里用到了比较运算符(^)。其实完全可以再简化一下，把函数中 &gt;0 的判断比较去掉，因为我们只需要知道第一位符号位即可。 1234function is_same_symbol($a,$b){ return !(($a ^ $b) &gt;&gt; 31);} 右移31位，则只剩下最高位符号位，不是0，就是1。 另外，如果处理非数字型，而是字符串型的数字，如 $a=&quot;100.01&quot;,$b=&quot;-10.01&quot;，只需转化成数字型即可。","link":"/posts/d9cf7021.html"},{"title":"PHP多进程（1）PHP多进程初探","text":"问题描述： 近日在开发过程中出现了一个奇葩问题。 在我使用 PHP子进程处理发邮件的时候，在隔天再次1触发相关代码流程时，会把昨天的数据从使用子进程后再次重新处理一遍。导致数据出现重复，引发脏数据。为此，优化了代码，并且重新梳理了一下关于PHP多进程的问题。 本文参考地址：https://github.com/elarity/advanced-php/blob/master/2.%20php%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%9D%E6%8E%A2—%E5%BC%80%E7%AF%87.md PHP是有多线程的。使用PHP的多线程首先需要下载安装一个线程安全版本（ZTS版本）的PHP，然后再安装pecl的pthread扩展。 实际上PHP是有多进程的，有一些人在用，总体来说php的多进程还算凑合，只需要在安装PHP的时候开启pcntl模块即可。在*NIX下，在终端命令行下使用php -m就可以看到是否开启了pcntl模块。 现在只说php多进程问题。 注意：不要在apache或者fpm环境下使用php多进程，这将会产生不可预估的后果。 在php中我们使用pcntl_fork()来创建多进程（在*NIX系统的C语言编程中，已有进程通过调用fork函数来产生新的进程）。fork出来新进程则成为子进程，原进程则成为父进程，子进程拥有父进程的副本。这里要注意： 子进程与父进程共享程序正文段 子进程拥有父进程的数据空间和堆、栈的副本，注意是副本，不是共享 父进程和子进程将继续执行fork之后的程序代码 fork之后，是父进程先执行还是子进程先执行无法确认，取决于系统调度（取决于信仰） 这里说子进程拥有父进程数据空间以及堆、栈的副本，实际上，在大多数的实现中也并不是真正的完全副本。更多是采用了COW（Copy On Write）即写时复制的技术来节约存储空间。简单来说，如果父进程和子进程都不修改这些 数据、堆、栈 的话，那么父进程和子进程则是暂时共享同一份 数据、堆、栈。只有当父进程或者子进程试图对 数据、堆、栈 进行修改的时候，才会产生复制操作，这就叫做写时复制。 在调用完pcntl_fork()后，该函数会返回两个值。在父进程中返回子进程的进程ID，在子进程内部本身返回数字0。由于多进程在apache或者fpm环境下无法正常运行，所以大家一定要在php cli环境下执行下面php代码。 代码执行前判断是否开启pcntl扩展 1234if (!function_exists(&quot;pcntl_fork&quot;)) { die(&quot;pcntl extention is must !&quot;);} 第一段代码，我们来说明在程序从pcntl_fork()后父进程和子进程将各自继续往下执行代码： 123456789 $pid = pcntl_fork();if( $pid &gt; 0 ){ echo &quot;我是父亲&quot;.PHP_EOL;} else if( 0 == $pid ) { echo &quot;我是儿子&quot;.PHP_EOL;} else { echo &quot;fork失败&quot;.PHP_EOL; } 将文件保存为php_fork_test.php，然后使用cli执行，结果如下图所示： 第二段代码，用来说明子进程拥有父进程的数据副本，而并不是共享： 1234567891011121314// 初始化一个 number变量 数值为1$number = 1;$pid = pcntl_fork();if( $pid &gt;0 ){ $number += 1; echo &quot;我是父亲，number 1 : { $number }&quot;.PHP_EOL;} else if( 0 == $pid ) { $number += 2; echo &quot;我是父亲，number 2 : { $number }&quot;.PHP_EOL;} else { echo &quot;fork失败&quot;.PHP_EOL;} 然后再使用cli执行，结果如下图所示： 第三段代码，比较容易让人思维混乱，pcntl_fork()配合for循环来做些东西，问题：会显示几次 “儿子” ？ 123456789 for( $i = 1; $i &lt;= 3 ; $i++ ){ $pid = pcntl_fork(); if( $pid &gt; 0 ){ // do nothing ... } else if( 0 == $pid ){ echo &quot;儿子&quot;.PHP_EOL; }} 上面代码执行结果如下： 仔细数数，竟然是显示了7次 “ 儿子 ”。好奇怪，难道不是3次吗？… … 下面我修改一下代码，结合下面的代码，再思考一下为什么会产生7次而不是3次。 123456789for( $i = 1; $i &lt;= 3 ; $i++){ $pid = pcntl_fork(); if( $pid &gt;0 ){ // do nothing ... } else if( 0 == $pid ){ echo &quot;儿子&quot;.PHP_EOL; exit; } } 执行结果如下图所示： 前面强调过：父进程和子进程将继续执行fork之后的程序代码(包含pcntl_fork函数)。 解释如下： i=1的时候父进程的pid不为0 这时候fork了一个pid=0的子进程a, 子进程数量1 i=2的时候父进程fork了一个子进程b, 子进程a又fork了一个子进程c, 子进程数量1+2 i=3的时候父进程fork了一个子进程d, a子进程fork了e, b子进程fork了f, c子进程fork了g子进程数量1+2+4=7 至于在fork子进程退出的时候 i=1 =2 =3的时候都只有一个父进程fork一个子进程 所以只有三个儿子 下一节：PHP多进程（2）孤儿与僵尸进程 END","link":"/posts/547b869.html"},{"title":"PHP多进程（3）信号","text":"上一节：PHP多进程（2）孤儿进程与僵尸进程，说到pcntl_wait()和pcntl_waitpid()，是为了解决僵尸进程问题，但最后看起来还是有一些遗留问题，而且上j节文章的结尾也给了解决方案：信号。 本文参考地址：https://github.com/elarity/advanced-php/blob/master/4.%20php%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%9D%E6%8E%A2—%E4%BF%A1%E5%8F%B7.md 信号是一种软件中断，也是一种非常典型的异步事件处理方式。在 *nix 系统诞生的混沌之初，信号的定义是比较混乱的，而且最关键是不可靠，这是一个很严重的问题。所以在后来的POSIX标准中，对信号做了标准化同时也各个发行版的 *nix 也都提供大量可靠的信号。每种信号都有自己的名字，大概如SIGTERM、SIGHUP、SIGCHLD等等，在 *nix 中，这些信号本质上都是整形数字（可以参观一下signal.h系列头文件）。 信号的产生是有多种方式的，下面是常见的几种： 键盘上按某些组合键，比如Ctrl+C或者Ctrl+D等，会产生SIGINT信号。 使用posix kill调用，可以向某个进程发送指定的信号。 远程ssh终端情况下，如果你在服务器上执行了一个阻塞的脚本，正在阻塞过程中你关闭了终端，可能就会产生SIGHUP信号。 硬件也会产生信号，比如OOM了或者遇到除0这种情况，硬件也会向进程发送特定信号。 而进程在收到信号后，可以有如下三种响应： 直接忽略，不做任何反映。就是俗称的完全不鸟。但是有两种信号，永远不会被忽略，一个是SIGSTOP，另一个是SIGKILL，因为这两个进程提供了向内核最后的可靠的结束进程的办法。 捕捉信号并作出相应的一些反应，具体响应什么可以由用户自己通过程序自定义。 系统默认响应。大多数进程在遇到信号后，如果用户也没有自定义响应，那么就会采取系统默认响应，大多数的系统默认响应就是终止进程。 用通俗话来表达，就是说假如你是一个进程，你正在写代码干活，突然项目组喊你一句：“开会了！”，于是你就放下手里的活儿去开会。你正在写代码，突然邮箱发了发工资邮件：“发工资了！”，于是你就放下手里的活儿去查看邮件。你正在写代码，突然电话响了：“外卖到了！”，于是你就放下手里的活儿去拿外卖。 当然了，你很任性，那是完全可以不理会在写代码时的任何打断，也就是忽略信号。也可以更任性，当喊你去“开会了”的时候，你就不去开会，你去上洗手间，这些都可以由你来。而你在干活过程中，从来不会因为要等某个信号就不干活了一直等信号，而是信号随时随地都可能会来，而你只需要在这个时候作出相应的回应即可，所以说，信号是一种软件中断，也是一种异步的处理事件的方式。 回到上文所说的问题，就是子进程在结束前，父进程就已经先调用了pcntl_waitpid()，导致子进程在结束后依然变成了僵尸进程。实际上在父进程不断while循环调用pcntl_waitpid()是个解决办法，大概代码如下： 12345678910111213141516171819202122$pid = pcntl_fork();if( 0 &gt; $pid ){ exit('fork error.'.PHP_EOL);} else if( 0 &lt; $pid ) { // 在父进程中 cli_set_process_title('php father process'); // 父进程不断while循环，去反复执行pcntl_waitpid()，从而试图解决已经退出的子进程 while( true ){ sleep( 1 ); $wait_result=pcntl_waitpid( $pid, $status, WNOHANG ); //会输出20个0,第21个是子进程退出后返回的子进程号,第22个开始输出-1,那为何第22个开始一直是-1,因为当找不到子进程时,或者错误时是返回-1的,而0只代表当前子进程没有退出 echo $wait_result.PHP_EOL; }} else if( 0 == $pid ) { // 在子进程中 // 子进程休眠20秒钟后直接退出 cli_set_process_title('php child process'); sleep( 20 ); exit;} 下图是运行结果： 解析一下这个结果，我先后三次执行了ps -aux | grep php去查看这两个php进程。 第一次：子进程正在休眠中，父进程依旧在循环中。 第二次：子进程已经退出了，父进程依旧在循环中，但是代码还没有执行到pcntl_waitpid()，所以在子进程退出后到父进程执行回收前这段空隙内子进程变成了僵尸进程。 第三次：此时父进程已经执行了pcntl_waitpid()，将已经退出的子进程回收，释放了pid等资源。 但是这样的代码有一个缺陷，实际上就是子进程已经退出的情况下，主进程还在不断while pcntl_waitpid()去回收子进程，这是一件很奇怪的事情，并不符合社会主义主流价值观，不低碳不节能，代码也不优雅，不好看。所以，应该考虑用更好的方式来实现。那么，我们篇头提了许久的信号终于概要出场了。 现在让我们考虑一下，为何信号可以解决“不低碳不节能，代码也不优雅，不好看”的问题。子进程在退出的时候，会向父进程发送一个信号，叫做SIGCHLD，那么父进程一旦收到了这个信号，就可以作出相应的回收动作，也就是执行pcntl_waitpid()，从而解决掉僵尸进程，而且还显得我们代码优雅好看节能环保。 梳理一下流程，子进程向父进程发送SIGCHLD信号是对人们来说是透明的，也就是说我们无须关心。但是，我们需要给父进程安装一个响应SIGCHLD信号的处理器，除此之外，还需要让这些信号处理器运行起来，安装上了不运行是一件尴尬的事情。那么，在php里给进程安装信号处理器使用的函数是pcntl_signal()，让信号处理器跑起来的函数是pcntl_signal_dispatch()。 pcntl_signal()，安装一个信号处理器，具体说明是pcntl_signal ( int $signo , callback $handler [, bool $restart_syscalls = true ] )，参数signo就是信号，callback则是响应该信号的代码段，返回bool值。 pcntl_signal_dispatch()，调用每个等待信号通过pcntl_signal() 安装的处理器，参数为void，返回bool值。 下面结合新引入的两个函数来解决的代码： 123456789101112131415161718192021222324252627$pid = pcntl_fork();if( 0 &gt; $pid ){ exit('fork error.'.PHP_EOL);} else if( 0 &lt; $pid ) { // 在父进程中 // 给父进程安装一个SIGCHLD信号处理器 pcntl_signal( SIGCHLD, function() use( $pid ) { echo &quot;收到子进程退出&quot;.PHP_EOL; pcntl_waitpid( $pid, $status, WNOHANG ); } ); cli_set_process_title('php father process 2'); // 父进程不断while循环，去反复执行pcntl_waitpid()，从而试图解决已经退出的子进程 while( true ){ sleep( 1 ); // 注释掉原来老掉牙的代码，转而使用pcntl_signal_dispatch() //pcntl_waitpid( $pid, $status, WNOHANG ); pcntl_signal_dispatch(); }} else if( 0 == $pid ) { // 在子进程中 // 子进程休眠20秒钟后直接退出 cli_set_process_title('php child process 2'); sleep( 20 ); exit;} 运行结果如下： END 如有问题请在下方留言。 或关注我的公众号“孙三苗”，输入“联系方式”。获得进一步帮助。 ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200711174450297.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzNzc1MTY=,size_16,color_FFFFFF,t_70#pic_center =230x230)","link":"/posts/1c8636b0.html"},{"title":"PHP多进程（2）孤儿进程与僵尸进程","text":"上一节：PHP多进程（1）PHP多进程初探，简单了解了一下关于PHP多进程和简单的通过代码了解其中的一些问题。 那这一节，来学习一下关于 孤儿进程与僵尸进程 本文参考地址：https://github.com/elarity/advanced-php/blob/master/3.%20php%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%9D%E6%8E%A2—%E5%AD%A4%E5%84%BF%E5%92%8C%E5%83%B5%E5%B0%B8.md 实际上，我们要记住：PHP的多进程是非常值得应用于生产环境具备高价值的生产力工具。 上节介绍的都是pcntl_fork()，只管fork生产，不管后续护理，实际上这样并不符合主流价值观，而且，操作系统本身资源有限，这样无限生产不顾护理，操作系统也会吃不消。 孤儿进程是指父进程在fork出子进程后，子进程还在执行，但自己（父进程）先结束了。因此，子进程从此变得无依无靠、无家可归，变成了孤儿。用术语来表述就是，父进程在子进程结束之前提前退出，这些子进程将由init（进程ID为1）进程收养并完成对其各种数据状态的收集。 init进程是Linux系统下的奇怪进程，这个进程是以普通用户权限运行但却具备超级权限的进程，简单地说，这个进程在Linux系统启动的时候做初始化工作，比如运行getty、比如会根据/etc/inittab中设置的运行等级初始化系统等等，当然了，还有一个作用就是如上所说的：收养孤儿进程。 僵尸进程是指父进程在fork出子进程，而后子进程在结束后，父进程并没有调用wait或者waitpid等完成对其清理善后工作，导致该子进程进程ID、文件描述符等依然保留在系统中，极大浪费了系统资源。所以，僵尸进程是对系统有危害的，而孤儿进程则相对来说没那么严重。在Linux系统中，我们可以通过ps -aux来查看进程，如果有[Z+]标记就是僵尸进程。 在PHP中，父进程对子进程的状态收集等是通过pcntl_wait()和pcntl_waitpid()等完成的，下面依然还是通过代码进行演示和说明。 演示并说明孤儿进程的出现，并演示孤儿进程被init进程收养： 1234567891011121314151617$pid = pcntl_fork();if( $pid &gt; 0 ){ // 显示父进程的进程ID，这个函数可以是getmypid()，也可以用posix_getpid() echo &quot;Father PID:&quot;.getmypid().PHP_EOL; // 让父进程停止两秒钟，在这两秒内，子进程的父进程ID还是这个父进程 sleep( 2 );} else if( 0 == $pid ) { // 让子进程循环10次，每次睡眠1s，然后每秒钟获取一次子进程的父进程进程ID for( $i = 1; $i &lt;= 10; $i++ ){ sleep( 1 ); // posix_getppid()函数的作用就是获取当前进程的父进程进程ID echo '获取当前进程的父进程进程ID:'.posix_getppid().PHP_EOL; }} else { echo &quot;fork error.&quot;.PHP_EOL;} 可以看到，输出的前部分（16:32:28），子进程的父进程进程ID为15828，但是从三秒后开始（16:32:31），由于父进程已经提前退出了，子进程变成孤儿进程，所以init进程收养了子进程，所以子进程的父进程进程ID变成了1。 演示并说明僵尸进程的出现，并演示僵尸进程的危害： 1234567891011121314$pid = pcntl_fork();if( $pid &gt; 0 ){ // 下面这个函数可以更改php进程的名称 cli_set_process_title('php father process'); // 让主进程休息60秒钟 sleep(60);} else if( 0 == $pid ) { cli_set_process_title('php child process'); // 让子进程休息20秒钟，但是进程结束后，父进程不对子进程做任何处理工作，这样这个子进程就会变成僵尸进程 sleep(20);} else { exit('fork error.'.PHP_EOL);} 由于我用的是mac 电脑的php，导致出现⚠️警告错误:PHP Warning: cli_set_process_title(): cli_set_process_title had an error: Not initialized correctly in ... ...。原因是：mac os 不支持修改进程名称。为此我改变一个运行环境来进行测试。 通过执行ps -aux命令可以看到，当程序在前20秒内运行的时候，php child process的状态列为[S+]，然而在20秒钟过后，这个状态变成了[Z+]，也就是变成了危害系统的僵尸进程。 运行结果如下图： 那么，该如何避免出现类似上面的僵尸进程呢？PHP通过pcntl_wait()和pcntl_waitpid()两个函数来帮我们解决这个问题。 了解Linux系统编程的应该知道，看名字就知道这其实就是PHP把C语言中的wait()和waitpid()包装了一下。 通过pcntl_wait()来避免僵尸进程，在开始之前先简单普及一下pcntl_wait()的相关内容： pcntl_wait()这个函数的作用就是 “ 等待或者返回子进程的状态 ”，当父进程执行了该函数后，就会阻塞挂起等待子进程的状态一直等到子进程已经由于某种原因退出或者终止。换句话说就是如果子进程还没结束，那么父进程就会一直等，如果子进程已经结束，那么父进程就会立刻得到子进程状态。这个函数返回退出的子进程的进程ID或者失败返回-1。 pcntl_wait()相关内容也可参考官网手册 pcntl_wait 我们将第二个案例（代码段）中代码修改一下： 1234567891011121314151617181920$pid = pcntl_fork();if( $pid &gt; 0 ){ // 下面这个函数可以更改php进程的名称 cli_set_process_title('php father process'); // 返回$wait_result，就是子进程的进程号，如果子进程已经是僵尸进程则为0 // 子进程状态则保存在了$status参数中，可以通过pcntl_wexitstatus()等一系列函数来查看$status的状态信息是什么 $wait_result = pcntl_wait( $status ); print_r( $wait_result ); print_r( $status ); // 让主进程休息60秒钟 sleep(60);} else if( 0 == $pid ) { cli_set_process_title('php child process'); // 让子进程休息20秒钟，但是进程结束后，父进程不对子进程做任何处理工作，这样这个子进程就会变成僵尸进程 sleep(20);} else { exit('fork error.'.PHP_EOL);} 在终端中通过ps -aux查看，可以看到在前20秒内，php child process是[S+]状态，然后20秒钟过后进程消失了，也就是被父进程回收了，没有变成僵尸进程。 但，pcntl_wait()也有阻塞的问题。 父进程只能挂起等待子进程结束或终止，在此期间父进程什么都不能做，这并不符合多快好省原则，所以pcntl_waitpid()闪亮登场。pcntl_waitpid( $pid, &amp;$status, $option = 0 )的第三个参数如果设置为WNOHANG，那么父进程不会阻塞一直等待到有子进程退出或终止，否则将会和pcntl_wait()的表现类似。 修改第三个案例（代码块）的代码，但是，我们并不添加 WNOHANG，演示说明pcntl_waitpid()功能： 1234567891011121314151617181920212223$pid = pcntl_fork();if( $pid &gt; 0 ){ // 下面这个函数可以更改php进程的名称 cli_set_process_title('php father process'); // 返回值保存在$wait_result中 // $pid参数表示 子进程的进程ID // 子进程状态则保存在了参数$status中 // 将第三个option参数设置为常量WNOHANG，则可以避免主进程阻塞挂起，此处父进程将立即返回继续往下执行剩下的代码 $wait_result = pcntl_waitpid( $pid, $status ); var_dump( $wait_result ); var_dump( $status ); // 让主进程休息60秒钟 sleep(60); } else if( 0 == $pid ) { cli_set_process_title('php child process'); // 让子进程休息20秒钟，但是进程结束后，父进程不对子进程做任何处理工作，这样这个子进程就会变成僵尸进程 sleep(20);} else { exit('fork error.'.PHP_EOL);} 下面是运行结果，实际上可以看到主进程是被阻塞的，一直到第20秒子进程退出了，父进程不再阻塞： 接着修改第四段代码，添加第三个参数WNOHANG，代码如下： 123456789101112131415161718192021222324252627$pid = pcntl_fork();if( $pid &gt; 0 ){ // 下面这个函数可以更改php进程的名称 cli_set_process_title('php father process'); // 返回值保存在$wait_result中 // $pid参数表示 子进程的进程ID // 子进程状态则保存在了参数$status中 // 将第三个option参数设置为常量WNOHANG，则可以避免主进程阻塞挂起，此处父进程将立即返回继续往下执行剩下的代码 $wait_result = pcntl_waitpid( $pid, $status, WNOHANG ); //$wait_result大于0代表子进程已退出,返回的是子进程的pid,非阻塞时0代表没取到退出子进程,为什么会没有取到子进程,因为当时子进程没有退出,在休眠sleep var_dump( $wait_result ); var_dump( $status ); echo &quot;不阻塞，运行到这里&quot;.PHP_EOL; // 让主进程休息60秒钟 sleep(60);} else if( 0 == $pid ) { cli_set_process_title('php child process'); // 让子进程休息20秒钟，但是进程结束后，父进程不对子进程做任何处理工作，这样这个子进程就会变成僵尸进程 sleep(20);} else { exit('fork error.'.PHP_EOL);} 下面是运行结果，一个执行php程序的终端窗口，另一个是ps -aux终端窗口。可以看到主进程不再阻塞： 问题出现了，竟然php child process进程状态竟然变成了[Z+]，这是怎么搞得？回头分析一下代码： 我们看到子进程是睡眠了20秒钟，而父进程在执行pcntl_waitpid()之前没有任何睡眠且本身不再阻塞，所以，主进程自己先执行下去了，而子进程在足足20秒钟后才结束，进程状态自然无法得到回收。如果我们将代码修改一下，就是在主进程的pcntl_waitpid()前睡眠25秒钟，这样就可以回收子进程了。但是即便这样修改，细心想的话还是会有个问题，那就是在子进程结束后，在父进程执行pcntl_waitpid()回收前，有五秒钟的时间差，在这个时间差内，php child process也将会是僵尸进程。那么，pcntl_waitpid()如何正确使用啊？这样用，看起来毕竟不太科学。 那么，就需要引入信号。 下一节：PHP多进程（3）信号 END","link":"/posts/5a0a73c6.html"}],"tags":[{"name":"小札","slug":"小札","link":"/tags/%E5%B0%8F%E6%9C%AD/"},{"name":"阴阳师","slug":"阴阳师","link":"/tags/%E9%98%B4%E9%98%B3%E5%B8%88/"},{"name":"kafka","slug":"kafka","link":"/tags/kafka/"},{"name":"消息队列","slug":"消息队列","link":"/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"},{"name":"cgi","slug":"cgi","link":"/tags/cgi/"},{"name":"php-fpm","slug":"php-fpm","link":"/tags/php-fpm/"},{"name":"golang","slug":"golang","link":"/tags/golang/"},{"name":"cross-request","slug":"cross-request","link":"/tags/cross-request/"},{"name":"插件","slug":"插件","link":"/tags/%E6%8F%92%E4%BB%B6/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Golang","slug":"Golang","link":"/tags/Golang/"},{"name":"goland","slug":"goland","link":"/tags/goland/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"redis","slug":"redis","link":"/tags/redis/"},{"name":"MVCC","slug":"MVCC","link":"/tags/MVCC/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"排序算法","slug":"排序算法","link":"/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"},{"name":"抽象类","slug":"抽象类","link":"/tags/%E6%8A%BD%E8%B1%A1%E7%B1%BB/"},{"name":"SQL","slug":"SQL","link":"/tags/SQL/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"HTTP","slug":"HTTP","link":"/tags/HTTP/"},{"name":"WebSocket","slug":"WebSocket","link":"/tags/WebSocket/"},{"name":"那风吹不干的记忆","slug":"那风吹不干的记忆","link":"/tags/%E9%82%A3%E9%A3%8E%E5%90%B9%E4%B8%8D%E5%B9%B2%E7%9A%84%E8%AE%B0%E5%BF%86/"},{"name":"mpvue","slug":"mpvue","link":"/tags/mpvue/"},{"name":"小程序","slug":"小程序","link":"/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"mpvue-calendar","slug":"mpvue-calendar","link":"/tags/mpvue-calendar/"},{"name":"四季","slug":"四季","link":"/tags/%E5%9B%9B%E5%AD%A3/"},{"name":"模式","slug":"模式","link":"/tags/%E6%A8%A1%E5%BC%8F/"},{"name":"浏览器","slug":"浏览器","link":"/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"数据库","slug":"数据库","link":"/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Charles","slug":"Charles","link":"/tags/Charles/"},{"name":"爬虫","slug":"爬虫","link":"/tags/%E7%88%AC%E8%99%AB/"},{"name":"github","slug":"github","link":"/tags/github/"}],"categories":[{"name":"服务","slug":"服务","link":"/categories/%E6%9C%8D%E5%8A%A1/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Golang","slug":"Golang","link":"/categories/Golang/"},{"name":"MySQL","slug":"MySQL","link":"/categories/MySQL/"},{"name":"PHP","slug":"PHP","link":"/categories/PHP/"},{"name":"shell","slug":"shell","link":"/categories/shell/"},{"name":"小札","slug":"小札","link":"/categories/%E5%B0%8F%E6%9C%AD/"},{"name":"小程序","slug":"小程序","link":"/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"网络","slug":"网络","link":"/categories/%E7%BD%91%E7%BB%9C/"},{"name":"游戏","slug":"游戏","link":"/categories/%E6%B8%B8%E6%88%8F/"}]}